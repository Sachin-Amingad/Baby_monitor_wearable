
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20000b80 	.word	0x20000b80
}
   4:	000015c1 	.word	0x000015c1
   8:	00003a0d 	.word	0x00003a0d
   c:	000015f1 	.word	0x000015f1
  10:	000015f1 	.word	0x000015f1
  14:	000015f1 	.word	0x000015f1
  18:	000015f1 	.word	0x000015f1
	...
  2c:	000013cd 	.word	0x000013cd
  30:	000015f1 	.word	0x000015f1
  34:	00000000 	.word	0x00000000
  38:	00001379 	.word	0x00001379
  3c:	000039e7 	.word	0x000039e7

00000040 <_irq_vector_table>:
  40:	00001581 00001581 00001581 00001581     ................
  50:	00001581 00001581 00001581 00001581     ................
  60:	00001581 00001581 00001581 00001581     ................
  70:	00001581 00001581 00001581 00001581     ................
  80:	00001581 00001581 00001581 00001581     ................
  90:	00001581 00001581 00001581 00001581     ................
  a0:	00001581 00001581 00001581 00001581     ................
  b0:	00001581 00001581 00001581 00001581     ................
  c0:	00001581 00001581 00001581 00001581     ................
  d0:	00001581 00001581 00001581              ............

Disassembly of section text:

000000dc <__aeabi_uldivmod>:
      dc:	b953      	cbnz	r3, f4 <__aeabi_uldivmod+0x18>
      de:	b94a      	cbnz	r2, f4 <__aeabi_uldivmod+0x18>
      e0:	2900      	cmp	r1, #0
      e2:	bf08      	it	eq
      e4:	2800      	cmpeq	r0, #0
      e6:	bf1c      	itt	ne
      e8:	f04f 31ff 	movne.w	r1, #4294967295
      ec:	f04f 30ff 	movne.w	r0, #4294967295
      f0:	f000 b96c 	b.w	3cc <__aeabi_idiv0>
      f4:	f1ad 0c08 	sub.w	ip, sp, #8
      f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
      fc:	f000 f806 	bl	10c <__udivmoddi4>
     100:	f8dd e004 	ldr.w	lr, [sp, #4]
     104:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     108:	b004      	add	sp, #16
     10a:	4770      	bx	lr

0000010c <__udivmoddi4>:
     10c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     110:	9e08      	ldr	r6, [sp, #32]
     112:	460d      	mov	r5, r1
     114:	4604      	mov	r4, r0
     116:	468e      	mov	lr, r1
     118:	2b00      	cmp	r3, #0
     11a:	f040 8082 	bne.w	222 <CONFIG_FLASH_SIZE+0x22>
     11e:	428a      	cmp	r2, r1
     120:	4617      	mov	r7, r2
     122:	d946      	bls.n	1b2 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x68>
     124:	fab2 f282 	clz	r2, r2
     128:	b14a      	cbz	r2, 13e <__udivmoddi4+0x32>
     12a:	f1c2 0120 	rsb	r1, r2, #32
     12e:	fa05 f302 	lsl.w	r3, r5, r2
     132:	fa20 f101 	lsr.w	r1, r0, r1
     136:	4097      	lsls	r7, r2
     138:	ea41 0e03 	orr.w	lr, r1, r3
     13c:	4094      	lsls	r4, r2
     13e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     142:	0c23      	lsrs	r3, r4, #16
     144:	fbbe fcf8 	udiv	ip, lr, r8
     148:	b2b9      	uxth	r1, r7
     14a:	fb08 ee1c 	mls	lr, r8, ip, lr
     14e:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     152:	fb0c f001 	mul.w	r0, ip, r1
     156:	4298      	cmp	r0, r3
     158:	d90a      	bls.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     15a:	18fb      	adds	r3, r7, r3
     15c:	f10c 35ff 	add.w	r5, ip, #4294967295
     160:	f080 8116 	bcs.w	390 <CONFIG_FLASH_SIZE+0x190>
     164:	4298      	cmp	r0, r3
     166:	f240 8113 	bls.w	390 <CONFIG_FLASH_SIZE+0x190>
     16a:	f1ac 0c02 	sub.w	ip, ip, #2
     16e:	443b      	add	r3, r7
     170:	1a1b      	subs	r3, r3, r0
     172:	b2a4      	uxth	r4, r4
     174:	fbb3 f0f8 	udiv	r0, r3, r8
     178:	fb08 3310 	mls	r3, r8, r0, r3
     17c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     180:	fb00 f101 	mul.w	r1, r0, r1
     184:	42a1      	cmp	r1, r4
     186:	d909      	bls.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     188:	193c      	adds	r4, r7, r4
     18a:	f100 33ff 	add.w	r3, r0, #4294967295
     18e:	f080 8101 	bcs.w	394 <CONFIG_FLASH_SIZE+0x194>
     192:	42a1      	cmp	r1, r4
     194:	f240 80fe 	bls.w	394 <CONFIG_FLASH_SIZE+0x194>
     198:	3802      	subs	r0, #2
     19a:	443c      	add	r4, r7
     19c:	1a64      	subs	r4, r4, r1
     19e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1a2:	2100      	movs	r1, #0
     1a4:	b11e      	cbz	r6, 1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     1a6:	40d4      	lsrs	r4, r2
     1a8:	2300      	movs	r3, #0
     1aa:	e9c6 4300 	strd	r4, r3, [r6]
     1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1b2:	b902      	cbnz	r2, 1b6 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x6c>
     1b4:	deff      	udf	#255	; 0xff
     1b6:	fab2 f282 	clz	r2, r2
     1ba:	2a00      	cmp	r2, #0
     1bc:	d14f      	bne.n	25e <CONFIG_FLASH_SIZE+0x5e>
     1be:	1bcb      	subs	r3, r1, r7
     1c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1c4:	fa1f f887 	uxth.w	r8, r7
     1c8:	2101      	movs	r1, #1
     1ca:	fbb3 fcfe 	udiv	ip, r3, lr
     1ce:	0c25      	lsrs	r5, r4, #16
     1d0:	fb0e 331c 	mls	r3, lr, ip, r3
     1d4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1d8:	fb08 f30c 	mul.w	r3, r8, ip
     1dc:	42ab      	cmp	r3, r5
     1de:	d907      	bls.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     1e0:	197d      	adds	r5, r7, r5
     1e2:	f10c 30ff 	add.w	r0, ip, #4294967295
     1e6:	d202      	bcs.n	1ee <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa4>
     1e8:	42ab      	cmp	r3, r5
     1ea:	f200 80e7 	bhi.w	3bc <CONFIG_FLASH_SIZE+0x1bc>
     1ee:	4684      	mov	ip, r0
     1f0:	1aed      	subs	r5, r5, r3
     1f2:	b2a3      	uxth	r3, r4
     1f4:	fbb5 f0fe 	udiv	r0, r5, lr
     1f8:	fb0e 5510 	mls	r5, lr, r0, r5
     1fc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     200:	fb08 f800 	mul.w	r8, r8, r0
     204:	45a0      	cmp	r8, r4
     206:	d907      	bls.n	218 <CONFIG_FLASH_SIZE+0x18>
     208:	193c      	adds	r4, r7, r4
     20a:	f100 33ff 	add.w	r3, r0, #4294967295
     20e:	d202      	bcs.n	216 <CONFIG_FLASH_SIZE+0x16>
     210:	45a0      	cmp	r8, r4
     212:	f200 80d7 	bhi.w	3c4 <CONFIG_FLASH_SIZE+0x1c4>
     216:	4618      	mov	r0, r3
     218:	eba4 0408 	sub.w	r4, r4, r8
     21c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     220:	e7c0      	b.n	1a4 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x5a>
     222:	428b      	cmp	r3, r1
     224:	d908      	bls.n	238 <CONFIG_FLASH_SIZE+0x38>
     226:	2e00      	cmp	r6, #0
     228:	f000 80af 	beq.w	38a <CONFIG_FLASH_SIZE+0x18a>
     22c:	2100      	movs	r1, #0
     22e:	e9c6 0500 	strd	r0, r5, [r6]
     232:	4608      	mov	r0, r1
     234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     238:	fab3 f183 	clz	r1, r3
     23c:	2900      	cmp	r1, #0
     23e:	d14b      	bne.n	2d8 <CONFIG_FLASH_SIZE+0xd8>
     240:	42ab      	cmp	r3, r5
     242:	d302      	bcc.n	24a <CONFIG_FLASH_SIZE+0x4a>
     244:	4282      	cmp	r2, r0
     246:	f200 80b7 	bhi.w	3b8 <CONFIG_FLASH_SIZE+0x1b8>
     24a:	1a84      	subs	r4, r0, r2
     24c:	eb65 0303 	sbc.w	r3, r5, r3
     250:	2001      	movs	r0, #1
     252:	469e      	mov	lr, r3
     254:	2e00      	cmp	r6, #0
     256:	d0aa      	beq.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     258:	e9c6 4e00 	strd	r4, lr, [r6]
     25c:	e7a7      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     25e:	f1c2 0c20 	rsb	ip, r2, #32
     262:	fa01 f302 	lsl.w	r3, r1, r2
     266:	4097      	lsls	r7, r2
     268:	fa20 f00c 	lsr.w	r0, r0, ip
     26c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     270:	fa21 fc0c 	lsr.w	ip, r1, ip
     274:	4318      	orrs	r0, r3
     276:	fbbc f1fe 	udiv	r1, ip, lr
     27a:	0c05      	lsrs	r5, r0, #16
     27c:	fb0e cc11 	mls	ip, lr, r1, ip
     280:	fa1f f887 	uxth.w	r8, r7
     284:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     288:	fb01 f308 	mul.w	r3, r1, r8
     28c:	42ab      	cmp	r3, r5
     28e:	fa04 f402 	lsl.w	r4, r4, r2
     292:	d909      	bls.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     294:	197d      	adds	r5, r7, r5
     296:	f101 3cff 	add.w	ip, r1, #4294967295
     29a:	f080 808b 	bcs.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     29e:	42ab      	cmp	r3, r5
     2a0:	f240 8088 	bls.w	3b4 <CONFIG_FLASH_SIZE+0x1b4>
     2a4:	3902      	subs	r1, #2
     2a6:	443d      	add	r5, r7
     2a8:	1aeb      	subs	r3, r5, r3
     2aa:	b285      	uxth	r5, r0
     2ac:	fbb3 f0fe 	udiv	r0, r3, lr
     2b0:	fb0e 3310 	mls	r3, lr, r0, r3
     2b4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2b8:	fb00 f308 	mul.w	r3, r0, r8
     2bc:	42ab      	cmp	r3, r5
     2be:	d907      	bls.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     2c0:	197d      	adds	r5, r7, r5
     2c2:	f100 3cff 	add.w	ip, r0, #4294967295
     2c6:	d271      	bcs.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2c8:	42ab      	cmp	r3, r5
     2ca:	d96f      	bls.n	3ac <CONFIG_FLASH_SIZE+0x1ac>
     2cc:	3802      	subs	r0, #2
     2ce:	443d      	add	r5, r7
     2d0:	1aeb      	subs	r3, r5, r3
     2d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2d6:	e778      	b.n	1ca <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x80>
     2d8:	f1c1 0c20 	rsb	ip, r1, #32
     2dc:	408b      	lsls	r3, r1
     2de:	fa22 f70c 	lsr.w	r7, r2, ip
     2e2:	431f      	orrs	r7, r3
     2e4:	fa20 f40c 	lsr.w	r4, r0, ip
     2e8:	fa05 f301 	lsl.w	r3, r5, r1
     2ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2f0:	fa25 f50c 	lsr.w	r5, r5, ip
     2f4:	431c      	orrs	r4, r3
     2f6:	0c23      	lsrs	r3, r4, #16
     2f8:	fbb5 f9fe 	udiv	r9, r5, lr
     2fc:	fa1f f887 	uxth.w	r8, r7
     300:	fb0e 5519 	mls	r5, lr, r9, r5
     304:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     308:	fb09 fa08 	mul.w	sl, r9, r8
     30c:	45aa      	cmp	sl, r5
     30e:	fa02 f201 	lsl.w	r2, r2, r1
     312:	fa00 f301 	lsl.w	r3, r0, r1
     316:	d908      	bls.n	32a <CONFIG_FLASH_SIZE+0x12a>
     318:	197d      	adds	r5, r7, r5
     31a:	f109 30ff 	add.w	r0, r9, #4294967295
     31e:	d247      	bcs.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     320:	45aa      	cmp	sl, r5
     322:	d945      	bls.n	3b0 <CONFIG_FLASH_SIZE+0x1b0>
     324:	f1a9 0902 	sub.w	r9, r9, #2
     328:	443d      	add	r5, r7
     32a:	eba5 050a 	sub.w	r5, r5, sl
     32e:	b2a4      	uxth	r4, r4
     330:	fbb5 f0fe 	udiv	r0, r5, lr
     334:	fb0e 5510 	mls	r5, lr, r0, r5
     338:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     33c:	fb00 f808 	mul.w	r8, r0, r8
     340:	45a0      	cmp	r8, r4
     342:	d907      	bls.n	354 <CONFIG_FLASH_SIZE+0x154>
     344:	193c      	adds	r4, r7, r4
     346:	f100 35ff 	add.w	r5, r0, #4294967295
     34a:	d22d      	bcs.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     34c:	45a0      	cmp	r8, r4
     34e:	d92b      	bls.n	3a8 <CONFIG_FLASH_SIZE+0x1a8>
     350:	3802      	subs	r0, #2
     352:	443c      	add	r4, r7
     354:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     358:	eba4 0408 	sub.w	r4, r4, r8
     35c:	fba0 8902 	umull	r8, r9, r0, r2
     360:	454c      	cmp	r4, r9
     362:	46c6      	mov	lr, r8
     364:	464d      	mov	r5, r9
     366:	d319      	bcc.n	39c <CONFIG_FLASH_SIZE+0x19c>
     368:	d016      	beq.n	398 <CONFIG_FLASH_SIZE+0x198>
     36a:	b15e      	cbz	r6, 384 <CONFIG_FLASH_SIZE+0x184>
     36c:	ebb3 020e 	subs.w	r2, r3, lr
     370:	eb64 0405 	sbc.w	r4, r4, r5
     374:	fa04 fc0c 	lsl.w	ip, r4, ip
     378:	40ca      	lsrs	r2, r1
     37a:	ea4c 0202 	orr.w	r2, ip, r2
     37e:	40cc      	lsrs	r4, r1
     380:	e9c6 2400 	strd	r2, r4, [r6]
     384:	2100      	movs	r1, #0
     386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     38a:	4631      	mov	r1, r6
     38c:	4630      	mov	r0, r6
     38e:	e70e      	b.n	1ae <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x64>
     390:	46ac      	mov	ip, r5
     392:	e6ed      	b.n	170 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x26>
     394:	4618      	mov	r0, r3
     396:	e701      	b.n	19c <CONFIG_NRF52_ANOMALY_132_DELAY_US+0x52>
     398:	4543      	cmp	r3, r8
     39a:	d2e6      	bcs.n	36a <CONFIG_FLASH_SIZE+0x16a>
     39c:	ebb8 0e02 	subs.w	lr, r8, r2
     3a0:	eb69 0507 	sbc.w	r5, r9, r7
     3a4:	3801      	subs	r0, #1
     3a6:	e7e0      	b.n	36a <CONFIG_FLASH_SIZE+0x16a>
     3a8:	4628      	mov	r0, r5
     3aa:	e7d3      	b.n	354 <CONFIG_FLASH_SIZE+0x154>
     3ac:	4660      	mov	r0, ip
     3ae:	e78f      	b.n	2d0 <CONFIG_FLASH_SIZE+0xd0>
     3b0:	4681      	mov	r9, r0
     3b2:	e7ba      	b.n	32a <CONFIG_FLASH_SIZE+0x12a>
     3b4:	4661      	mov	r1, ip
     3b6:	e777      	b.n	2a8 <CONFIG_FLASH_SIZE+0xa8>
     3b8:	4608      	mov	r0, r1
     3ba:	e74b      	b.n	254 <CONFIG_FLASH_SIZE+0x54>
     3bc:	f1ac 0c02 	sub.w	ip, ip, #2
     3c0:	443d      	add	r5, r7
     3c2:	e715      	b.n	1f0 <CONFIG_NRF52_ANOMALY_132_DELAY_US+0xa6>
     3c4:	3802      	subs	r0, #2
     3c6:	443c      	add	r4, r7
     3c8:	e726      	b.n	218 <CONFIG_FLASH_SIZE+0x18>
     3ca:	bf00      	nop

000003cc <__aeabi_idiv0>:
     3cc:	4770      	bx	lr
     3ce:	bf00      	nop

000003d0 <main>:
#include <zephyr.h>
#include <sys/printk.h>

void main(void)
{
	printk("Hello World!\n");
     3d0:	4801      	ldr	r0, [pc, #4]	; (3d8 <main+0x8>)
     3d2:	f003 b877 	b.w	34c4 <printk>
     3d6:	bf00      	nop
     3d8:	00004128 	.word	0x00004128

000003dc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     3dc:	680b      	ldr	r3, [r1, #0]
     3de:	3301      	adds	r3, #1
     3e0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     3e2:	4b01      	ldr	r3, [pc, #4]	; (3e8 <char_out+0xc>)
     3e4:	681b      	ldr	r3, [r3, #0]
     3e6:	4718      	bx	r3
     3e8:	20000000 	.word	0x20000000

000003ec <__printk_hook_install>:
	_char_out = fn;
     3ec:	4b01      	ldr	r3, [pc, #4]	; (3f4 <__printk_hook_install+0x8>)
     3ee:	6018      	str	r0, [r3, #0]
}
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop
     3f4:	20000000 	.word	0x20000000

000003f8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     3f8:	b507      	push	{r0, r1, r2, lr}
     3fa:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     3fc:	2100      	movs	r1, #0
{
     3fe:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     400:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     402:	4803      	ldr	r0, [pc, #12]	; (410 <CONFIG_MAIN_STACK_SIZE+0x10>)
     404:	a901      	add	r1, sp, #4
     406:	f000 f8eb 	bl	5e0 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     40a:	b003      	add	sp, #12
     40c:	f85d fb04 	ldr.w	pc, [sp], #4
     410:	000003dd 	.word	0x000003dd

00000414 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     418:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     41c:	f019 0808 	ands.w	r8, r9, #8
{
     420:	4604      	mov	r4, r0
     422:	4693      	mov	fp, r2
	if (processing) {
     424:	d00d      	beq.n	442 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     426:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     428:	bf0c      	ite	eq
     42a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     42e:	f049 0920 	orrne.w	r9, r9, #32
     432:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     436:	f38b 8811 	msr	BASEPRI, fp
     43a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     43e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     442:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     446:	2902      	cmp	r1, #2
     448:	d107      	bne.n	45a <process_event+0x46>
			evt = process_recheck(mgr);
     44a:	4620      	mov	r0, r4
     44c:	f003 f847 	bl	34de <process_recheck>
		if (evt == EVT_NOP) {
     450:	2800      	cmp	r0, #0
     452:	d0f0      	beq.n	436 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     454:	2801      	cmp	r0, #1
     456:	8b23      	ldrh	r3, [r4, #24]
     458:	d150      	bne.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
			res = mgr->last_res;
     45a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     45c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     45e:	2f00      	cmp	r7, #0
     460:	da15      	bge.n	48e <process_event+0x7a>
		*clients = mgr->clients;
     462:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     464:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     468:	e9c4 8800 	strd	r8, r8, [r4]
     46c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     470:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     472:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     474:	8b21      	ldrh	r1, [r4, #24]
     476:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     47a:	45ca      	cmp	sl, r9
     47c:	d002      	beq.n	484 <process_event+0x70>
		if (do_monitors
     47e:	68a3      	ldr	r3, [r4, #8]
     480:	2b00      	cmp	r3, #0
     482:	d15c      	bne.n	53e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x56>
		    || !sys_slist_is_empty(&clients)
     484:	b90d      	cbnz	r5, 48a <process_event+0x76>
		    || (transit != NULL)) {
     486:	2e00      	cmp	r6, #0
     488:	d074      	beq.n	574 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8c>
     48a:	2300      	movs	r3, #0
     48c:	e058      	b.n	540 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x58>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     48e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     492:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     494:	2a01      	cmp	r2, #1
     496:	d820      	bhi.n	4da <process_event+0xc6>
		*clients = mgr->clients;
     498:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     49c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     49e:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
     4a0:	b289      	uxth	r1, r1
	list->tail = NULL;
     4a2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     4a6:	d10c      	bne.n	4c2 <process_event+0xae>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     4a8:	2d00      	cmp	r5, #0
     4aa:	462b      	mov	r3, r5
     4ac:	bf38      	it	cc
     4ae:	2300      	movcc	r3, #0
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     4b0:	b12b      	cbz	r3, 4be <process_event+0xaa>
				mgr->refs += 1U;
     4b2:	8b62      	ldrh	r2, [r4, #26]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     4b4:	681b      	ldr	r3, [r3, #0]
     4b6:	3201      	adds	r2, #1
     4b8:	8362      	strh	r2, [r4, #26]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     4ba:	2b00      	cmp	r3, #0
     4bc:	d1f8      	bne.n	4b0 <process_event+0x9c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4be:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     4c2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     4c4:	4620      	mov	r0, r4
     4c6:	f003 f80a 	bl	34de <process_recheck>
     4ca:	4606      	mov	r6, r0
     4cc:	2800      	cmp	r0, #0
     4ce:	d0d1      	beq.n	474 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     4d0:	8b23      	ldrh	r3, [r4, #24]
     4d2:	f043 0320 	orr.w	r3, r3, #32
     4d6:	8323      	strh	r3, [r4, #24]
     4d8:	e7cb      	b.n	472 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     4da:	2b04      	cmp	r3, #4
     4dc:	d10c      	bne.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     4de:	f021 0107 	bic.w	r1, r1, #7
     4e2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     4e4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     4e6:	4620      	mov	r0, r4
     4e8:	f002 fff9 	bl	34de <process_recheck>
     4ec:	4605      	mov	r5, r0
     4ee:	2800      	cmp	r0, #0
     4f0:	d0bf      	beq.n	472 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     4f2:	f041 0120 	orr.w	r1, r1, #32
     4f6:	8321      	strh	r1, [r4, #24]
     4f8:	2500      	movs	r5, #0
     4fa:	e7ba      	b.n	472 <process_event+0x5e>
		} else if (evt == EVT_START) {
     4fc:	2803      	cmp	r0, #3
     4fe:	d109      	bne.n	514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
			transit = mgr->transitions->start;
     500:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     502:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     506:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     508:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     50c:	8323      	strh	r3, [r4, #24]
}
     50e:	2500      	movs	r5, #0
		res = 0;
     510:	462f      	mov	r7, r5
     512:	e7af      	b.n	474 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     514:	2804      	cmp	r0, #4
     516:	d106      	bne.n	526 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3e>
			transit = mgr->transitions->stop;
     518:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     51a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     51e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     520:	f043 0304 	orr.w	r3, r3, #4
     524:	e7f2      	b.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
		} else if (evt == EVT_RESET) {
     526:	2805      	cmp	r0, #5
     528:	d106      	bne.n	538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>
			transit = mgr->transitions->reset;
     52a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     52c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     530:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     532:	f043 0305 	orr.w	r3, r3, #5
     536:	e7e9      	b.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     538:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     53a:	462e      	mov	r6, r5
     53c:	e7e8      	b.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
				   && !sys_slist_is_empty(&mgr->monitors);
     53e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     540:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     544:	8321      	strh	r1, [r4, #24]
     546:	f38b 8811 	msr	BASEPRI, fp
     54a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     54e:	bb03      	cbnz	r3, 592 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xaa>
	while (!sys_slist_is_empty(list)) {
     550:	2d00      	cmp	r5, #0
     552:	d133      	bne.n	5bc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xd4>
			if (transit != NULL) {
     554:	b116      	cbz	r6, 55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>
				transit(mgr, transition_complete);
     556:	4921      	ldr	r1, [pc, #132]	; (5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>)
     558:	4620      	mov	r0, r4
     55a:	47b0      	blx	r6
	__asm__ volatile(
     55c:	f04f 0320 	mov.w	r3, #32
     560:	f3ef 8b11 	mrs	fp, BASEPRI
     564:	f383 8811 	msr	BASEPRI, r3
     568:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     56c:	8b23      	ldrh	r3, [r4, #24]
     56e:	f023 0308 	bic.w	r3, r3, #8
     572:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     574:	8b23      	ldrh	r3, [r4, #24]
     576:	06da      	lsls	r2, r3, #27
     578:	d528      	bpl.n	5cc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xe4>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     57a:	f023 0310 	bic.w	r3, r3, #16
     57e:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     580:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     582:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     586:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     58a:	2900      	cmp	r1, #0
     58c:	f47f af5b 	bne.w	446 <process_event+0x32>
out:
     590:	e751      	b.n	436 <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     592:	68a1      	ldr	r1, [r4, #8]
     594:	2900      	cmp	r1, #0
     596:	d0db      	beq.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
	return node->next;
     598:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
     59a:	f8d1 b004 	ldr.w	fp, [r1, #4]
     59e:	2b00      	cmp	r3, #0
     5a0:	bf38      	it	cc
     5a2:	2300      	movcc	r3, #0
     5a4:	4699      	mov	r9, r3
     5a6:	4652      	mov	r2, sl
     5a8:	463b      	mov	r3, r7
     5aa:	4620      	mov	r0, r4
     5ac:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     5ae:	f1b9 0f00 	cmp.w	r9, #0
     5b2:	d0cd      	beq.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
     5b4:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
     5b8:	4649      	mov	r1, r9
     5ba:	e7ee      	b.n	59a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xb2>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
     5bc:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     5be:	463b      	mov	r3, r7
     5c0:	4652      	mov	r2, sl
     5c2:	4620      	mov	r0, r4
     5c4:	682d      	ldr	r5, [r5, #0]
     5c6:	f002 ffa6 	bl	3516 <notify_one>
     5ca:	e7c1      	b.n	550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     5cc:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     5d0:	bf1e      	ittt	ne
     5d2:	f023 0320 	bicne.w	r3, r3, #32
     5d6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     5d8:	2102      	movne	r1, #2
     5da:	e7d2      	b.n	582 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9a>
     5dc:	00003543 	.word	0x00003543

000005e0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5e4:	b091      	sub	sp, #68	; 0x44
     5e6:	468b      	mov	fp, r1
     5e8:	9002      	str	r0, [sp, #8]
     5ea:	4692      	mov	sl, r2
     5ec:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     5ee:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     5f0:	f89a 0000 	ldrb.w	r0, [sl]
     5f4:	b908      	cbnz	r0, 5fa <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     5f6:	4628      	mov	r0, r5
     5f8:	e35e      	b.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
		if (*fp != '%') {
     5fa:	2825      	cmp	r0, #37	; 0x25
     5fc:	f10a 0701 	add.w	r7, sl, #1
     600:	d007      	beq.n	612 <cbvprintf+0x32>
			OUTC('%');
     602:	9b02      	ldr	r3, [sp, #8]
     604:	4659      	mov	r1, fp
     606:	4798      	blx	r3
     608:	2800      	cmp	r0, #0
     60a:	f2c0 8355 	blt.w	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
     60e:	3501      	adds	r5, #1
			break;
     610:	e210      	b.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
		} state = {
     612:	2218      	movs	r2, #24
     614:	2100      	movs	r1, #0
     616:	a80a      	add	r0, sp, #40	; 0x28
     618:	f003 fa50 	bl	3abc <memset>
	if (*sp == '%') {
     61c:	f89a 3001 	ldrb.w	r3, [sl, #1]
     620:	2b25      	cmp	r3, #37	; 0x25
     622:	d078      	beq.n	716 <cbvprintf+0x136>
     624:	2200      	movs	r2, #0
     626:	4694      	mov	ip, r2
     628:	4616      	mov	r6, r2
     62a:	4696      	mov	lr, r2
     62c:	4610      	mov	r0, r2
     62e:	4639      	mov	r1, r7
		switch (*sp) {
     630:	f817 3b01 	ldrb.w	r3, [r7], #1
     634:	2b2b      	cmp	r3, #43	; 0x2b
     636:	f000 809d 	beq.w	774 <cbvprintf+0x194>
     63a:	f200 8094 	bhi.w	766 <cbvprintf+0x186>
     63e:	2b20      	cmp	r3, #32
     640:	f000 809b 	beq.w	77a <cbvprintf+0x19a>
     644:	2b23      	cmp	r3, #35	; 0x23
     646:	f000 809a 	beq.w	77e <cbvprintf+0x19e>
     64a:	b128      	cbz	r0, 658 <cbvprintf+0x78>
     64c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     650:	f040 0004 	orr.w	r0, r0, #4
     654:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     658:	f1be 0f00 	cmp.w	lr, #0
     65c:	d005      	beq.n	66a <cbvprintf+0x8a>
     65e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     662:	f040 0008 	orr.w	r0, r0, #8
     666:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     66a:	b12e      	cbz	r6, 678 <cbvprintf+0x98>
     66c:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     670:	f040 0010 	orr.w	r0, r0, #16
     674:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     678:	f1bc 0f00 	cmp.w	ip, #0
     67c:	d005      	beq.n	68a <cbvprintf+0xaa>
     67e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     682:	f040 0020 	orr.w	r0, r0, #32
     686:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     68a:	b12a      	cbz	r2, 698 <cbvprintf+0xb8>
     68c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     694:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     698:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     69c:	f002 0044 	and.w	r0, r2, #68	; 0x44
     6a0:	2844      	cmp	r0, #68	; 0x44
     6a2:	d103      	bne.n	6ac <cbvprintf+0xcc>
		conv->flag_zero = false;
     6a4:	f36f 1286 	bfc	r2, #6, #1
     6a8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     6ac:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     6b0:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     6b2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     6b6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     6ba:	d17b      	bne.n	7b4 <cbvprintf+0x1d4>
		conv->width_star = true;
     6bc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     6c0:	f042 0201 	orr.w	r2, r2, #1
     6c4:	1c4b      	adds	r3, r1, #1
     6c6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     6ca:	781a      	ldrb	r2, [r3, #0]
     6cc:	2a2e      	cmp	r2, #46	; 0x2e
     6ce:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     6d2:	bf0c      	ite	eq
     6d4:	2101      	moveq	r1, #1
     6d6:	2100      	movne	r1, #0
     6d8:	f361 0241 	bfi	r2, r1, #1, #1
     6dc:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     6e0:	d174      	bne.n	7cc <cbvprintf+0x1ec>
	if (*sp == '*') {
     6e2:	785a      	ldrb	r2, [r3, #1]
     6e4:	2a2a      	cmp	r2, #42	; 0x2a
     6e6:	d06a      	beq.n	7be <cbvprintf+0x1de>
     6e8:	3301      	adds	r3, #1
	size_t val = 0;
     6ea:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     6ec:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     6ee:	4618      	mov	r0, r3
     6f0:	f810 2b01 	ldrb.w	r2, [r0], #1
     6f4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     6f8:	2f09      	cmp	r7, #9
     6fa:	f240 808e 	bls.w	81a <CONFIG_ISR_STACK_SIZE+0x1a>
	conv->unsupported |= ((conv->prec_value < 0)
     6fe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     702:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     704:	f3c2 0040 	ubfx	r0, r2, #1, #1
     708:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     70c:	f361 0241 	bfi	r2, r1, #1, #1
     710:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     714:	e05a      	b.n	7cc <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     716:	f10a 0702 	add.w	r7, sl, #2
     71a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     71e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     722:	07d9      	lsls	r1, r3, #31
     724:	f140 8149 	bpl.w	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
			width = va_arg(ap, int);
     728:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     72c:	f1b9 0f00 	cmp.w	r9, #0
     730:	da07      	bge.n	742 <cbvprintf+0x162>
				conv->flag_dash = true;
     732:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     736:	f042 0204 	orr.w	r2, r2, #4
     73a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     73e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     742:	075a      	lsls	r2, r3, #29
     744:	f140 8142 	bpl.w	9cc <CONFIG_ISR_STACK_SIZE+0x1cc>
			int arg = va_arg(ap, int);
     748:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     74c:	f1b8 0f00 	cmp.w	r8, #0
     750:	f280 8141 	bge.w	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
				conv->prec_present = false;
     754:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     758:	f36f 0341 	bfc	r3, #1, #1
     75c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     760:	f04f 38ff 	mov.w	r8, #4294967295
     764:	e137      	b.n	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
		switch (*sp) {
     766:	2b2d      	cmp	r3, #45	; 0x2d
     768:	d00c      	beq.n	784 <cbvprintf+0x1a4>
     76a:	2b30      	cmp	r3, #48	; 0x30
     76c:	f47f af6d 	bne.w	64a <cbvprintf+0x6a>
			conv->flag_zero = true;
     770:	2201      	movs	r2, #1
	} while (loop);
     772:	e75c      	b.n	62e <cbvprintf+0x4e>
			conv->flag_plus = true;
     774:	f04f 0e01 	mov.w	lr, #1
     778:	e759      	b.n	62e <cbvprintf+0x4e>
			conv->flag_space = true;
     77a:	2601      	movs	r6, #1
     77c:	e757      	b.n	62e <cbvprintf+0x4e>
			conv->flag_hash = true;
     77e:	f04f 0c01 	mov.w	ip, #1
     782:	e754      	b.n	62e <cbvprintf+0x4e>
		switch (*sp) {
     784:	2001      	movs	r0, #1
     786:	e752      	b.n	62e <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     788:	fb0c 0202 	mla	r2, ip, r2, r0
     78c:	3a30      	subs	r2, #48	; 0x30
     78e:	4633      	mov	r3, r6
     790:	461e      	mov	r6, r3
     792:	f816 0b01 	ldrb.w	r0, [r6], #1
     796:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     79a:	2f09      	cmp	r7, #9
     79c:	d9f4      	bls.n	788 <cbvprintf+0x1a8>
	if (sp != wp) {
     79e:	4299      	cmp	r1, r3
     7a0:	d093      	beq.n	6ca <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     7a2:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     7a6:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     7a8:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     7aa:	f362 0141 	bfi	r1, r2, #1, #1
     7ae:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     7b2:	e78a      	b.n	6ca <cbvprintf+0xea>
     7b4:	460b      	mov	r3, r1
	size_t val = 0;
     7b6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     7b8:	f04f 0c0a 	mov.w	ip, #10
     7bc:	e7e8      	b.n	790 <cbvprintf+0x1b0>
		conv->prec_star = true;
     7be:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     7c2:	f042 0204 	orr.w	r2, r2, #4
     7c6:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     7ca:	3302      	adds	r3, #2
	switch (*sp) {
     7cc:	461f      	mov	r7, r3
     7ce:	f817 2b01 	ldrb.w	r2, [r7], #1
     7d2:	2a6c      	cmp	r2, #108	; 0x6c
     7d4:	d041      	beq.n	85a <CONFIG_ISR_STACK_SIZE+0x5a>
     7d6:	d825      	bhi.n	824 <CONFIG_ISR_STACK_SIZE+0x24>
     7d8:	2a68      	cmp	r2, #104	; 0x68
     7da:	d02b      	beq.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
     7dc:	2a6a      	cmp	r2, #106	; 0x6a
     7de:	d046      	beq.n	86e <CONFIG_ISR_STACK_SIZE+0x6e>
     7e0:	2a4c      	cmp	r2, #76	; 0x4c
     7e2:	d04c      	beq.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
     7e4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     7e6:	f817 2b01 	ldrb.w	r2, [r7], #1
     7ea:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7ee:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     7f2:	2a78      	cmp	r2, #120	; 0x78
     7f4:	f200 80d9 	bhi.w	9aa <CONFIG_ISR_STACK_SIZE+0x1aa>
     7f8:	2a57      	cmp	r2, #87	; 0x57
     7fa:	d84d      	bhi.n	898 <CONFIG_ISR_STACK_SIZE+0x98>
     7fc:	2a41      	cmp	r2, #65	; 0x41
     7fe:	d003      	beq.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
     800:	3a45      	subs	r2, #69	; 0x45
     802:	2a02      	cmp	r2, #2
     804:	f200 80d1 	bhi.w	9aa <CONFIG_ISR_STACK_SIZE+0x1aa>
		conv->specifier_cat = SPECIFIER_FP;
     808:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     80c:	2204      	movs	r2, #4
     80e:	f362 0302 	bfi	r3, r2, #0, #3
     812:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     816:	2301      	movs	r3, #1
			break;
     818:	e09e      	b.n	958 <CONFIG_ISR_STACK_SIZE+0x158>
		val = 10U * val + *sp++ - '0';
     81a:	fb06 2101 	mla	r1, r6, r1, r2
     81e:	3930      	subs	r1, #48	; 0x30
     820:	4603      	mov	r3, r0
     822:	e764      	b.n	6ee <cbvprintf+0x10e>
	switch (*sp) {
     824:	2a74      	cmp	r2, #116	; 0x74
     826:	d026      	beq.n	876 <CONFIG_ISR_STACK_SIZE+0x76>
     828:	2a7a      	cmp	r2, #122	; 0x7a
     82a:	d1db      	bne.n	7e4 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     82c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     830:	2206      	movs	r2, #6
     832:	e00d      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		if (*++sp == 'h') {
     834:	785a      	ldrb	r2, [r3, #1]
     836:	2a68      	cmp	r2, #104	; 0x68
     838:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     83c:	d106      	bne.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
			conv->length_mod = LENGTH_HH;
     83e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     840:	f361 02c6 	bfi	r2, r1, #3, #4
     844:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     848:	1c9f      	adds	r7, r3, #2
     84a:	e7cc      	b.n	7e6 <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     84c:	4613      	mov	r3, r2
     84e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     850:	f362 03c6 	bfi	r3, r2, #3, #4
     854:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     858:	e7c5      	b.n	7e6 <cbvprintf+0x206>
		if (*++sp == 'l') {
     85a:	785a      	ldrb	r2, [r3, #1]
     85c:	2a6c      	cmp	r2, #108	; 0x6c
     85e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     862:	d101      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
			conv->length_mod = LENGTH_LL;
     864:	2104      	movs	r1, #4
     866:	e7eb      	b.n	840 <CONFIG_ISR_STACK_SIZE+0x40>
			conv->length_mod = LENGTH_L;
     868:	4613      	mov	r3, r2
     86a:	2203      	movs	r2, #3
     86c:	e7f0      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		conv->length_mod = LENGTH_J;
     86e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     872:	2205      	movs	r2, #5
     874:	e7ec      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		conv->length_mod = LENGTH_T;
     876:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     87a:	2207      	movs	r2, #7
     87c:	e7e8      	b.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
		conv->unsupported = true;
     87e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     882:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     886:	f023 0302 	bic.w	r3, r3, #2
     88a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     88e:	f043 0302 	orr.w	r3, r3, #2
     892:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     896:	e7a6      	b.n	7e6 <cbvprintf+0x206>
     898:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     89c:	2920      	cmp	r1, #32
     89e:	f200 8084 	bhi.w	9aa <CONFIG_ISR_STACK_SIZE+0x1aa>
     8a2:	a001      	add	r0, pc, #4	; (adr r0, 8a8 <CONFIG_ISR_STACK_SIZE+0xa8>)
     8a4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     8a8:	0000096d 	.word	0x0000096d
     8ac:	000009ab 	.word	0x000009ab
     8b0:	000009ab 	.word	0x000009ab
     8b4:	000009ab 	.word	0x000009ab
     8b8:	000009ab 	.word	0x000009ab
     8bc:	000009ab 	.word	0x000009ab
     8c0:	000009ab 	.word	0x000009ab
     8c4:	000009ab 	.word	0x000009ab
     8c8:	000009ab 	.word	0x000009ab
     8cc:	00000809 	.word	0x00000809
     8d0:	000009ab 	.word	0x000009ab
     8d4:	0000096d 	.word	0x0000096d
     8d8:	0000092d 	.word	0x0000092d
     8dc:	00000809 	.word	0x00000809
     8e0:	00000809 	.word	0x00000809
     8e4:	00000809 	.word	0x00000809
     8e8:	000009ab 	.word	0x000009ab
     8ec:	0000092d 	.word	0x0000092d
     8f0:	000009ab 	.word	0x000009ab
     8f4:	000009ab 	.word	0x000009ab
     8f8:	000009ab 	.word	0x000009ab
     8fc:	000009ab 	.word	0x000009ab
     900:	00000975 	.word	0x00000975
     904:	0000096d 	.word	0x0000096d
     908:	00000991 	.word	0x00000991
     90c:	000009ab 	.word	0x000009ab
     910:	000009ab 	.word	0x000009ab
     914:	00000991 	.word	0x00000991
     918:	000009ab 	.word	0x000009ab
     91c:	0000096d 	.word	0x0000096d
     920:	000009ab 	.word	0x000009ab
     924:	000009ab 	.word	0x000009ab
     928:	0000096d 	.word	0x0000096d
		conv->specifier_cat = SPECIFIER_SINT;
     92c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     930:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     932:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     936:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     93a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     93c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     940:	bf02      	ittt	eq
     942:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     946:	f041 0101 	orreq.w	r1, r1, #1
     94a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     94e:	2a63      	cmp	r2, #99	; 0x63
     950:	d131      	bne.n	9b6 <CONFIG_ISR_STACK_SIZE+0x1b6>
			unsupported = (conv->length_mod != LENGTH_NONE);
     952:	3b00      	subs	r3, #0
     954:	bf18      	it	ne
     956:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     958:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     95c:	f3c2 0140 	ubfx	r1, r2, #1, #1
     960:	430b      	orrs	r3, r1
     962:	f363 0241 	bfi	r2, r3, #1, #1
     966:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     96a:	e6d8      	b.n	71e <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     96c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     970:	2002      	movs	r0, #2
     972:	e7de      	b.n	932 <CONFIG_ISR_STACK_SIZE+0x132>
		conv->specifier_cat = SPECIFIER_PTR;
     974:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     978:	f003 0378 	and.w	r3, r3, #120	; 0x78
     97c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     980:	2103      	movs	r1, #3
     982:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     986:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     988:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     98c:	4143      	adcs	r3, r0
     98e:	e7e3      	b.n	958 <CONFIG_ISR_STACK_SIZE+0x158>
		conv->specifier_cat = SPECIFIER_PTR;
     990:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     994:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     996:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     99a:	f361 0202 	bfi	r2, r1, #0, #3
     99e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     9a2:	bf14      	ite	ne
     9a4:	2301      	movne	r3, #1
     9a6:	2300      	moveq	r3, #0
     9a8:	e7d6      	b.n	958 <CONFIG_ISR_STACK_SIZE+0x158>
		conv->invalid = true;
     9aa:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     9ae:	f043 0301 	orr.w	r3, r3, #1
     9b2:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     9b6:	2300      	movs	r3, #0
     9b8:	e7ce      	b.n	958 <CONFIG_ISR_STACK_SIZE+0x158>
		} else if (conv->width_present) {
     9ba:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     9be:	2a00      	cmp	r2, #0
			width = conv->width_value;
     9c0:	bfb4      	ite	lt
     9c2:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     9c6:	f04f 39ff 	movge.w	r9, #4294967295
     9ca:	e6ba      	b.n	742 <cbvprintf+0x162>
		} else if (conv->prec_present) {
     9cc:	079b      	lsls	r3, r3, #30
     9ce:	f57f aec7 	bpl.w	760 <cbvprintf+0x180>
			precision = conv->prec_value;
     9d2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     9d6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     9da:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     9dc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     9e0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     9e4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     9e8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     9ea:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     9ee:	d136      	bne.n	a5e <CONFIG_ISR_STACK_SIZE+0x25e>
			switch (length_mod) {
     9f0:	1ed3      	subs	r3, r2, #3
     9f2:	2b04      	cmp	r3, #4
     9f4:	d820      	bhi.n	a38 <CONFIG_ISR_STACK_SIZE+0x238>
     9f6:	e8df f003 	tbb	[pc, r3]
     9fa:	0703      	.short	0x0703
     9fc:	1f07      	.short	0x1f07
     9fe:	1f          	.byte	0x1f
     9ff:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     a00:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
     a04:	17c1      	asrs	r1, r0, #31
     a06:	e004      	b.n	a12 <CONFIG_ISR_STACK_SIZE+0x212>
					(sint_value_type)va_arg(ap, intmax_t);
     a08:	3407      	adds	r4, #7
     a0a:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     a0e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
     a12:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     a16:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a1a:	f013 0603 	ands.w	r6, r3, #3
     a1e:	d054      	beq.n	aca <CONFIG_ISR_STACK_SIZE+0x2ca>
			OUTS(sp, fp);
     a20:	9802      	ldr	r0, [sp, #8]
     a22:	463b      	mov	r3, r7
     a24:	4652      	mov	r2, sl
     a26:	4659      	mov	r1, fp
     a28:	f002 ff35 	bl	3896 <outs>
     a2c:	2800      	cmp	r0, #0
     a2e:	f2c0 8143 	blt.w	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
     a32:	4405      	add	r5, r0
			continue;
     a34:	46ba      	mov	sl, r7
     a36:	e5db      	b.n	5f0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a38:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
     a3c:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     a3e:	ea4f 71e0 	mov.w	r1, r0, asr #31
     a42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a46:	d105      	bne.n	a54 <CONFIG_ISR_STACK_SIZE+0x254>
				value->uint = (unsigned char)value->uint;
     a48:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     a4c:	930a      	str	r3, [sp, #40]	; 0x28
     a4e:	2300      	movs	r3, #0
     a50:	930b      	str	r3, [sp, #44]	; 0x2c
     a52:	e7e0      	b.n	a16 <CONFIG_ISR_STACK_SIZE+0x216>
			} else if (length_mod == LENGTH_H) {
     a54:	2a02      	cmp	r2, #2
     a56:	d1de      	bne.n	a16 <CONFIG_ISR_STACK_SIZE+0x216>
				value->sint = (short)value->sint;
     a58:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
     a5c:	e7d2      	b.n	a04 <CONFIG_ISR_STACK_SIZE+0x204>
		} else if (specifier_cat == SPECIFIER_UINT) {
     a5e:	2b02      	cmp	r3, #2
     a60:	d123      	bne.n	aaa <CONFIG_ISR_STACK_SIZE+0x2aa>
			switch (length_mod) {
     a62:	1ed3      	subs	r3, r2, #3
     a64:	2b04      	cmp	r3, #4
     a66:	d813      	bhi.n	a90 <CONFIG_ISR_STACK_SIZE+0x290>
     a68:	e8df f003 	tbb	[pc, r3]
     a6c:	120a0a03 	.word	0x120a0a03
     a70:	12          	.byte	0x12
     a71:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     a72:	6820      	ldr	r0, [r4, #0]
     a74:	900a      	str	r0, [sp, #40]	; 0x28
     a76:	2100      	movs	r1, #0
     a78:	1d23      	adds	r3, r4, #4
     a7a:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     a7c:	461c      	mov	r4, r3
     a7e:	e7ca      	b.n	a16 <CONFIG_ISR_STACK_SIZE+0x216>
					(uint_value_type)va_arg(ap,
     a80:	3407      	adds	r4, #7
     a82:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
     a86:	e8f3 0102 	ldrd	r0, r1, [r3], #8
     a8a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
     a8e:	e7f5      	b.n	a7c <CONFIG_ISR_STACK_SIZE+0x27c>
					(uint_value_type)va_arg(ap, size_t);
     a90:	f854 3b04 	ldr.w	r3, [r4], #4
     a94:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     a96:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
     a98:	f04f 0300 	mov.w	r3, #0
     a9c:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     a9e:	d0d3      	beq.n	a48 <CONFIG_ISR_STACK_SIZE+0x248>
			} else if (length_mod == LENGTH_H) {
     aa0:	2a02      	cmp	r2, #2
     aa2:	d1b8      	bne.n	a16 <CONFIG_ISR_STACK_SIZE+0x216>
				value->uint = (unsigned short)value->uint;
     aa4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     aa8:	e7d0      	b.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
		} else if (specifier_cat == SPECIFIER_FP) {
     aaa:	2b04      	cmp	r3, #4
     aac:	d107      	bne.n	abe <CONFIG_ISR_STACK_SIZE+0x2be>
			if (length_mod == LENGTH_UPPER_L) {
     aae:	3407      	adds	r4, #7
     ab0:	f024 0407 	bic.w	r4, r4, #7
     ab4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
     ab8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
     abc:	e7ab      	b.n	a16 <CONFIG_ISR_STACK_SIZE+0x216>
		} else if (specifier_cat == SPECIFIER_PTR) {
     abe:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     ac0:	bf04      	itt	eq
     ac2:	f854 3b04 	ldreq.w	r3, [r4], #4
     ac6:	930a      	streq	r3, [sp, #40]	; 0x28
     ac8:	e7a5      	b.n	a16 <CONFIG_ISR_STACK_SIZE+0x216>
		switch (conv->specifier) {
     aca:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     ace:	2878      	cmp	r0, #120	; 0x78
     ad0:	d8b0      	bhi.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
     ad2:	2862      	cmp	r0, #98	; 0x62
     ad4:	d822      	bhi.n	b1c <CONFIG_ISR_STACK_SIZE+0x31c>
     ad6:	2825      	cmp	r0, #37	; 0x25
     ad8:	f43f ad93 	beq.w	602 <cbvprintf+0x22>
     adc:	2858      	cmp	r0, #88	; 0x58
     ade:	d1a9      	bne.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
			bps = encode_uint(value->uint, conv, buf, bpe);
     ae0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     ae4:	9300      	str	r3, [sp, #0]
     ae6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     aea:	ab04      	add	r3, sp, #16
     aec:	aa0c      	add	r2, sp, #48	; 0x30
     aee:	f002 fe87 	bl	3800 <encode_uint>
     af2:	4682      	mov	sl, r0
			if (precision >= 0) {
     af4:	f1b8 0f00 	cmp.w	r8, #0
     af8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     afc:	db0c      	blt.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
				conv->flag_zero = false;
     afe:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     b02:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     b06:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     b0a:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     b0c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     b10:	d902      	bls.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
					conv->pad0_value = precision - (int)len;
     b12:	eba8 0303 	sub.w	r3, r8, r3
     b16:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     b18:	4680      	mov	r8, r0
     b1a:	e03d      	b.n	b98 <CONFIG_ISR_STACK_SIZE+0x398>
     b1c:	3863      	subs	r0, #99	; 0x63
     b1e:	2815      	cmp	r0, #21
     b20:	d888      	bhi.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
     b22:	a101      	add	r1, pc, #4	; (adr r1, b28 <CONFIG_ISR_STACK_SIZE+0x328>)
     b24:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
     b28:	00000ba9 	.word	0x00000ba9
     b2c:	00000c0d 	.word	0x00000c0d
     b30:	00000a35 	.word	0x00000a35
     b34:	00000a35 	.word	0x00000a35
     b38:	00000a35 	.word	0x00000a35
     b3c:	00000a35 	.word	0x00000a35
     b40:	00000c0d 	.word	0x00000c0d
     b44:	00000a35 	.word	0x00000a35
     b48:	00000a35 	.word	0x00000a35
     b4c:	00000a35 	.word	0x00000a35
     b50:	00000a35 	.word	0x00000a35
     b54:	00000c6b 	.word	0x00000c6b
     b58:	00000c39 	.word	0x00000c39
     b5c:	00000c3d 	.word	0x00000c3d
     b60:	00000a35 	.word	0x00000a35
     b64:	00000a35 	.word	0x00000a35
     b68:	00000b81 	.word	0x00000b81
     b6c:	00000a35 	.word	0x00000a35
     b70:	00000c39 	.word	0x00000c39
     b74:	00000a35 	.word	0x00000a35
     b78:	00000a35 	.word	0x00000a35
     b7c:	00000c39 	.word	0x00000c39
			if (precision >= 0) {
     b80:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     b84:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     b88:	db0a      	blt.n	ba0 <CONFIG_ISR_STACK_SIZE+0x3a0>
				len = strnlen(bps, precision);
     b8a:	4641      	mov	r1, r8
     b8c:	4650      	mov	r0, sl
     b8e:	f002 ff55 	bl	3a3c <strnlen>
			bpe = bps + len;
     b92:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     b96:	2600      	movs	r6, #0
		if (bps == NULL) {
     b98:	f1ba 0f00 	cmp.w	sl, #0
     b9c:	d10c      	bne.n	bb8 <CONFIG_ISR_STACK_SIZE+0x3b8>
     b9e:	e749      	b.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
				len = strlen(bps);
     ba0:	4650      	mov	r0, sl
     ba2:	f002 ff44 	bl	3a2e <strlen>
     ba6:	e7f4      	b.n	b92 <CONFIG_ISR_STACK_SIZE+0x392>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ba8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     baa:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     bae:	2600      	movs	r6, #0
			bpe = buf + 1;
     bb0:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
     bb4:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
     bb8:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     bbc:	b106      	cbz	r6, bc0 <CONFIG_ISR_STACK_SIZE+0x3c0>
			nj_len += 1U;
     bbe:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     bc0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     bc4:	06d0      	lsls	r0, r2, #27
     bc6:	d56b      	bpl.n	ca0 <CONFIG_ISR_STACK_SIZE+0x4a0>
			nj_len += 2U;
     bc8:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     bca:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     bcc:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     bce:	bf48      	it	mi
     bd0:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     bd2:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     bd4:	bf48      	it	mi
     bd6:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     bd8:	f1b9 0f00 	cmp.w	r9, #0
     bdc:	dd79      	ble.n	cd2 <CONFIG_ISR_STACK_SIZE+0x4d2>
			if (!conv->flag_dash) {
     bde:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     be2:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     be6:	f3c2 0380 	ubfx	r3, r2, #2, #1
     bea:	9303      	str	r3, [sp, #12]
     bec:	0753      	lsls	r3, r2, #29
     bee:	d470      	bmi.n	cd2 <CONFIG_ISR_STACK_SIZE+0x4d2>
				if (conv->flag_zero) {
     bf0:	0650      	lsls	r0, r2, #25
     bf2:	d564      	bpl.n	cbe <CONFIG_ISR_STACK_SIZE+0x4be>
					if (sign != 0) {
     bf4:	b146      	cbz	r6, c08 <CONFIG_ISR_STACK_SIZE+0x408>
						OUTC(sign);
     bf6:	9b02      	ldr	r3, [sp, #8]
     bf8:	4659      	mov	r1, fp
     bfa:	4630      	mov	r0, r6
     bfc:	4798      	blx	r3
     bfe:	2800      	cmp	r0, #0
     c00:	db5a      	blt.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
						sign = 0;
     c02:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     c04:	3501      	adds	r5, #1
						sign = 0;
     c06:	461e      	mov	r6, r3
					pad = '0';
     c08:	2330      	movs	r3, #48	; 0x30
     c0a:	e059      	b.n	cc0 <CONFIG_ISR_STACK_SIZE+0x4c0>
			if (conv->flag_plus) {
     c0c:	071e      	lsls	r6, r3, #28
     c0e:	d411      	bmi.n	c34 <CONFIG_ISR_STACK_SIZE+0x434>
				sign = ' ';
     c10:	f013 0610 	ands.w	r6, r3, #16
     c14:	bf18      	it	ne
     c16:	2620      	movne	r6, #32
			if (value->sint < 0) {
     c18:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
     c1c:	2a00      	cmp	r2, #0
     c1e:	f173 0100 	sbcs.w	r1, r3, #0
     c22:	f6bf af5d 	bge.w	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
				value->uint = (uint_value_type)-value->sint;
     c26:	4252      	negs	r2, r2
     c28:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     c2c:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     c30:	262d      	movs	r6, #45	; 0x2d
     c32:	e755      	b.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
				sign = '+';
     c34:	262b      	movs	r6, #43	; 0x2b
     c36:	e7ef      	b.n	c18 <CONFIG_ISR_STACK_SIZE+0x418>
		switch (conv->specifier) {
     c38:	2600      	movs	r6, #0
     c3a:	e751      	b.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
			if (value->ptr != NULL) {
     c3c:	980a      	ldr	r0, [sp, #40]	; 0x28
     c3e:	b348      	cbz	r0, c94 <CONFIG_ISR_STACK_SIZE+0x494>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c40:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     c44:	9300      	str	r3, [sp, #0]
     c46:	aa0c      	add	r2, sp, #48	; 0x30
     c48:	ab04      	add	r3, sp, #16
     c4a:	2100      	movs	r1, #0
     c4c:	f002 fdd8 	bl	3800 <encode_uint>
				conv->altform_0c = true;
     c50:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     c54:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     c58:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     c5c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     c60:	4682      	mov	sl, r0
				conv->altform_0c = true;
     c62:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     c66:	2600      	movs	r6, #0
				goto prec_int_pad0;
     c68:	e744      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
				store_count(conv, value->ptr, count);
     c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     c6c:	2a07      	cmp	r2, #7
     c6e:	f63f aee1 	bhi.w	a34 <CONFIG_ISR_STACK_SIZE+0x234>
     c72:	e8df f002 	tbb	[pc, r2]
     c76:	040d      	.short	0x040d
     c78:	08080d06 	.word	0x08080d06
     c7c:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
     c7e:	701d      	strb	r5, [r3, #0]
		break;
     c80:	e6d8      	b.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
		*(short *)dp = (short)count;
     c82:	801d      	strh	r5, [r3, #0]
		break;
     c84:	e6d6      	b.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
		*(intmax_t *)dp = (intmax_t)count;
     c86:	4628      	mov	r0, r5
     c88:	17e9      	asrs	r1, r5, #31
     c8a:	e9c3 0100 	strd	r0, r1, [r3]
		break;
     c8e:	e6d1      	b.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     c90:	601d      	str	r5, [r3, #0]
		break;
     c92:	e6cf      	b.n	a34 <CONFIG_ISR_STACK_SIZE+0x234>
			bpe = bps + 5;
     c94:	f8df 80c4 	ldr.w	r8, [pc, #196]	; d5c <CONFIG_ISR_STACK_SIZE+0x55c>
     c98:	4606      	mov	r6, r0
			bps = "(nil)";
     c9a:	f1a8 0a05 	sub.w	sl, r8, #5
     c9e:	e78b      	b.n	bb8 <CONFIG_ISR_STACK_SIZE+0x3b8>
		} else if (conv->altform_0) {
     ca0:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     ca2:	bf48      	it	mi
     ca4:	3301      	addmi	r3, #1
     ca6:	e790      	b.n	bca <CONFIG_ISR_STACK_SIZE+0x3ca>
					OUTC(pad);
     ca8:	4618      	mov	r0, r3
     caa:	9303      	str	r3, [sp, #12]
     cac:	4659      	mov	r1, fp
     cae:	9b02      	ldr	r3, [sp, #8]
     cb0:	4798      	blx	r3
     cb2:	2800      	cmp	r0, #0
     cb4:	9b03      	ldr	r3, [sp, #12]
     cb6:	da04      	bge.n	cc2 <CONFIG_ISR_STACK_SIZE+0x4c2>
#undef OUTS
#undef OUTC
}
     cb8:	b011      	add	sp, #68	; 0x44
     cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     cbe:	2320      	movs	r3, #32
     cc0:	444d      	add	r5, r9
     cc2:	464a      	mov	r2, r9
				while (width-- > 0) {
     cc4:	2a00      	cmp	r2, #0
     cc6:	eba5 0109 	sub.w	r1, r5, r9
     cca:	f109 39ff 	add.w	r9, r9, #4294967295
     cce:	dceb      	bgt.n	ca8 <CONFIG_ISR_STACK_SIZE+0x4a8>
     cd0:	460d      	mov	r5, r1
		if (sign != 0) {
     cd2:	b136      	cbz	r6, ce2 <CONFIG_ISR_STACK_SIZE+0x4e2>
			OUTC(sign);
     cd4:	9b02      	ldr	r3, [sp, #8]
     cd6:	4659      	mov	r1, fp
     cd8:	4630      	mov	r0, r6
     cda:	4798      	blx	r3
     cdc:	2800      	cmp	r0, #0
     cde:	dbeb      	blt.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
     ce0:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     ce2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     ce6:	06d9      	lsls	r1, r3, #27
     ce8:	d401      	bmi.n	cee <CONFIG_ISR_STACK_SIZE+0x4ee>
     cea:	071a      	lsls	r2, r3, #28
     cec:	d506      	bpl.n	cfc <CONFIG_ISR_STACK_SIZE+0x4fc>
				OUTC('0');
     cee:	9b02      	ldr	r3, [sp, #8]
     cf0:	4659      	mov	r1, fp
     cf2:	2030      	movs	r0, #48	; 0x30
     cf4:	4798      	blx	r3
     cf6:	2800      	cmp	r0, #0
     cf8:	dbde      	blt.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
     cfa:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     cfc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d00:	06db      	lsls	r3, r3, #27
     d02:	d507      	bpl.n	d14 <CONFIG_ISR_STACK_SIZE+0x514>
				OUTC(conv->specifier);
     d04:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     d08:	9b02      	ldr	r3, [sp, #8]
     d0a:	4659      	mov	r1, fp
     d0c:	4798      	blx	r3
     d0e:	2800      	cmp	r0, #0
     d10:	dbd2      	blt.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
     d12:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     d14:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     d16:	442e      	add	r6, r5
     d18:	1b73      	subs	r3, r6, r5
     d1a:	2b00      	cmp	r3, #0
     d1c:	dc16      	bgt.n	d4c <CONFIG_ISR_STACK_SIZE+0x54c>
			OUTS(bps, bpe);
     d1e:	9802      	ldr	r0, [sp, #8]
     d20:	4643      	mov	r3, r8
     d22:	4652      	mov	r2, sl
     d24:	4659      	mov	r1, fp
     d26:	f002 fdb6 	bl	3896 <outs>
     d2a:	2800      	cmp	r0, #0
     d2c:	dbc4      	blt.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
     d2e:	4405      	add	r5, r0
		while (width > 0) {
     d30:	44a9      	add	r9, r5
     d32:	eba9 0305 	sub.w	r3, r9, r5
     d36:	2b00      	cmp	r3, #0
     d38:	f77f ae7c 	ble.w	a34 <CONFIG_ISR_STACK_SIZE+0x234>
			OUTC(' ');
     d3c:	9b02      	ldr	r3, [sp, #8]
     d3e:	4659      	mov	r1, fp
     d40:	2020      	movs	r0, #32
     d42:	4798      	blx	r3
     d44:	2800      	cmp	r0, #0
     d46:	dbb7      	blt.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
     d48:	3501      	adds	r5, #1
			--width;
     d4a:	e7f2      	b.n	d32 <CONFIG_ISR_STACK_SIZE+0x532>
				OUTC('0');
     d4c:	9b02      	ldr	r3, [sp, #8]
     d4e:	4659      	mov	r1, fp
     d50:	2030      	movs	r0, #48	; 0x30
     d52:	4798      	blx	r3
     d54:	2800      	cmp	r0, #0
     d56:	dbaf      	blt.n	cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
     d58:	3501      	adds	r5, #1
     d5a:	e7dd      	b.n	d18 <CONFIG_ISR_STACK_SIZE+0x518>
     d5c:	0000413b 	.word	0x0000413b

00000d60 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
     d60:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     d62:	4807      	ldr	r0, [pc, #28]	; (d80 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
     d64:	4c07      	ldr	r4, [pc, #28]	; (d84 <uart_console_init+0x24>)
     d66:	f001 fca9 	bl	26bc <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     d6a:	4b07      	ldr	r3, [pc, #28]	; (d88 <uart_console_init+0x28>)
     d6c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     d6e:	4620      	mov	r0, r4
     d70:	f000 fe24 	bl	19bc <__stdout_hook_install>
	__printk_hook_install(console_out);
     d74:	4620      	mov	r0, r4
     d76:	f7ff fb39 	bl	3ec <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
     d7a:	2000      	movs	r0, #0
     d7c:	bd10      	pop	{r4, pc}
     d7e:	bf00      	nop
     d80:	0000413c 	.word	0x0000413c
     d84:	00000d8d 	.word	0x00000d8d
     d88:	20000178 	.word	0x20000178

00000d8c <console_out>:
	if ('\n' == c) {
     d8c:	280a      	cmp	r0, #10
{
     d8e:	b538      	push	{r3, r4, r5, lr}
     d90:	4d07      	ldr	r5, [pc, #28]	; (db0 <console_out+0x24>)
     d92:	4604      	mov	r4, r0
	if ('\n' == c) {
     d94:	d104      	bne.n	da0 <console_out+0x14>
     d96:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
     d98:	6883      	ldr	r3, [r0, #8]
     d9a:	210d      	movs	r1, #13
     d9c:	685b      	ldr	r3, [r3, #4]
     d9e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     da0:	6828      	ldr	r0, [r5, #0]
     da2:	6883      	ldr	r3, [r0, #8]
     da4:	b2e1      	uxtb	r1, r4
     da6:	685b      	ldr	r3, [r3, #4]
     da8:	4798      	blx	r3
}
     daa:	4620      	mov	r0, r4
     dac:	bd38      	pop	{r3, r4, r5, pc}
     dae:	bf00      	nop
     db0:	20000178 	.word	0x20000178

00000db4 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
     db4:	4a0e      	ldr	r2, [pc, #56]	; (df0 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     db6:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     db8:	1a84      	subs	r4, r0, r2
     dba:	10a3      	asrs	r3, r4, #2
     dbc:	4c0d      	ldr	r4, [pc, #52]	; (df4 <onoff_stop+0x40>)
     dbe:	435c      	muls	r4, r3
{
     dc0:	4605      	mov	r5, r0
     dc2:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
     dc4:	200c      	movs	r0, #12
     dc6:	fb00 2004 	mla	r0, r0, r4, r2
{
     dca:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
     dcc:	2140      	movs	r1, #64	; 0x40
     dce:	4408      	add	r0, r1
     dd0:	f002 fd81 	bl	38d6 <set_off_state>
	if (err < 0) {
     dd4:	1e01      	subs	r1, r0, #0
     dd6:	db05      	blt.n	de4 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
     dd8:	4b07      	ldr	r3, [pc, #28]	; (df8 <onoff_stop+0x44>)
     dda:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
     dde:	6863      	ldr	r3, [r4, #4]
     de0:	4798      	blx	r3
	return 0;
     de2:	2100      	movs	r1, #0
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
     de4:	4628      	mov	r0, r5
     de6:	4633      	mov	r3, r6
}
     de8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
     dec:	4718      	bx	r3
     dee:	bf00      	nop
     df0:	2000018c 	.word	0x2000018c
     df4:	b6db6db7 	.word	0xb6db6db7
     df8:	0000407c 	.word	0x0000407c

00000dfc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     e00:	4e10      	ldr	r6, [pc, #64]	; (e44 <onoff_start+0x48>)
     e02:	1b84      	subs	r4, r0, r6
     e04:	10a3      	asrs	r3, r4, #2
     e06:	4c10      	ldr	r4, [pc, #64]	; (e48 <onoff_start+0x4c>)
     e08:	435c      	muls	r4, r3
     e0a:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
     e0c:	250c      	movs	r5, #12
     e0e:	4365      	muls	r5, r4
{
     e10:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
     e12:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
     e16:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
     e18:	4430      	add	r0, r6
     e1a:	2140      	movs	r1, #64	; 0x40
     e1c:	f002 fd74 	bl	3908 <set_starting_state>
	if (err < 0) {
     e20:	1e01      	subs	r1, r0, #0
     e22:	db09      	blt.n	e38 <onoff_start+0x3c>
	subdata->cb = cb;
     e24:	4a09      	ldr	r2, [pc, #36]	; (e4c <onoff_start+0x50>)
     e26:	1973      	adds	r3, r6, r5
	subdata->user_data = user_data;
     e28:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
     e2c:	4b08      	ldr	r3, [pc, #32]	; (e50 <onoff_start+0x54>)
     e2e:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
     e32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
     e36:	4718      	bx	r3
		notify(mgr, err);
     e38:	4640      	mov	r0, r8
     e3a:	463b      	mov	r3, r7
}
     e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
     e40:	4718      	bx	r3
     e42:	bf00      	nop
     e44:	2000018c 	.word	0x2000018c
     e48:	b6db6db7 	.word	0xb6db6db7
     e4c:	0000396b 	.word	0x0000396b
     e50:	0000407c 	.word	0x0000407c

00000e54 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     e54:	2200      	movs	r2, #0
{
     e56:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     e58:	2101      	movs	r1, #1
{
     e5a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
     e5c:	4610      	mov	r0, r2
     e5e:	f000 fae3 	bl	1428 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
     e62:	2000      	movs	r0, #0
     e64:	f000 fac2 	bl	13ec <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
     e68:	480f      	ldr	r0, [pc, #60]	; (ea8 <clk_init+0x54>)
     e6a:	f001 fa85 	bl	2378 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
     e6e:	4b0f      	ldr	r3, [pc, #60]	; (eac <clk_init+0x58>)
     e70:	4298      	cmp	r0, r3
     e72:	d115      	bne.n	ea0 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
     e74:	f002 ff02 	bl	3c7c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
     e78:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
     e7a:	490d      	ldr	r1, [pc, #52]	; (eb0 <clk_init+0x5c>)
     e7c:	4630      	mov	r0, r6
     e7e:	f002 fb7d 	bl	357c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
     e82:	2800      	cmp	r0, #0
     e84:	db0b      	blt.n	e9e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     e86:	2501      	movs	r5, #1
     e88:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
     e8a:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
     e8c:	4908      	ldr	r1, [pc, #32]	; (eb0 <clk_init+0x5c>)
     e8e:	f104 001c 	add.w	r0, r4, #28
     e92:	f002 fb73 	bl	357c <onoff_manager_init>
		if (err < 0) {
     e96:	2800      	cmp	r0, #0
     e98:	db01      	blt.n	e9e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
     e9a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
     e9c:	2000      	movs	r0, #0
}
     e9e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
     ea0:	f06f 0004 	mvn.w	r0, #4
     ea4:	e7fb      	b.n	e9e <clk_init+0x4a>
     ea6:	bf00      	nop
     ea8:	00000ee9 	.word	0x00000ee9
     eac:	0bad0000 	.word	0x0bad0000
     eb0:	0000408c 	.word	0x0000408c

00000eb4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
     eb4:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
     eb6:	230c      	movs	r3, #12
     eb8:	4809      	ldr	r0, [pc, #36]	; (ee0 <clkstarted_handle.constprop.0+0x2c>)
     eba:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
     ebc:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
     ebe:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
     ec0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
     ec4:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
     ec6:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
     ec8:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
     eca:	4418      	add	r0, r3
     ecc:	f002 fd3a 	bl	3944 <set_on_state>
	if (callback) {
     ed0:	b12d      	cbz	r5, ede <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
     ed2:	4632      	mov	r2, r6
     ed4:	462b      	mov	r3, r5
     ed6:	4803      	ldr	r0, [pc, #12]	; (ee4 <clkstarted_handle.constprop.0+0x30>)
}
     ed8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
     edc:	4718      	bx	r3
}
     ede:	bd70      	pop	{r4, r5, r6, pc}
     ee0:	2000018c 	.word	0x2000018c
     ee4:	20000028 	.word	0x20000028

00000ee8 <clock_event_handler>:
	switch (event) {
     ee8:	b110      	cbz	r0, ef0 <clock_event_handler+0x8>
     eea:	2801      	cmp	r0, #1
     eec:	d004      	beq.n	ef8 <clock_event_handler+0x10>
     eee:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
     ef0:	4b03      	ldr	r3, [pc, #12]	; (f00 <clock_event_handler+0x18>)
     ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     ef4:	075b      	lsls	r3, r3, #29
     ef6:	d101      	bne.n	efc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
     ef8:	f7ff bfdc 	b.w	eb4 <clkstarted_handle.constprop.0>
}
     efc:	4770      	bx	lr
     efe:	bf00      	nop
     f00:	2000018c 	.word	0x2000018c

00000f04 <generic_hfclk_start>:
{
     f04:	b508      	push	{r3, lr}
     f06:	f04f 0320 	mov.w	r3, #32
     f0a:	f3ef 8111 	mrs	r1, BASEPRI
     f0e:	f383 8811 	msr	BASEPRI, r3
     f12:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
     f16:	4a12      	ldr	r2, [pc, #72]	; (f60 <generic_hfclk_start+0x5c>)
     f18:	6813      	ldr	r3, [r2, #0]
     f1a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
     f1e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
     f22:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
     f24:	d00c      	beq.n	f40 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
     f26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f2a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
     f2e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
     f32:	f013 0301 	ands.w	r3, r3, #1
     f36:	d003      	beq.n	f40 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
     f38:	480a      	ldr	r0, [pc, #40]	; (f64 <generic_hfclk_start+0x60>)
     f3a:	f002 fd03 	bl	3944 <set_on_state>
			already_started = true;
     f3e:	2301      	movs	r3, #1
	__asm__ volatile(
     f40:	f381 8811 	msr	BASEPRI, r1
     f44:	f3bf 8f6f 	isb	sy
	if (already_started) {
     f48:	b123      	cbz	r3, f54 <generic_hfclk_start+0x50>
}
     f4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
     f4e:	2000      	movs	r0, #0
     f50:	f7ff bfb0 	b.w	eb4 <clkstarted_handle.constprop.0>
}
     f54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
     f58:	2001      	movs	r0, #1
     f5a:	f001 ba1d 	b.w	2398 <nrfx_clock_start>
     f5e:	bf00      	nop
     f60:	200001dc 	.word	0x200001dc
     f64:	200001cc 	.word	0x200001cc

00000f68 <lfclk_start>:
{
     f68:	b510      	push	{r4, lr}
	if (!once) {
     f6a:	4c07      	ldr	r4, [pc, #28]	; (f88 <lfclk_start+0x20>)
     f6c:	7823      	ldrb	r3, [r4, #0]
     f6e:	b92b      	cbnz	r3, f7c <lfclk_start+0x14>
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
     f70:	f44f 70a5 	mov.w	r0, #330	; 0x14a
     f74:	f002 ff5b 	bl	3e2e <z_impl_k_busy_wait>
		once = true;
     f78:	2301      	movs	r3, #1
     f7a:	7023      	strb	r3, [r4, #0]
}
     f7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
     f80:	2000      	movs	r0, #0
     f82:	f001 ba09 	b.w	2398 <nrfx_clock_start>
     f86:	bf00      	nop
     f88:	20000364 	.word	0x20000364

00000f8c <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     f8c:	4b09      	ldr	r3, [pc, #36]	; (fb4 <generic_hfclk_stop+0x28>)
     f8e:	f3bf 8f5b 	dmb	ish
     f92:	e853 2f00 	ldrex	r2, [r3]
     f96:	f022 0102 	bic.w	r1, r2, #2
     f9a:	e843 1000 	strex	r0, r1, [r3]
     f9e:	2800      	cmp	r0, #0
     fa0:	d1f7      	bne.n	f92 <generic_hfclk_stop+0x6>
     fa2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
     fa6:	07d3      	lsls	r3, r2, #31
     fa8:	d402      	bmi.n	fb0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
     faa:	2001      	movs	r0, #1
     fac:	f001 ba40 	b.w	2430 <nrfx_clock_stop>
}
     fb0:	4770      	bx	lr
     fb2:	bf00      	nop
     fb4:	200001dc 	.word	0x200001dc

00000fb8 <api_blocking_start>:
{
     fb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     fba:	2200      	movs	r2, #0
     fbc:	2301      	movs	r3, #1
     fbe:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
     fc2:	4a09      	ldr	r2, [pc, #36]	; (fe8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     fc4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
     fc8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
     fca:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
     fce:	f002 fcef 	bl	39b0 <api_start>
	if (err < 0) {
     fd2:	2800      	cmp	r0, #0
     fd4:	db05      	blt.n	fe2 <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     fd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
     fda:	2300      	movs	r3, #0
     fdc:	4668      	mov	r0, sp
     fde:	f001 ffe5 	bl	2fac <z_impl_k_sem_take>
}
     fe2:	b005      	add	sp, #20
     fe4:	f85d fb04 	ldr.w	pc, [sp], #4
     fe8:	00003983 	.word	0x00003983

00000fec <z_nrf_clock_control_lf_on>:
{
     fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     ff0:	493a      	ldr	r1, [pc, #232]	; (10dc <CONFIG_FPROTECT_BLOCK_SIZE+0xdc>)
     ff2:	f3bf 8f5b 	dmb	ish
     ff6:	4606      	mov	r6, r0
     ff8:	2201      	movs	r2, #1
     ffa:	e851 3f00 	ldrex	r3, [r1]
     ffe:	e841 2000 	strex	r0, r2, [r1]
    1002:	2800      	cmp	r0, #0
    1004:	d1f9      	bne.n	ffa <z_nrf_clock_control_lf_on+0xe>
    1006:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    100a:	b933      	cbnz	r3, 101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    100c:	4934      	ldr	r1, [pc, #208]	; (10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>)
		err = onoff_request(mgr, &cli);
    100e:	4835      	ldr	r0, [pc, #212]	; (10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>)
    1010:	604b      	str	r3, [r1, #4]
    1012:	60cb      	str	r3, [r1, #12]
    1014:	608a      	str	r2, [r1, #8]
    1016:	f002 fac4 	bl	35a2 <onoff_request>
	switch (start_mode) {
    101a:	1e73      	subs	r3, r6, #1
    101c:	2b01      	cmp	r3, #1
    101e:	d832      	bhi.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1020:	2e01      	cmp	r6, #1
    1022:	d107      	bne.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1024:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1028:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    102c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1030:	2b01      	cmp	r3, #1
    1032:	d028      	beq.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1034:	f002 fef5 	bl	3e22 <k_is_in_isr>
    1038:	4604      	mov	r4, r0
    103a:	b918      	cbnz	r0, 1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    103c:	4b2a      	ldr	r3, [pc, #168]	; (10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>)
	int key = isr_mode ? irq_lock() : 0;
    103e:	781b      	ldrb	r3, [r3, #0]
    1040:	2b00      	cmp	r3, #0
    1042:	d144      	bne.n	10ce <CONFIG_FPROTECT_BLOCK_SIZE+0xce>
	__asm__ volatile(
    1044:	f04f 0320 	mov.w	r3, #32
    1048:	f3ef 8511 	mrs	r5, BASEPRI
    104c:	f383 8811 	msr	BASEPRI, r3
    1050:	f3bf 8f6f 	isb	sy
    1054:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1056:	4f25      	ldr	r7, [pc, #148]	; (10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1058:	f8df 8094 	ldr.w	r8, [pc, #148]	; 10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    105c:	f8df 9094 	ldr.w	r9, [pc, #148]	; 10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1060:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1064:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1068:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    106c:	03d2      	lsls	r2, r2, #15
    106e:	d50c      	bpl.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1070:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1074:	2b01      	cmp	r3, #1
    1076:	d001      	beq.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1078:	2e01      	cmp	r6, #1
    107a:	d106      	bne.n	108a <CONFIG_FPROTECT_BLOCK_SIZE+0x8a>
	if (isr_mode) {
    107c:	b30c      	cbz	r4, 10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
	__asm__ volatile(
    107e:	f385 8811 	msr	BASEPRI, r5
    1082:	f3bf 8f6f 	isb	sy
}
    1086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    108a:	b1ac      	cbz	r4, 10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    108c:	4628      	mov	r0, r5
    108e:	f000 fa47 	bl	1520 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1092:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    1096:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    109a:	2b00      	cmp	r3, #0
    109c:	d1e0      	bne.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    109e:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    10a0:	2900      	cmp	r1, #0
    10a2:	d0dd      	beq.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    10a4:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    10a6:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    10a8:	2301      	movs	r3, #1
    10aa:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    10ae:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    10b2:	f8c9 3000 	str.w	r3, [r9]
}
    10b6:	e7d3      	b.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
	return z_impl_k_sleep(timeout);
    10b8:	2100      	movs	r1, #0
    10ba:	2021      	movs	r0, #33	; 0x21
    10bc:	f001 ff2e 	bl	2f1c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    10c0:	e7e7      	b.n	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
    p_reg->INTENSET = mask;
    10c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    10c6:	2202      	movs	r2, #2
    10c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    10cc:	e7db      	b.n	1086 <CONFIG_FPROTECT_BLOCK_SIZE+0x86>
    p_reg->INTENCLR = mask;
    10ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    10d2:	2202      	movs	r2, #2
    10d4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    10d8:	4605      	mov	r5, r0
}
    10da:	e7bc      	b.n	1056 <CONFIG_FPROTECT_BLOCK_SIZE+0x56>
    10dc:	200001e0 	.word	0x200001e0
    10e0:	2000017c 	.word	0x2000017c
    10e4:	200001a8 	.word	0x200001a8
    10e8:	20000777 	.word	0x20000777
    10ec:	40000104 	.word	0x40000104
    10f0:	e000e100 	.word	0xe000e100
    10f4:	40000008 	.word	0x40000008

000010f8 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    10f8:	4a04      	ldr	r2, [pc, #16]	; (110c <sys_clock_timeout_handler+0x14>)
    10fa:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    10fc:	1ac8      	subs	r0, r1, r3
    10fe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    1102:	4403      	add	r3, r0
    1104:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    1106:	f002 b925 	b.w	3354 <z_clock_announce>
    110a:	bf00      	nop
    110c:	200001f0 	.word	0x200001f0

00001110 <set_absolute_alarm>:
{
    1110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1114:	0086      	lsls	r6, r0, #2
    1116:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    111a:	f100 0450 	add.w	r4, r0, #80	; 0x50
    111e:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    1122:	00a4      	lsls	r4, r4, #2
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1124:	f8df 807c 	ldr.w	r8, [pc, #124]	; 11a4 <set_absolute_alarm+0x94>
    return p_reg->CC[ch];
    1128:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    112c:	b2a4      	uxth	r4, r4
    112e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    1132:	f44f 3780 	mov.w	r7, #65536	; 0x10000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    1136:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    113a:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    113e:	4087      	lsls	r7, r0
    1140:	46c1      	mov	r9, r8
     return p_reg->COUNTER;
    1142:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1146:	eba3 030a 	sub.w	r3, r3, sl
    114a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    114e:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    1152:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    1154:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    1158:	d102      	bne.n	1160 <set_absolute_alarm+0x50>
	z_impl_k_busy_wait(usec_to_wait);
    115a:	2013      	movs	r0, #19
    115c:	f002 fe67 	bl	3e2e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    1160:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    1164:	1aab      	subs	r3, r5, r2
    1166:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    116a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    116e:	bf88      	it	hi
    1170:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1172:	2300      	movs	r3, #0
    1174:	6023      	str	r3, [r4, #0]
    1176:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    1178:	f8c9 7344 	str.w	r7, [r9, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    117c:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    1180:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1184:	f8d9 3504 	ldr.w	r3, [r9, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    1188:	459a      	cmp	sl, r3
    118a:	d006      	beq.n	119a <set_absolute_alarm+0x8a>
	return (a - b) & COUNTER_MAX;
    118c:	1aeb      	subs	r3, r5, r3
    118e:	3b02      	subs	r3, #2
    1190:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1194:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1198:	d801      	bhi.n	119e <set_absolute_alarm+0x8e>
}
    119a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    119e:	462b      	mov	r3, r5
    11a0:	e7cf      	b.n	1142 <set_absolute_alarm+0x32>
    11a2:	bf00      	nop
    11a4:	40011000 	.word	0x40011000

000011a8 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    11a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    return p_reg->INTENSET & mask;
    11aa:	4e10      	ldr	r6, [pc, #64]	; (11ec <rtc_nrf_isr+0x44>)
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    11ac:	4f10      	ldr	r7, [pc, #64]	; (11f0 <rtc_nrf_isr+0x48>)
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    11ae:	2500      	movs	r5, #0
    11b0:	4b10      	ldr	r3, [pc, #64]	; (11f4 <rtc_nrf_isr+0x4c>)
    11b2:	2000      	movs	r0, #0
    11b4:	681c      	ldr	r4, [r3, #0]
    11b6:	461a      	mov	r2, r3
    11b8:	b105      	cbz	r5, 11bc <rtc_nrf_isr+0x14>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    11ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    11bc:	f8d6 1304 	ldr.w	r1, [r6, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    11c0:	03c9      	lsls	r1, r1, #15
    11c2:	d5fa      	bpl.n	11ba <rtc_nrf_isr+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    11c4:	6839      	ldr	r1, [r7, #0]
    11c6:	2900      	cmp	r1, #0
    11c8:	d0f7      	beq.n	11ba <rtc_nrf_isr+0x12>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    11ca:	603d      	str	r5, [r7, #0]
    11cc:	6839      	ldr	r1, [r7, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    11ce:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    11d2:	f8c6 1348 	str.w	r1, [r6, #840]	; 0x348
    return p_reg->CC[ch];
    11d6:	f8d6 1540 	ldr.w	r1, [r6, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    11da:	2501      	movs	r5, #1
			if (handler) {
    11dc:	b11c      	cbz	r4, 11e6 <rtc_nrf_isr+0x3e>
				handler(chan, cc_val,
    11de:	685a      	ldr	r2, [r3, #4]
    11e0:	6018      	str	r0, [r3, #0]
    11e2:	47a0      	blx	r4
    11e4:	e7e4      	b.n	11b0 <rtc_nrf_isr+0x8>
    11e6:	6014      	str	r4, [r2, #0]
}
    11e8:	e7e7      	b.n	11ba <rtc_nrf_isr+0x12>
    11ea:	bf00      	nop
    11ec:	40011000 	.word	0x40011000
    11f0:	40011140 	.word	0x40011140
    11f4:	200001e4 	.word	0x200001e4

000011f8 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    11f8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    11fa:	4d10      	ldr	r5, [pc, #64]	; (123c <z_clock_driver_init+0x44>)
    11fc:	2400      	movs	r4, #0
    p_reg->INTENSET = mask;
    11fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    1202:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    p_reg->INTENSET = mask;
    1206:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    120a:	4b0d      	ldr	r3, [pc, #52]	; (1240 <z_clock_driver_init+0x48>)
    120c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1210:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    1214:	2101      	movs	r1, #1
    1216:	4622      	mov	r2, r4
    1218:	2011      	movs	r0, #17
    121a:	f000 f905 	bl	1428 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    121e:	2011      	movs	r0, #17
    1220:	f000 f8e4 	bl	13ec <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    1224:	4a07      	ldr	r2, [pc, #28]	; (1244 <z_clock_driver_init+0x4c>)
    1226:	2301      	movs	r3, #1
    1228:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    122a:	4a07      	ldr	r2, [pc, #28]	; (1248 <z_clock_driver_init+0x50>)
    122c:	602b      	str	r3, [r5, #0]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    122e:	2002      	movs	r0, #2
	int_mask = BIT_MASK(CHAN_COUNT);
    1230:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    1232:	f7ff fedb 	bl	fec <z_nrf_clock_control_lf_on>

	return 0;
}
    1236:	4620      	mov	r0, r4
    1238:	bd38      	pop	{r3, r4, r5, pc}
    123a:	bf00      	nop
    123c:	40011000 	.word	0x40011000
    1240:	e000e100 	.word	0xe000e100
    1244:	40011008 	.word	0x40011008
    1248:	200001ec 	.word	0x200001ec

0000124c <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    124c:	4b13      	ldr	r3, [pc, #76]	; (129c <z_clock_set_timeout+0x50>)
    124e:	f1b0 3fff 	cmp.w	r0, #4294967295
    1252:	bf08      	it	eq
    1254:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1256:	3801      	subs	r0, #1
    1258:	2800      	cmp	r0, #0
    125a:	dd1c      	ble.n	1296 <z_clock_set_timeout+0x4a>
    125c:	4298      	cmp	r0, r3
    125e:	bfa8      	it	ge
    1260:	4618      	movge	r0, r3
     return p_reg->COUNTER;
    1262:	4b0f      	ldr	r3, [pc, #60]	; (12a0 <z_clock_set_timeout+0x54>)
    1264:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    1268:	4b0e      	ldr	r3, [pc, #56]	; (12a4 <z_clock_set_timeout+0x58>)
    126a:	6819      	ldr	r1, [r3, #0]
	return (a - b) & COUNTER_MAX;
    126c:	1a52      	subs	r2, r2, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    126e:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    1272:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
		ticks = 0;
    1276:	bf18      	it	ne
    1278:	2000      	movne	r0, #0
	cc_data[chan].callback = handler;
    127a:	4a0b      	ldr	r2, [pc, #44]	; (12a8 <z_clock_set_timeout+0x5c>)
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    127c:	3301      	adds	r3, #1
    127e:	4403      	add	r3, r0
	cc_data[chan].callback = handler;
    1280:	480a      	ldr	r0, [pc, #40]	; (12ac <z_clock_set_timeout+0x60>)
    1282:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    1284:	2000      	movs	r0, #0
    1286:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    1288:	4a04      	ldr	r2, [pc, #16]	; (129c <z_clock_set_timeout+0x50>)
    128a:	4293      	cmp	r3, r2
    128c:	bf94      	ite	ls
    128e:	18c9      	addls	r1, r1, r3
    1290:	1889      	addhi	r1, r1, r2
    1292:	f7ff bf3d 	b.w	1110 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    1296:	2000      	movs	r0, #0
    1298:	e7e3      	b.n	1262 <z_clock_set_timeout+0x16>
    129a:	bf00      	nop
    129c:	007fffff 	.word	0x007fffff
    12a0:	40011000 	.word	0x40011000
    12a4:	200001f0 	.word	0x200001f0
    12a8:	200001e4 	.word	0x200001e4
    12ac:	000010f9 	.word	0x000010f9

000012b0 <z_clock_elapsed>:
	__asm__ volatile(
    12b0:	f04f 0220 	mov.w	r2, #32
    12b4:	f3ef 8311 	mrs	r3, BASEPRI
    12b8:	f382 8811 	msr	BASEPRI, r2
    12bc:	f3bf 8f6f 	isb	sy
    12c0:	4a06      	ldr	r2, [pc, #24]	; (12dc <z_clock_elapsed+0x2c>)
    12c2:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    12c6:	4a06      	ldr	r2, [pc, #24]	; (12e0 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    12c8:	6812      	ldr	r2, [r2, #0]
    12ca:	1a80      	subs	r0, r0, r2
    12cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    12d0:	f383 8811 	msr	BASEPRI, r3
    12d4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    12d8:	4770      	bx	lr
    12da:	bf00      	nop
    12dc:	40011000 	.word	0x40011000
    12e0:	200001f0 	.word	0x200001f0

000012e4 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    12e4:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    12e6:	4c11      	ldr	r4, [pc, #68]	; (132c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    12e8:	4a11      	ldr	r2, [pc, #68]	; (1330 <_DoInit+0x4c>)
    12ea:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    12ec:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    12ee:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    12f2:	4b10      	ldr	r3, [pc, #64]	; (1334 <_DoInit+0x50>)
    12f4:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    12f6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    12f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    12fc:	4a0e      	ldr	r2, [pc, #56]	; (1338 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    12fe:	490f      	ldr	r1, [pc, #60]	; (133c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    1300:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    1302:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    1304:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1306:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    1308:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    130a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    130c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    130e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    1310:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    1312:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    1314:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    1316:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    1318:	f002 fb7f 	bl	3a1a <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    131c:	4908      	ldr	r1, [pc, #32]	; (1340 <_DoInit+0x5c>)
    131e:	4620      	mov	r0, r4
    1320:	f002 fb7b 	bl	3a1a <strcpy>
  p->acID[6] = ' ';
    1324:	2320      	movs	r3, #32
    1326:	71a3      	strb	r3, [r4, #6]
}
    1328:	bd10      	pop	{r4, pc}
    132a:	bf00      	nop
    132c:	200001f4 	.word	0x200001f4
    1330:	00004153 	.word	0x00004153
    1334:	20000375 	.word	0x20000375
    1338:	20000365 	.word	0x20000365
    133c:	0000415c 	.word	0x0000415c
    1340:	00004160 	.word	0x00004160

00001344 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1344:	4a09      	ldr	r2, [pc, #36]	; (136c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1346:	490a      	ldr	r1, [pc, #40]	; (1370 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1348:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    134a:	6809      	ldr	r1, [r1, #0]
    134c:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    134e:	4909      	ldr	r1, [pc, #36]	; (1374 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1350:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1352:	684b      	ldr	r3, [r1, #4]
    1354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1358:	604b      	str	r3, [r1, #4]
    135a:	2300      	movs	r3, #0
    135c:	f383 8811 	msr	BASEPRI, r3
    1360:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1364:	6893      	ldr	r3, [r2, #8]
}
    1366:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    1368:	4770      	bx	lr
    136a:	bf00      	nop
    136c:	20000320 	.word	0x20000320
    1370:	00004124 	.word	0x00004124
    1374:	e000ed00 	.word	0xe000ed00

00001378 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1378:	4912      	ldr	r1, [pc, #72]	; (13c4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    137a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    137c:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    1380:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1382:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1386:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    138a:	2020      	movs	r0, #32
    msr BASEPRI, r0
    138c:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1390:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1394:	4f0c      	ldr	r7, [pc, #48]	; (13c8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1396:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    139a:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    139c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    139e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    13a0:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    13a2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    13a4:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    13a6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    13aa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    13ac:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    13ae:	f000 fa55 	bl	185c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    13b2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    13b6:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    13ba:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    13be:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    13c2:	4770      	bx	lr
    ldr r1, =_kernel
    13c4:	20000320 	.word	0x20000320
    ldr v4, =_SCS_ICSR
    13c8:	e000ed04 	.word	0xe000ed04

000013cc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    13cc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    13d0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    13d2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    13d6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    13da:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    13dc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    13e0:	2902      	cmp	r1, #2
    beq _oops
    13e2:	d0ff      	beq.n	13e4 <_oops>

000013e4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    13e4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    13e6:	f002 fb0d 	bl	3a04 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    13ea:	bd01      	pop	{r0, pc}

000013ec <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    13ec:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    13ee:	2b00      	cmp	r3, #0
    13f0:	db08      	blt.n	1404 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    13f2:	2201      	movs	r2, #1
    13f4:	f000 001f 	and.w	r0, r0, #31
    13f8:	fa02 f000 	lsl.w	r0, r2, r0
    13fc:	095b      	lsrs	r3, r3, #5
    13fe:	4a02      	ldr	r2, [pc, #8]	; (1408 <arch_irq_enable+0x1c>)
    1400:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1404:	4770      	bx	lr
    1406:	bf00      	nop
    1408:	e000e100 	.word	0xe000e100

0000140c <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    140c:	4b05      	ldr	r3, [pc, #20]	; (1424 <arch_irq_is_enabled+0x18>)
    140e:	0942      	lsrs	r2, r0, #5
    1410:	f000 001f 	and.w	r0, r0, #31
    1414:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1418:	2301      	movs	r3, #1
    141a:	fa03 f000 	lsl.w	r0, r3, r0
}
    141e:	4010      	ands	r0, r2
    1420:	4770      	bx	lr
    1422:	bf00      	nop
    1424:	e000e100 	.word	0xe000e100

00001428 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1428:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    142a:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    142c:	bfa8      	it	ge
    142e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    1432:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1436:	bfb8      	it	lt
    1438:	4b06      	ldrlt	r3, [pc, #24]	; (1454 <z_arm_irq_priority_set+0x2c>)
    143a:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    143e:	bfac      	ite	ge
    1440:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1444:	f000 000f 	andlt.w	r0, r0, #15
    1448:	b2c9      	uxtb	r1, r1
    144a:	bfb4      	ite	lt
    144c:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    144e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    1452:	4770      	bx	lr
    1454:	e000ed14 	.word	0xe000ed14

00001458 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    1458:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    145c:	9b00      	ldr	r3, [sp, #0]
    145e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    1462:	490a      	ldr	r1, [pc, #40]	; (148c <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    1464:	9b01      	ldr	r3, [sp, #4]
    1466:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    146a:	9b02      	ldr	r3, [sp, #8]
    146c:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    1470:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    1474:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    1478:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    147c:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1480:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1482:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1484:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    1486:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    1488:	4770      	bx	lr
    148a:	bf00      	nop
    148c:	00003635 	.word	0x00003635

00001490 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1490:	4a0b      	ldr	r2, [pc, #44]	; (14c0 <z_check_thread_stack_fail+0x30>)
{
    1492:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1494:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    1496:	b190      	cbz	r0, 14be <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    1498:	f113 0f16 	cmn.w	r3, #22
    149c:	6e80      	ldr	r0, [r0, #104]	; 0x68
    149e:	d005      	beq.n	14ac <z_check_thread_stack_fail+0x1c>
    14a0:	f1a0 0220 	sub.w	r2, r0, #32
    14a4:	429a      	cmp	r2, r3
    14a6:	d806      	bhi.n	14b6 <z_check_thread_stack_fail+0x26>
    14a8:	4283      	cmp	r3, r0
    14aa:	d204      	bcs.n	14b6 <z_check_thread_stack_fail+0x26>
    14ac:	4281      	cmp	r1, r0
    14ae:	bf2c      	ite	cs
    14b0:	2100      	movcs	r1, #0
    14b2:	2101      	movcc	r1, #1
    14b4:	e000      	b.n	14b8 <z_check_thread_stack_fail+0x28>
    14b6:	2100      	movs	r1, #0
    14b8:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    14ba:	bf08      	it	eq
    14bc:	2000      	moveq	r0, #0
}
    14be:	4770      	bx	lr
    14c0:	20000320 	.word	0x20000320

000014c4 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    14c4:	b508      	push	{r3, lr}
    14c6:	4604      	mov	r4, r0
    14c8:	460e      	mov	r6, r1
    14ca:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    14cc:	f000 f9ba 	bl	1844 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    14d0:	4b08      	ldr	r3, [pc, #32]	; (14f4 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    14d2:	4620      	mov	r0, r4
	_current = main_thread;
    14d4:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    14d6:	f000 f9c1 	bl	185c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    14da:	4628      	mov	r0, r5
    14dc:	f386 8809 	msr	PSP, r6
    14e0:	2100      	movs	r1, #0
    14e2:	b663      	cpsie	if
    14e4:	f381 8811 	msr	BASEPRI, r1
    14e8:	f3bf 8f6f 	isb	sy
    14ec:	2200      	movs	r2, #0
    14ee:	2300      	movs	r3, #0
    14f0:	f002 f8a0 	bl	3634 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    14f4:	20000320 	.word	0x20000320

000014f8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    14f8:	4901      	ldr	r1, [pc, #4]	; (1500 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    14fa:	2210      	movs	r2, #16
	str	r2, [r1]
    14fc:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    14fe:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1500:	e000ed10 	.word	0xe000ed10

00001504 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1504:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1506:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1508:	f380 8811 	msr	BASEPRI, r0
	isb
    150c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1510:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1514:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1516:	b662      	cpsie	i
	isb
    1518:	f3bf 8f6f 	isb	sy

	bx	lr
    151c:	4770      	bx	lr
    151e:	bf00      	nop

00001520 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1520:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1522:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1524:	f381 8811 	msr	BASEPRI, r1

	wfe
    1528:	bf20      	wfe

	msr	BASEPRI, r0
    152a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    152e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1530:	4770      	bx	lr
    1532:	bf00      	nop

00001534 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1534:	bf30      	wfi
    b z_SysNmiOnReset
    1536:	f7ff bffd 	b.w	1534 <z_SysNmiOnReset>
    153a:	bf00      	nop

0000153c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    153c:	4a0e      	ldr	r2, [pc, #56]	; (1578 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    153e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1540:	4b0e      	ldr	r3, [pc, #56]	; (157c <z_arm_prep_c+0x40>)
    1542:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1546:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    1548:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    154c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1550:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1554:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1558:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    155c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1560:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1564:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1568:	f001 f900 	bl	276c <z_bss_zero>
	z_data_copy();
    156c:	f001 fdf8 	bl	3160 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1570:	f000 f93a 	bl	17e8 <z_arm_interrupt_init>
	z_cstart();
    1574:	f001 f91e 	bl	27b4 <z_cstart>
    1578:	00000000 	.word	0x00000000
    157c:	e000ed00 	.word	0xe000ed00

00001580 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    1580:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    1582:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1584:	4a0b      	ldr	r2, [pc, #44]	; (15b4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1586:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    1588:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    158a:	bf1e      	ittt	ne
	movne	r1, #0
    158c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    158e:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    1590:	f002 fb99 	blne	3cc6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1594:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1596:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    159a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    159e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    15a2:	4905      	ldr	r1, [pc, #20]	; (15b8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    15a4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    15a6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    15a8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    15aa:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    15ae:	4903      	ldr	r1, [pc, #12]	; (15bc <_isr_wrapper+0x3c>)
	bx r1
    15b0:	4708      	bx	r1
    15b2:	0000      	.short	0x0000
	ldr r2, =_kernel
    15b4:	20000320 	.word	0x20000320
	ldr r1, =_sw_isr_table
    15b8:	00003f20 	.word	0x00003f20
	ldr r1, =z_arm_int_exit
    15bc:	000017cd 	.word	0x000017cd

000015c0 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    15c0:	f002 faa2 	bl	3b08 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    15c4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    15c6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    15ca:	4808      	ldr	r0, [pc, #32]	; (15ec <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    15cc:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    15d0:	1840      	adds	r0, r0, r1
    msr PSP, r0
    15d2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    15d6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    15da:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    15dc:	4308      	orrs	r0, r1
    msr CONTROL, r0
    15de:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    15e2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    15e6:	f7ff ffa9 	bl	153c <z_arm_prep_c>
    15ea:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    15ec:	20000d00 	.word	0x20000d00

000015f0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    15f0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    15f4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    15f8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    15fa:	4672      	mov	r2, lr
	bl z_arm_fault
    15fc:	f000 f868 	bl	16d0 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1600:	bd01      	pop	{r0, pc}
    1602:	bf00      	nop

00001604 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    1604:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    1606:	4b19      	ldr	r3, [pc, #100]	; (166c <mem_manage_fault+0x68>)
{
    1608:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    160a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    160c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    160e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    1610:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    1612:	0790      	lsls	r0, r2, #30
    1614:	d519      	bpl.n	164a <mem_manage_fault+0x46>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    1616:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    1618:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    161a:	0612      	lsls	r2, r2, #24
    161c:	d515      	bpl.n	164a <mem_manage_fault+0x46>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    161e:	b119      	cbz	r1, 1628 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    1620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1622:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    1626:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    1628:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    162a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    162c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    162e:	06d1      	lsls	r1, r2, #27
    1630:	d40e      	bmi.n	1650 <mem_manage_fault+0x4c>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    1632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    1634:	079a      	lsls	r2, r3, #30
    1636:	d40b      	bmi.n	1650 <mem_manage_fault+0x4c>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    1638:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    163a:	4a0c      	ldr	r2, [pc, #48]	; (166c <mem_manage_fault+0x68>)
    163c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    163e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1642:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    1644:	2300      	movs	r3, #0
    1646:	7023      	strb	r3, [r4, #0]

	return reason;
}
    1648:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    164a:	f06f 0015 	mvn.w	r0, #21
    164e:	e7eb      	b.n	1628 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1650:	4b06      	ldr	r3, [pc, #24]	; (166c <mem_manage_fault+0x68>)
    1652:	685b      	ldr	r3, [r3, #4]
    1654:	051b      	lsls	r3, r3, #20
    1656:	d5ef      	bpl.n	1638 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    1658:	4629      	mov	r1, r5
    165a:	f7ff ff19 	bl	1490 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    165e:	2800      	cmp	r0, #0
    1660:	d0ea      	beq.n	1638 <mem_manage_fault+0x34>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1662:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1666:	2002      	movs	r0, #2
    1668:	e7e7      	b.n	163a <mem_manage_fault+0x36>
    166a:	bf00      	nop
    166c:	e000ed00 	.word	0xe000ed00

00001670 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1670:	4b0d      	ldr	r3, [pc, #52]	; (16a8 <bus_fault.isra.0+0x38>)
    1672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1678:	0592      	lsls	r2, r2, #22
    167a:	d508      	bpl.n	168e <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    167c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    167e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1680:	0412      	lsls	r2, r2, #16
    1682:	d504      	bpl.n	168e <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    1684:	b118      	cbz	r0, 168e <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1686:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1688:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    168c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    168e:	4b06      	ldr	r3, [pc, #24]	; (16a8 <bus_fault.isra.0+0x38>)
    1690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1694:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1696:	bf58      	it	pl
    1698:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    169a:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    169c:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    169e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    16a2:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    16a4:	7008      	strb	r0, [r1, #0]

	return reason;
}
    16a6:	4770      	bx	lr
    16a8:	e000ed00 	.word	0xe000ed00

000016ac <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    16ac:	4b07      	ldr	r3, [pc, #28]	; (16cc <usage_fault.isra.0+0x20>)
    16ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    16b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    16b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    16b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    16b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    16b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    16ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    16bc:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    16c0:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    16c4:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    16c6:	2000      	movs	r0, #0
    16c8:	4770      	bx	lr
    16ca:	bf00      	nop
    16cc:	e000ed00 	.word	0xe000ed00

000016d0 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    16d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    16d2:	4b37      	ldr	r3, [pc, #220]	; (17b0 <z_arm_fault+0xe0>)
    16d4:	685b      	ldr	r3, [r3, #4]
{
    16d6:	b08a      	sub	sp, #40	; 0x28
    16d8:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    16da:	f3c3 0308 	ubfx	r3, r3, #0, #9
    16de:	2500      	movs	r5, #0
    16e0:	f385 8811 	msr	BASEPRI, r5
    16e4:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    16e8:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    16ec:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    16f0:	d111      	bne.n	1716 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    16f2:	f002 010c 	and.w	r1, r2, #12
    16f6:	2908      	cmp	r1, #8
    16f8:	d00d      	beq.n	1716 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    16fa:	0711      	lsls	r1, r2, #28
    16fc:	d401      	bmi.n	1702 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    16fe:	4606      	mov	r6, r0
			*nested_exc = true;
    1700:	2501      	movs	r5, #1
	*recoverable = false;
    1702:	2200      	movs	r2, #0
    1704:	3b03      	subs	r3, #3
    1706:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    170a:	2b03      	cmp	r3, #3
    170c:	d848      	bhi.n	17a0 <z_arm_fault+0xd0>
    170e:	e8df f003 	tbb	[pc, r3]
    1712:	3f04      	.short	0x3f04
    1714:	3c43      	.short	0x3c43
		return NULL;
    1716:	462e      	mov	r6, r5
    1718:	e7f3      	b.n	1702 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    171a:	4b25      	ldr	r3, [pc, #148]	; (17b0 <z_arm_fault+0xe0>)
    171c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    171e:	0792      	lsls	r2, r2, #30
    1720:	d43e      	bmi.n	17a0 <z_arm_fault+0xd0>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    1722:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1724:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1728:	d009      	beq.n	173e <z_arm_fault+0x6e>
		if (SCB_MMFSR != 0) {
    172a:	3328      	adds	r3, #40	; 0x28
    172c:	781b      	ldrb	r3, [r3, #0]
    172e:	b1f3      	cbz	r3, 176e <z_arm_fault+0x9e>
			reason = mem_manage_fault(esf, 1, recoverable);
    1730:	f10d 0207 	add.w	r2, sp, #7
    1734:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    1736:	4630      	mov	r0, r6
    1738:	f7ff ff64 	bl	1604 <mem_manage_fault>
		reason = usage_fault(esf);
    173c:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    173e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1742:	b993      	cbnz	r3, 176a <z_arm_fault+0x9a>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    1744:	2220      	movs	r2, #32
    1746:	4631      	mov	r1, r6
    1748:	a802      	add	r0, sp, #8
    174a:	f002 f98c 	bl	3a66 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    174e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1750:	b345      	cbz	r5, 17a4 <z_arm_fault+0xd4>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1752:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1756:	b922      	cbnz	r2, 1762 <z_arm_fault+0x92>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1758:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    175c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1760:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1762:	a902      	add	r1, sp, #8
    1764:	4620      	mov	r0, r4
    1766:	f002 f94b 	bl	3a00 <z_arm_fatal_error>
}
    176a:	b00a      	add	sp, #40	; 0x28
    176c:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    176e:	4b11      	ldr	r3, [pc, #68]	; (17b4 <z_arm_fault+0xe4>)
    1770:	781b      	ldrb	r3, [r3, #0]
    1772:	b12b      	cbz	r3, 1780 <z_arm_fault+0xb0>
			reason = bus_fault(esf, 1, recoverable);
    1774:	f10d 0107 	add.w	r1, sp, #7
    1778:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    177a:	f7ff ff79 	bl	1670 <bus_fault.isra.0>
    177e:	e7dd      	b.n	173c <z_arm_fault+0x6c>
		} else if (SCB_UFSR != 0) {
    1780:	4b0d      	ldr	r3, [pc, #52]	; (17b8 <z_arm_fault+0xe8>)
    1782:	8818      	ldrh	r0, [r3, #0]
    1784:	b284      	uxth	r4, r0
    1786:	2c00      	cmp	r4, #0
    1788:	d0d9      	beq.n	173e <z_arm_fault+0x6e>
		reason = usage_fault(esf);
    178a:	f7ff ff8f 	bl	16ac <usage_fault.isra.0>
    178e:	e7d5      	b.n	173c <z_arm_fault+0x6c>
		reason = mem_manage_fault(esf, 0, recoverable);
    1790:	f10d 0207 	add.w	r2, sp, #7
    1794:	2100      	movs	r1, #0
    1796:	e7ce      	b.n	1736 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    1798:	f10d 0107 	add.w	r1, sp, #7
    179c:	2000      	movs	r0, #0
    179e:	e7ec      	b.n	177a <z_arm_fault+0xaa>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    17a0:	2400      	movs	r4, #0
    17a2:	e7cc      	b.n	173e <z_arm_fault+0x6e>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    17a4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    17a8:	f023 0301 	bic.w	r3, r3, #1
    17ac:	e7d8      	b.n	1760 <z_arm_fault+0x90>
    17ae:	bf00      	nop
    17b0:	e000ed00 	.word	0xe000ed00
    17b4:	e000ed29 	.word	0xe000ed29
    17b8:	e000ed2a 	.word	0xe000ed2a

000017bc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    17bc:	4a02      	ldr	r2, [pc, #8]	; (17c8 <z_arm_fault_init+0xc>)
    17be:	6953      	ldr	r3, [r2, #20]
    17c0:	f043 0310 	orr.w	r3, r3, #16
    17c4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    17c6:	4770      	bx	lr
    17c8:	e000ed00 	.word	0xe000ed00

000017cc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    17cc:	4b04      	ldr	r3, [pc, #16]	; (17e0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    17ce:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    17d0:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    17d2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    17d4:	d003      	beq.n	17de <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    17d6:	4903      	ldr	r1, [pc, #12]	; (17e4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    17d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    17dc:	600a      	str	r2, [r1, #0]

000017de <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    17de:	4770      	bx	lr
	ldr r3, =_kernel
    17e0:	20000320 	.word	0x20000320
	ldr r1, =_SCS_ICSR
    17e4:	e000ed04 	.word	0xe000ed04

000017e8 <z_arm_interrupt_init>:
    17e8:	4804      	ldr	r0, [pc, #16]	; (17fc <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    17ea:	2300      	movs	r3, #0
    17ec:	2120      	movs	r1, #32
    17ee:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    17f0:	3301      	adds	r3, #1
    17f2:	2b27      	cmp	r3, #39	; 0x27
    17f4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    17f8:	d1f9      	bne.n	17ee <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    17fa:	4770      	bx	lr
    17fc:	e000e100 	.word	0xe000e100

00001800 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    1800:	b508      	push	{r3, lr}
	if (_current == thread) {
    1802:	4b0e      	ldr	r3, [pc, #56]	; (183c <z_impl_k_thread_abort+0x3c>)
    1804:	689b      	ldr	r3, [r3, #8]
    1806:	4283      	cmp	r3, r0
    1808:	d107      	bne.n	181a <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    180a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    180e:	b193      	cbz	r3, 1836 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1810:	4a0b      	ldr	r2, [pc, #44]	; (1840 <z_impl_k_thread_abort+0x40>)
    1812:	6853      	ldr	r3, [r2, #4]
    1814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1818:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    181a:	f001 fa15 	bl	2c48 <z_thread_single_abort>
	__asm__ volatile(
    181e:	f04f 0320 	mov.w	r3, #32
    1822:	f3ef 8011 	mrs	r0, BASEPRI
    1826:	f383 8811 	msr	BASEPRI, r3
    182a:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    182e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    1832:	f002 ba4a 	b.w	3cca <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    1836:	f001 fc73 	bl	3120 <z_self_abort>
    183a:	bf00      	nop
    183c:	20000320 	.word	0x20000320
    1840:	e000ed00 	.word	0xe000ed00

00001844 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    1844:	4b02      	ldr	r3, [pc, #8]	; (1850 <z_arm_configure_static_mpu_regions+0xc>)
    1846:	4a03      	ldr	r2, [pc, #12]	; (1854 <z_arm_configure_static_mpu_regions+0x10>)
    1848:	4803      	ldr	r0, [pc, #12]	; (1858 <z_arm_configure_static_mpu_regions+0x14>)
    184a:	2101      	movs	r1, #1
    184c:	f000 b896 	b.w	197c <arm_core_mpu_configure_static_mpu_regions>
    1850:	20010000 	.word	0x20010000
    1854:	20000000 	.word	0x20000000
    1858:	00004098 	.word	0x00004098

0000185c <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    185c:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    185e:	4b05      	ldr	r3, [pc, #20]	; (1874 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    1860:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    1862:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    1864:	4a04      	ldr	r2, [pc, #16]	; (1878 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    1866:	2120      	movs	r1, #32
    1868:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    186c:	4618      	mov	r0, r3
    186e:	2101      	movs	r1, #1
    1870:	f000 b88e 	b.w	1990 <arm_core_mpu_configure_dynamic_mpu_regions>
    1874:	2000029c 	.word	0x2000029c
    1878:	150b0000 	.word	0x150b0000

0000187c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    187c:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    187e:	4f1e      	ldr	r7, [pc, #120]	; (18f8 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1880:	2600      	movs	r6, #0
    1882:	428e      	cmp	r6, r1
    1884:	db01      	blt.n	188a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1886:	4610      	mov	r0, r2
    1888:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    188a:	6844      	ldr	r4, [r0, #4]
    188c:	b384      	cbz	r4, 18f0 <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    188e:	b153      	cbz	r3, 18a6 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1890:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1894:	ea14 0f0c 	tst.w	r4, ip
    1898:	d118      	bne.n	18cc <mpu_configure_regions+0x50>
		&&
    189a:	2c1f      	cmp	r4, #31
    189c:	d916      	bls.n	18cc <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    189e:	6805      	ldr	r5, [r0, #0]
		&&
    18a0:	ea1c 0f05 	tst.w	ip, r5
    18a4:	d112      	bne.n	18cc <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    18a6:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    18a8:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    18aa:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    18ae:	b2d2      	uxtb	r2, r2
    18b0:	d90f      	bls.n	18d2 <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    18b2:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    18b6:	d80e      	bhi.n	18d6 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    18b8:	3c01      	subs	r4, #1
    18ba:	fab4 f484 	clz	r4, r4
    18be:	f1c4 041f 	rsb	r4, r4, #31
    18c2:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    18c4:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    18c6:	ea4c 0404 	orr.w	r4, ip, r4
    18ca:	d906      	bls.n	18da <mpu_configure_regions+0x5e>
			return -EINVAL;
    18cc:	f06f 0215 	mvn.w	r2, #21
    18d0:	e7d9      	b.n	1886 <mpu_configure_regions+0xa>
		return REGION_32B;
    18d2:	2408      	movs	r4, #8
    18d4:	e7f6      	b.n	18c4 <mpu_configure_regions+0x48>
		return REGION_4G;
    18d6:	243e      	movs	r4, #62	; 0x3e
    18d8:	e7f4      	b.n	18c4 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    18da:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    18de:	4315      	orrs	r5, r2
    18e0:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    18e4:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    18e8:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    18ea:	60fd      	str	r5, [r7, #12]
		reg_index++;
    18ec:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    18ee:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    18f0:	3601      	adds	r6, #1
    18f2:	300c      	adds	r0, #12
    18f4:	e7c5      	b.n	1882 <mpu_configure_regions+0x6>
    18f6:	bf00      	nop
    18f8:	e000ed90 	.word	0xe000ed90

000018fc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    18fc:	4b03      	ldr	r3, [pc, #12]	; (190c <arm_core_mpu_enable+0x10>)
    18fe:	2205      	movs	r2, #5
    1900:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    1902:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1906:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    190a:	4770      	bx	lr
    190c:	e000ed90 	.word	0xe000ed90

00001910 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1910:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1914:	4b01      	ldr	r3, [pc, #4]	; (191c <arm_core_mpu_disable+0xc>)
    1916:	2200      	movs	r2, #0
    1918:	605a      	str	r2, [r3, #4]
}
    191a:	4770      	bx	lr
    191c:	e000ed90 	.word	0xe000ed90

00001920 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1920:	4913      	ldr	r1, [pc, #76]	; (1970 <arm_mpu_init+0x50>)
    1922:	6808      	ldr	r0, [r1, #0]
    1924:	2808      	cmp	r0, #8
{
    1926:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1928:	d81e      	bhi.n	1968 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    192a:	f7ff fff1 	bl	1910 <arm_core_mpu_disable>
	MPU->RNR = index;
    192e:	4c11      	ldr	r4, [pc, #68]	; (1974 <arm_mpu_init+0x54>)
    1930:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1932:	2200      	movs	r2, #0
    1934:	4290      	cmp	r0, r2
    1936:	f101 010c 	add.w	r1, r1, #12
    193a:	d105      	bne.n	1948 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    193c:	4b0e      	ldr	r3, [pc, #56]	; (1978 <arm_mpu_init+0x58>)
    193e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1940:	f7ff ffdc 	bl	18fc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1944:	2000      	movs	r0, #0
}
    1946:	bd10      	pop	{r4, pc}
    1948:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    194a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    194e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1952:	4313      	orrs	r3, r2
    1954:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    1958:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    195a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    195e:	f043 0301 	orr.w	r3, r3, #1
    1962:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1964:	3201      	adds	r2, #1
    1966:	e7e5      	b.n	1934 <arm_mpu_init+0x14>
		return -1;
    1968:	f04f 30ff 	mov.w	r0, #4294967295
    196c:	e7eb      	b.n	1946 <arm_mpu_init+0x26>
    196e:	bf00      	nop
    1970:	000040a4 	.word	0x000040a4
    1974:	e000ed90 	.word	0xe000ed90
    1978:	20000775 	.word	0x20000775

0000197c <arm_core_mpu_configure_static_mpu_regions>:
{
    197c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    197e:	4c03      	ldr	r4, [pc, #12]	; (198c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    1980:	2301      	movs	r3, #1
    1982:	7822      	ldrb	r2, [r4, #0]
    1984:	f7ff ff7a 	bl	187c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1988:	7020      	strb	r0, [r4, #0]
}
    198a:	bd10      	pop	{r4, pc}
    198c:	20000775 	.word	0x20000775

00001990 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    1990:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    1992:	4a08      	ldr	r2, [pc, #32]	; (19b4 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
    1994:	2300      	movs	r3, #0
    1996:	7812      	ldrb	r2, [r2, #0]
    1998:	f7ff ff70 	bl	187c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    199c:	f110 0f16 	cmn.w	r0, #22
    19a0:	d003      	beq.n	19aa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    19a2:	4b05      	ldr	r3, [pc, #20]	; (19b8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
    19a4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    19a6:	2807      	cmp	r0, #7
    19a8:	dd00      	ble.n	19ac <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    19aa:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    19ac:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    19ae:	611a      	str	r2, [r3, #16]
    19b0:	3001      	adds	r0, #1
    19b2:	e7f8      	b.n	19a6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    19b4:	20000775 	.word	0x20000775
    19b8:	e000ed90 	.word	0xe000ed90

000019bc <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    19bc:	4b01      	ldr	r3, [pc, #4]	; (19c4 <__stdout_hook_install+0x8>)
    19be:	6018      	str	r0, [r3, #0]
}
    19c0:	4770      	bx	lr
    19c2:	bf00      	nop
    19c4:	20000004 	.word	0x20000004

000019c8 <nordicsemi_nrf52_init>:
    19c8:	f04f 0320 	mov.w	r3, #32
    19cc:	f3ef 8211 	mrs	r2, BASEPRI
    19d0:	f383 8811 	msr	BASEPRI, r3
    19d4:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    19d8:	4906      	ldr	r1, [pc, #24]	; (19f4 <nordicsemi_nrf52_init+0x2c>)
    19da:	2301      	movs	r3, #1
    19dc:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    19e0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    19e4:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    19e8:	f382 8811 	msr	BASEPRI, r2
    19ec:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    19f0:	2000      	movs	r0, #0
    19f2:	4770      	bx	lr
    19f4:	4001e000 	.word	0x4001e000

000019f8 <sys_arch_reboot>:
    *p_gpregret = val;
    19f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    19fc:	b2c0      	uxtb	r0, r0
    19fe:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1a02:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    1a06:	4905      	ldr	r1, [pc, #20]	; (1a1c <sys_arch_reboot+0x24>)
    1a08:	4b05      	ldr	r3, [pc, #20]	; (1a20 <sys_arch_reboot+0x28>)
    1a0a:	68ca      	ldr	r2, [r1, #12]
    1a0c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1a10:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1a12:	60cb      	str	r3, [r1, #12]
    1a14:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    1a18:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    1a1a:	e7fd      	b.n	1a18 <sys_arch_reboot+0x20>
    1a1c:	e000ed00 	.word	0xe000ed00
    1a20:	05fa0004 	.word	0x05fa0004

00001a24 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1a24:	b120      	cbz	r0, 1a30 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    1a26:	4b03      	ldr	r3, [pc, #12]	; (1a34 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    1a28:	0180      	lsls	r0, r0, #6
    1a2a:	f043 0301 	orr.w	r3, r3, #1
    1a2e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    1a30:	4770      	bx	lr
    1a32:	bf00      	nop
    1a34:	00004060 	.word	0x00004060

00001a38 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1a38:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1a3a:	4b09      	ldr	r3, [pc, #36]	; (1a60 <gpio_nrfx_init+0x28>)
    1a3c:	781a      	ldrb	r2, [r3, #0]
    1a3e:	b96a      	cbnz	r2, 1a5c <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    1a40:	2101      	movs	r1, #1
    1a42:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1a44:	2006      	movs	r0, #6
    1a46:	2105      	movs	r1, #5
    1a48:	f7ff fcee 	bl	1428 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    1a4c:	2006      	movs	r0, #6
    1a4e:	f7ff fccd 	bl	13ec <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    1a52:	4b04      	ldr	r3, [pc, #16]	; (1a64 <gpio_nrfx_init+0x2c>)
    1a54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1a58:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1a5c:	2000      	movs	r0, #0
    1a5e:	bd08      	pop	{r3, pc}
    1a60:	20000776 	.word	0x20000776
    1a64:	40006000 	.word	0x40006000

00001a68 <gpio_nrfx_pin_interrupt_configure>:
{
    1a68:	b573      	push	{r0, r1, r4, r5, r6, lr}
    1a6a:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1a6c:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
    1a6e:	68c6      	ldr	r6, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1a70:	7a09      	ldrb	r1, [r1, #8]
    1a72:	f005 041f 	and.w	r4, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
    1a76:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    1a7a:	ea44 1441 	orr.w	r4, r4, r1, lsl #5
    1a7e:	d10c      	bne.n	1a9a <gpio_nrfx_pin_interrupt_configure+0x32>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1a80:	f004 011f 	and.w	r1, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1a84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    1a88:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    1a8c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    1a90:	07c8      	lsls	r0, r1, #31
    1a92:	d507      	bpl.n	1aa4 <gpio_nrfx_pin_interrupt_configure+0x3c>
		return -ENOTSUP;
    1a94:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1a98:	e093      	b.n	1bc2 <gpio_nrfx_pin_interrupt_configure+0x15a>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1a9a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    1a9e:	68f1      	ldr	r1, [r6, #12]
    1aa0:	f000 8091 	beq.w	1bc6 <gpio_nrfx_pin_interrupt_configure+0x15e>
    1aa4:	68f0      	ldr	r0, [r6, #12]
    1aa6:	2101      	movs	r1, #1
    1aa8:	40a9      	lsls	r1, r5
    1aaa:	4301      	orrs	r1, r0
    1aac:	6970      	ldr	r0, [r6, #20]
    1aae:	60f1      	str	r1, [r6, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1ab0:	2101      	movs	r1, #1
    1ab2:	40a9      	lsls	r1, r5
    1ab4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    1ab8:	69b2      	ldr	r2, [r6, #24]
    1aba:	bf0c      	ite	eq
    1abc:	4308      	orreq	r0, r1
    1abe:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    1ac0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1ac4:	bf0c      	ite	eq
    1ac6:	430a      	orreq	r2, r1
    1ac8:	438a      	bicne	r2, r1
    1aca:	61b2      	str	r2, [r6, #24]
    1acc:	6932      	ldr	r2, [r6, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1ace:	6170      	str	r0, [r6, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    1ad0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1ad4:	bf0c      	ite	eq
    1ad6:	4311      	orreq	r1, r2
    1ad8:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    1adc:	4a46      	ldr	r2, [pc, #280]	; (1bf8 <gpio_nrfx_pin_interrupt_configure+0x190>)
    1ade:	6131      	str	r1, [r6, #16]
    1ae0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1ae4:	2000      	movs	r0, #0
    1ae6:	b2db      	uxtb	r3, r3
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1ae8:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    1aec:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1af0:	f3c1 2104 	ubfx	r1, r1, #8, #5
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    1af4:	428c      	cmp	r4, r1
    1af6:	d16b      	bne.n	1bd0 <gpio_nrfx_pin_interrupt_configure+0x168>
		    && (intenset & BIT(i))) {
    1af8:	fa23 f100 	lsr.w	r1, r3, r0
    1afc:	07c9      	lsls	r1, r1, #31
    1afe:	d567      	bpl.n	1bd0 <gpio_nrfx_pin_interrupt_configure+0x168>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1b00:	0083      	lsls	r3, r0, #2
    1b02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1b06:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    1b0a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1b0e:	f021 0101 	bic.w	r1, r1, #1
    1b12:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    1b16:	2301      	movs	r3, #1
    1b18:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    1b1a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    1b1e:	b2c0      	uxtb	r0, r0
    1b20:	f000 fd00 	bl	2524 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1b24:	4620      	mov	r0, r4
    1b26:	2100      	movs	r1, #0
    1b28:	f001 fff0 	bl	3b0c <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    1b2c:	68f0      	ldr	r0, [r6, #12]
    1b2e:	40e8      	lsrs	r0, r5
    1b30:	f010 0001 	ands.w	r0, r0, #1
    1b34:	d045      	beq.n	1bc2 <gpio_nrfx_pin_interrupt_configure+0x15a>
		if (data->trig_edge & BIT(pin)) {
    1b36:	6970      	ldr	r0, [r6, #20]
    1b38:	40e8      	lsrs	r0, r5
    1b3a:	f010 0201 	ands.w	r2, r0, #1
    1b3e:	d04e      	beq.n	1bde <gpio_nrfx_pin_interrupt_configure+0x176>
			if (data->double_edge & BIT(pin)) {
    1b40:	69b3      	ldr	r3, [r6, #24]
    1b42:	40eb      	lsrs	r3, r5
    1b44:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1b46:	bf5f      	itttt	pl
    1b48:	6931      	ldrpl	r1, [r6, #16]
    1b4a:	fa21 f505 	lsrpl.w	r5, r1, r5
    1b4e:	f005 0501 	andpl.w	r5, r5, #1
    1b52:	f1c5 0502 	rsbpl	r5, r5, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1b56:	f10d 0007 	add.w	r0, sp, #7
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1b5a:	bf54      	ite	pl
    1b5c:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1b5e:	2503      	movmi	r5, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1b60:	f000 fd02 	bl	2568 <nrfx_gpiote_channel_alloc>
    1b64:	4b25      	ldr	r3, [pc, #148]	; (1bfc <gpio_nrfx_pin_interrupt_configure+0x194>)
    1b66:	4298      	cmp	r0, r3
    1b68:	d136      	bne.n	1bd8 <gpio_nrfx_pin_interrupt_configure+0x170>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    1b6a:	f89d 1007 	ldrb.w	r1, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1b6e:	008b      	lsls	r3, r1, #2
    1b70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    1b74:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1b78:	0224      	lsls	r4, r4, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1b7a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1b7e:	f422 3247 	bic.w	r2, r2, #203776	; 0x31c00
    1b82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    1b86:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1b8a:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1b8e:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    1b92:	4314      	orrs	r4, r2
    return ((uint32_t)p_reg + event);
    1b94:	008a      	lsls	r2, r1, #2
    1b96:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1b9a:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1b9e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1ba2:	2000      	movs	r0, #0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1ba4:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1ba8:	6010      	str	r0, [r2, #0]
    1baa:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    1bac:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1bb0:	f042 0201 	orr.w	r2, r2, #1
    1bb4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
    1bb8:	4a0f      	ldr	r2, [pc, #60]	; (1bf8 <gpio_nrfx_pin_interrupt_configure+0x190>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    1bba:	2301      	movs	r3, #1
    1bbc:	408b      	lsls	r3, r1
    1bbe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    1bc2:	b002      	add	sp, #8
    1bc4:	bd70      	pop	{r4, r5, r6, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1bc6:	2001      	movs	r0, #1
    1bc8:	40a8      	lsls	r0, r5
    1bca:	ea21 0100 	bic.w	r1, r1, r0
    1bce:	e76d      	b.n	1aac <gpio_nrfx_pin_interrupt_configure+0x44>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1bd0:	3001      	adds	r0, #1
    1bd2:	2808      	cmp	r0, #8
    1bd4:	d188      	bne.n	1ae8 <gpio_nrfx_pin_interrupt_configure+0x80>
    1bd6:	e7a5      	b.n	1b24 <gpio_nrfx_pin_interrupt_configure+0xbc>
		return -ENODEV;
    1bd8:	f06f 0012 	mvn.w	r0, #18
    1bdc:	e7f1      	b.n	1bc2 <gpio_nrfx_pin_interrupt_configure+0x15a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1bde:	6931      	ldr	r1, [r6, #16]
    1be0:	40e9      	lsrs	r1, r5
    1be2:	f001 0101 	and.w	r1, r1, #1
    1be6:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1bea:	4620      	mov	r0, r4
    1bec:	b2c9      	uxtb	r1, r1
    1bee:	f001 ff8d 	bl	3b0c <nrf_gpio_cfg_sense_set>
	int res = 0;
    1bf2:	4610      	mov	r0, r2
    1bf4:	e7e5      	b.n	1bc2 <gpio_nrfx_pin_interrupt_configure+0x15a>
    1bf6:	bf00      	nop
    1bf8:	40006000 	.word	0x40006000
    1bfc:	0bad0000 	.word	0x0bad0000

00001c00 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1c00:	4b2a      	ldr	r3, [pc, #168]	; (1cac <gpio_nrfx_config+0xac>)
{
    1c02:	b570      	push	{r4, r5, r6, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1c04:	6846      	ldr	r6, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1c06:	482a      	ldr	r0, [pc, #168]	; (1cb0 <gpio_nrfx_config+0xb0>)
    1c08:	4013      	ands	r3, r2
    1c0a:	4283      	cmp	r3, r0
    1c0c:	d03e      	beq.n	1c8c <gpio_nrfx_config+0x8c>
    1c0e:	d80d      	bhi.n	1c2c <gpio_nrfx_config+0x2c>
    1c10:	2b06      	cmp	r3, #6
    1c12:	d015      	beq.n	1c40 <gpio_nrfx_config+0x40>
    1c14:	d805      	bhi.n	1c22 <gpio_nrfx_config+0x22>
    1c16:	b19b      	cbz	r3, 1c40 <gpio_nrfx_config+0x40>
    1c18:	2b02      	cmp	r3, #2
    1c1a:	d039      	beq.n	1c90 <gpio_nrfx_config+0x90>
    1c1c:	f06f 0015 	mvn.w	r0, #21
    1c20:	e033      	b.n	1c8a <gpio_nrfx_config+0x8a>
    1c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1c26:	d1f9      	bne.n	1c1c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    1c28:	2301      	movs	r3, #1
    1c2a:	e009      	b.n	1c40 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1c2c:	4821      	ldr	r0, [pc, #132]	; (1cb4 <gpio_nrfx_config+0xb4>)
    1c2e:	4283      	cmp	r3, r0
    1c30:	d030      	beq.n	1c94 <gpio_nrfx_config+0x94>
    1c32:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1c36:	d02f      	beq.n	1c98 <gpio_nrfx_config+0x98>
    1c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1c3c:	d1ee      	bne.n	1c1c <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    1c3e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    1c40:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
    1c42:	bf54      	ite	pl
    1c44:	f3c2 1540 	ubfxpl	r5, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
    1c48:	2503      	movmi	r5, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1c4a:	f482 7480 	eor.w	r4, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    1c4e:	f412 7f00 	tst.w	r2, #512	; 0x200
	dir = ((flags & GPIO_OUTPUT) != 0)
    1c52:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1c56:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    1c5a:	d007      	beq.n	1c6c <gpio_nrfx_config+0x6c>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1c5c:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1c60:	6876      	ldr	r6, [r6, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1c62:	d01b      	beq.n	1c9c <gpio_nrfx_config+0x9c>
			nrf_gpio_port_out_set(reg, BIT(pin));
    1c64:	2201      	movs	r2, #1
    1c66:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    1c68:	f8c6 2508 	str.w	r2, [r6, #1288]	; 0x508
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1c6c:	ea40 0244 	orr.w	r2, r0, r4, lsl #1
    *p_pin = pin_number & 0x1F;
    1c70:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1c74:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1c78:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    1c7c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1c80:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1c84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	return 0;
    1c88:	2000      	movs	r0, #0
}
    1c8a:	bd70      	pop	{r4, r5, r6, pc}
		drive = NRF_GPIO_PIN_H0D1;
    1c8c:	2307      	movs	r3, #7
    1c8e:	e7d7      	b.n	1c40 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    1c90:	2304      	movs	r3, #4
    1c92:	e7d5      	b.n	1c40 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    1c94:	2305      	movs	r3, #5
    1c96:	e7d3      	b.n	1c40 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    1c98:	2303      	movs	r3, #3
    1c9a:	e7d1      	b.n	1c40 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    1c9c:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    1c9e:	bf42      	ittt	mi
    1ca0:	2201      	movmi	r2, #1
    1ca2:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    1ca4:	f8c6 250c 	strmi.w	r2, [r6, #1292]	; 0x50c
}
    1ca8:	e7e0      	b.n	1c6c <gpio_nrfx_config+0x6c>
    1caa:	bf00      	nop
    1cac:	00f00006 	.word	0x00f00006
    1cb0:	00100006 	.word	0x00100006
    1cb4:	00400002 	.word	0x00400002

00001cb8 <gpiote_event_handler>:
{
    1cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1cbc:	4d3f      	ldr	r5, [pc, #252]	; (1dbc <gpiote_event_handler+0x104>)
    1cbe:	682e      	ldr	r6, [r5, #0]
	if (port_event) {
    1cc0:	2e00      	cmp	r6, #0
    1cc2:	d04e      	beq.n	1d62 <gpiote_event_handler+0xaa>
	uint32_t out = data->pin_int_en;
    1cc4:	4b3e      	ldr	r3, [pc, #248]	; (1dc0 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
    1cc6:	e9d3 1005 	ldrd	r1, r0, [r3, #20]
	uint32_t out = data->pin_int_en;
    1cca:	68da      	ldr	r2, [r3, #12]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    1ccc:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
    1cce:	4301      	orrs	r1, r0
    1cd0:	ea22 0201 	bic.w	r2, r2, r1
    return p_reg->IN;
    1cd4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
	uint32_t bit = 1U << pin;
    1cd8:	2701      	movs	r7, #1
    1cda:	f8d1 4510 	ldr.w	r4, [r1, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    1cde:	405c      	eors	r4, r3
	uint32_t out = pin_states & level_pins;
    1ce0:	ea22 0404 	bic.w	r4, r2, r4
	uint32_t pin = 0U;
    1ce4:	f04f 0800 	mov.w	r8, #0
	while (level_pins) {
    1ce8:	bb72      	cbnz	r2, 1d48 <gpiote_event_handler+0x90>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1cea:	602a      	str	r2, [r5, #0]
    1cec:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
    1cee:	4835      	ldr	r0, [pc, #212]	; (1dc4 <gpiote_event_handler+0x10c>)
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1cf0:	2300      	movs	r3, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    1cf2:	2501      	movs	r5, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1cf4:	461f      	mov	r7, r3
    return p_reg->INTENSET & mask;
    1cf6:	f8d0 2304 	ldr.w	r2, [r0, #772]	; 0x304
    1cfa:	fa05 f103 	lsl.w	r1, r5, r3
    1cfe:	4211      	tst	r1, r2
    1d00:	d011      	beq.n	1d26 <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1d02:	009a      	lsls	r2, r3, #2
    1d04:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    1d08:	f502 42c2 	add.w	r2, r2, #24832	; 0x6100
    1d0c:	6811      	ldr	r1, [r2, #0]
    1d0e:	b151      	cbz	r1, 1d26 <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1d10:	f503 71a2 	add.w	r1, r3, #324	; 0x144
    1d14:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1d18:	6017      	str	r7, [r2, #0]
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1d1a:	f3c1 2104 	ubfx	r1, r1, #8, #5
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    1d1e:	fa05 f101 	lsl.w	r1, r5, r1
    1d22:	6812      	ldr	r2, [r2, #0]
    1d24:	430c      	orrs	r4, r1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1d26:	3301      	adds	r3, #1
    1d28:	2b08      	cmp	r3, #8
    1d2a:	d1e4      	bne.n	1cf6 <gpiote_event_handler+0x3e>
	if (fired_triggers[0]) {
    1d2c:	b9dc      	cbnz	r4, 1d66 <gpiote_event_handler+0xae>
	if (port_event) {
    1d2e:	b14e      	cbz	r6, 1d44 <gpiote_event_handler+0x8c>
	uint32_t out = data->pin_int_en;
    1d30:	4c23      	ldr	r4, [pc, #140]	; (1dc0 <gpiote_event_handler+0x108>)
	out &= ~data->trig_edge & ~data->double_edge;
    1d32:	e9d4 1005 	ldrd	r1, r0, [r4, #20]
	uint32_t out = data->pin_int_en;
    1d36:	68e2      	ldr	r2, [r4, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    1d38:	4301      	orrs	r1, r0
    1d3a:	ea22 0201 	bic.w	r2, r2, r1
	uint32_t bit = 1U << pin;
    1d3e:	2501      	movs	r5, #1
	uint32_t pin = 0U;
    1d40:	2600      	movs	r6, #0
	while (level_pins) {
    1d42:	bb42      	cbnz	r2, 1d96 <gpiote_event_handler+0xde>
}
    1d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    1d48:	423a      	tst	r2, r7
    1d4a:	d006      	beq.n	1d5a <gpiote_event_handler+0xa2>
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1d4c:	2100      	movs	r1, #0
    1d4e:	f008 001f 	and.w	r0, r8, #31
    1d52:	f001 fedb 	bl	3b0c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    1d56:	ea22 0207 	bic.w	r2, r2, r7
		++pin;
    1d5a:	f108 0801 	add.w	r8, r8, #1
		bit <<= 1;
    1d5e:	007f      	lsls	r7, r7, #1
    1d60:	e7c2      	b.n	1ce8 <gpiote_event_handler+0x30>
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1d62:	4634      	mov	r4, r6
    1d64:	e7c3      	b.n	1cee <gpiote_event_handler+0x36>
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d66:	4b16      	ldr	r3, [pc, #88]	; (1dc0 <gpiote_event_handler+0x108>)
    1d68:	6859      	ldr	r1, [r3, #4]
    1d6a:	2900      	cmp	r1, #0
    1d6c:	d0df      	beq.n	1d2e <gpiote_event_handler+0x76>
	return node->next;
    1d6e:	680d      	ldr	r5, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1d70:	4f15      	ldr	r7, [pc, #84]	; (1dc8 <gpiote_event_handler+0x110>)
    1d72:	2d00      	cmp	r5, #0
    1d74:	bf38      	it	cc
    1d76:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    1d78:	688a      	ldr	r2, [r1, #8]
    1d7a:	4022      	ands	r2, r4
    1d7c:	d002      	beq.n	1d84 <gpiote_event_handler+0xcc>
			cb->handler(port, cb, cb->pin_mask & pins);
    1d7e:	684b      	ldr	r3, [r1, #4]
    1d80:	4638      	mov	r0, r7
    1d82:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d84:	2d00      	cmp	r5, #0
    1d86:	d0d2      	beq.n	1d2e <gpiote_event_handler+0x76>
    1d88:	682b      	ldr	r3, [r5, #0]
    1d8a:	2b00      	cmp	r3, #0
    1d8c:	bf38      	it	cc
    1d8e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1d90:	4629      	mov	r1, r5
    1d92:	461d      	mov	r5, r3
    1d94:	e7f0      	b.n	1d78 <gpiote_event_handler+0xc0>
		if (level_pins & bit) {
    1d96:	4215      	tst	r5, r2
    1d98:	d00c      	beq.n	1db4 <gpiote_event_handler+0xfc>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1d9a:	6921      	ldr	r1, [r4, #16]
    1d9c:	40f1      	lsrs	r1, r6
    1d9e:	f001 0101 	and.w	r1, r1, #1
    1da2:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1da6:	b2c9      	uxtb	r1, r1
    1da8:	f006 001f 	and.w	r0, r6, #31
    1dac:	f001 feae 	bl	3b0c <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    1db0:	ea22 0205 	bic.w	r2, r2, r5
		++pin;
    1db4:	3601      	adds	r6, #1
		bit <<= 1;
    1db6:	006d      	lsls	r5, r5, #1
    1db8:	e7c3      	b.n	1d42 <gpiote_event_handler+0x8a>
    1dba:	bf00      	nop
    1dbc:	4000617c 	.word	0x4000617c
    1dc0:	200002a8 	.word	0x200002a8
    1dc4:	40006000 	.word	0x40006000
    1dc8:	20000058 	.word	0x20000058

00001dcc <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    1dcc:	b570      	push	{r4, r5, r6, lr}
		break;
	default:
		return -ENOTSUP;
	}
#else
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
    1dce:	794b      	ldrb	r3, [r1, #5]
    1dd0:	2b01      	cmp	r3, #1
    1dd2:	d123      	bne.n	1e1c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1dd4:	798b      	ldrb	r3, [r1, #6]
    1dd6:	2b03      	cmp	r3, #3
    1dd8:	d120      	bne.n	1e1c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1dda:	79ca      	ldrb	r2, [r1, #7]
    1ddc:	b122      	cbz	r2, 1de8 <uarte_nrfx_configure+0x1c>
    1dde:	2a01      	cmp	r2, #1
    1de0:	d11c      	bne.n	1e1c <uarte_nrfx_configure+0x50>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    1de2:	6843      	ldr	r3, [r0, #4]
    1de4:	791b      	ldrb	r3, [r3, #4]
    1de6:	b1cb      	cbz	r3, 1e1c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1de8:	790c      	ldrb	r4, [r1, #4]
    1dea:	b114      	cbz	r4, 1df2 <uarte_nrfx_configure+0x26>
    1dec:	2c02      	cmp	r4, #2
    1dee:	d115      	bne.n	1e1c <uarte_nrfx_configure+0x50>
    1df0:	240e      	movs	r4, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1df2:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1df4:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    1df6:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    1dfa:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    1dfc:	d062      	beq.n	1ec4 <uarte_nrfx_configure+0xf8>
    1dfe:	d82b      	bhi.n	1e58 <uarte_nrfx_configure+0x8c>
    1e00:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1e04:	d061      	beq.n	1eca <uarte_nrfx_configure+0xfe>
    1e06:	d814      	bhi.n	1e32 <uarte_nrfx_configure+0x66>
    1e08:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1e0c:	d05f      	beq.n	1ece <uarte_nrfx_configure+0x102>
    1e0e:	d808      	bhi.n	1e22 <uarte_nrfx_configure+0x56>
    1e10:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1e14:	d05e      	beq.n	1ed4 <uarte_nrfx_configure+0x108>
    1e16:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1e1a:	d05e      	beq.n	1eda <uarte_nrfx_configure+0x10e>
    1e1c:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1e20:	e04f      	b.n	1ec2 <uarte_nrfx_configure+0xf6>
    1e22:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1e26:	d05b      	beq.n	1ee0 <uarte_nrfx_configure+0x114>
    1e28:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1e2c:	d1f6      	bne.n	1e1c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1e2e:	4b37      	ldr	r3, [pc, #220]	; (1f0c <uarte_nrfx_configure+0x140>)
    1e30:	e03c      	b.n	1eac <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    1e32:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1e36:	d056      	beq.n	1ee6 <uarte_nrfx_configure+0x11a>
    1e38:	d807      	bhi.n	1e4a <uarte_nrfx_configure+0x7e>
    1e3a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1e3e:	d054      	beq.n	1eea <uarte_nrfx_configure+0x11e>
    1e40:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1e44:	d1ea      	bne.n	1e1c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1e46:	4b32      	ldr	r3, [pc, #200]	; (1f10 <uarte_nrfx_configure+0x144>)
    1e48:	e030      	b.n	1eac <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    1e4a:	f647 2612 	movw	r6, #31250	; 0x7a12
    1e4e:	42b3      	cmp	r3, r6
    1e50:	d1e4      	bne.n	1e1c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1e52:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1e56:	e029      	b.n	1eac <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    1e58:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1e5c:	d047      	beq.n	1eee <uarte_nrfx_configure+0x122>
    1e5e:	d813      	bhi.n	1e88 <uarte_nrfx_configure+0xbc>
    1e60:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1e64:	d046      	beq.n	1ef4 <uarte_nrfx_configure+0x128>
    1e66:	d809      	bhi.n	1e7c <uarte_nrfx_configure+0xb0>
    1e68:	f64d 26c0 	movw	r6, #56000	; 0xdac0
    1e6c:	42b3      	cmp	r3, r6
    1e6e:	d043      	beq.n	1ef8 <uarte_nrfx_configure+0x12c>
    1e70:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1e74:	d1d2      	bne.n	1e1c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1e76:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1e7a:	e017      	b.n	1eac <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    1e7c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1e80:	d1cc      	bne.n	1e1c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1e82:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1e86:	e011      	b.n	1eac <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    1e88:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1e8c:	d037      	beq.n	1efe <uarte_nrfx_configure+0x132>
    1e8e:	d808      	bhi.n	1ea2 <uarte_nrfx_configure+0xd6>
    1e90:	4e20      	ldr	r6, [pc, #128]	; (1f14 <uarte_nrfx_configure+0x148>)
    1e92:	42b3      	cmp	r3, r6
    1e94:	d036      	beq.n	1f04 <uarte_nrfx_configure+0x138>
    1e96:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1e9a:	d1bf      	bne.n	1e1c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1e9c:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1ea0:	e004      	b.n	1eac <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    1ea2:	4e1d      	ldr	r6, [pc, #116]	; (1f18 <uarte_nrfx_configure+0x14c>)
    1ea4:	42b3      	cmp	r3, r6
    1ea6:	d1b9      	bne.n	1e1c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1ea8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1eac:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    1eb0:	68c3      	ldr	r3, [r0, #12]
    1eb2:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    1eb4:	4322      	orrs	r2, r4
    1eb6:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1eb8:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    1ebc:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1ec0:	2000      	movs	r0, #0
}
    1ec2:	bd70      	pop	{r4, r5, r6, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1ec4:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1ec8:	e7f0      	b.n	1eac <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1eca:	4b14      	ldr	r3, [pc, #80]	; (1f1c <uarte_nrfx_configure+0x150>)
    1ecc:	e7ee      	b.n	1eac <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1ece:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1ed2:	e7eb      	b.n	1eac <uarte_nrfx_configure+0xe0>
		nrf_baudrate = 0x00014000;
    1ed4:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1ed8:	e7e8      	b.n	1eac <uarte_nrfx_configure+0xe0>
	switch (baudrate) {
    1eda:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1ede:	e7e5      	b.n	1eac <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1ee0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1ee4:	e7e2      	b.n	1eac <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1ee6:	4b0e      	ldr	r3, [pc, #56]	; (1f20 <uarte_nrfx_configure+0x154>)
    1ee8:	e7e0      	b.n	1eac <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1eea:	4b0e      	ldr	r3, [pc, #56]	; (1f24 <uarte_nrfx_configure+0x158>)
    1eec:	e7de      	b.n	1eac <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1eee:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1ef2:	e7db      	b.n	1eac <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1ef4:	4b0c      	ldr	r3, [pc, #48]	; (1f28 <uarte_nrfx_configure+0x15c>)
    1ef6:	e7d9      	b.n	1eac <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1ef8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1efc:	e7d6      	b.n	1eac <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1efe:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1f02:	e7d3      	b.n	1eac <uarte_nrfx_configure+0xe0>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1f04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1f08:	e7d0      	b.n	1eac <uarte_nrfx_configure+0xe0>
    1f0a:	bf00      	nop
    1f0c:	0013b000 	.word	0x0013b000
    1f10:	004ea000 	.word	0x004ea000
    1f14:	0003d090 	.word	0x0003d090
    1f18:	000f4240 	.word	0x000f4240
    1f1c:	00275000 	.word	0x00275000
    1f20:	0075c000 	.word	0x0075c000
    1f24:	003af000 	.word	0x003af000
    1f28:	013a9000 	.word	0x013a9000

00001f2c <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    1f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1f30:	68c7      	ldr	r7, [r0, #12]
{
    1f32:	4606      	mov	r6, r0
    1f34:	4688      	mov	r8, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1f36:	f001 ff74 	bl	3e22 <k_is_in_isr>
    1f3a:	b9b8      	cbnz	r0, 1f6c <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    1f3c:	4b28      	ldr	r3, [pc, #160]	; (1fe0 <uarte_nrfx_poll_out+0xb4>)
    1f3e:	781b      	ldrb	r3, [r3, #0]
    1f40:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    1f44:	6872      	ldr	r2, [r6, #4]
    1f46:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    1f48:	b193      	cbz	r3, 1f70 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    1f4a:	f04f 0320 	mov.w	r3, #32
    1f4e:	f3ef 8411 	mrs	r4, BASEPRI
    1f52:	f383 8811 	msr	BASEPRI, r3
    1f56:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    1f5a:	4630      	mov	r0, r6
    1f5c:	f001 fe65 	bl	3c2a <is_tx_ready>
    1f60:	bb38      	cbnz	r0, 1fb2 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    1f62:	f384 8811 	msr	BASEPRI, r4
    1f66:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1f6a:	e7ee      	b.n	1f4a <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1f6c:	2301      	movs	r3, #1
    1f6e:	e7e9      	b.n	1f44 <uarte_nrfx_poll_out+0x18>
    1f70:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    1f72:	4630      	mov	r0, r6
    1f74:	f001 fe59 	bl	3c2a <is_tx_ready>
    1f78:	b970      	cbnz	r0, 1f98 <uarte_nrfx_poll_out+0x6c>
    1f7a:	2001      	movs	r0, #1
    1f7c:	f001 fe7c 	bl	3c78 <nrfx_busy_wait>
    1f80:	3c01      	subs	r4, #1
    1f82:	d1f6      	bne.n	1f72 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    1f84:	2100      	movs	r1, #0
    1f86:	2021      	movs	r0, #33	; 0x21
    1f88:	f000 ffc8 	bl	2f1c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1f8c:	e7f0      	b.n	1f70 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    1f8e:	f384 8811 	msr	BASEPRI, r4
    1f92:	f3bf 8f6f 	isb	sy
}
    1f96:	e7f5      	b.n	1f84 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    1f98:	f04f 0320 	mov.w	r3, #32
    1f9c:	f3ef 8411 	mrs	r4, BASEPRI
    1fa0:	f383 8811 	msr	BASEPRI, r3
    1fa4:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    1fa8:	4630      	mov	r0, r6
    1faa:	f001 fe3e 	bl	3c2a <is_tx_ready>
    1fae:	2800      	cmp	r0, #0
    1fb0:	d0ed      	beq.n	1f8e <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    1fb2:	f807 8f10 	strb.w	r8, [r7, #16]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    1fb6:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1fb8:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    1fba:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    1fbe:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1fc2:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    1fc6:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    1fca:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    1fce:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1fd2:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    1fd4:	f384 8811 	msr	BASEPRI, r4
    1fd8:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    1fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fe0:	20000777 	.word	0x20000777

00001fe4 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    1fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1fe6:	2200      	movs	r2, #0
    1fe8:	4605      	mov	r5, r0
    1fea:	2101      	movs	r1, #1
    1fec:	2002      	movs	r0, #2
    1fee:	f7ff fa1b 	bl	1428 <z_arm_irq_priority_set>
    1ff2:	2002      	movs	r0, #2
    1ff4:	f7ff f9fa 	bl	13ec <arch_irq_enable>
	return config->uarte_regs;
    1ff8:	686b      	ldr	r3, [r5, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
    1ffa:	68ee      	ldr	r6, [r5, #12]
	return config->uarte_regs;
    1ffc:	681c      	ldr	r4, [r3, #0]
    p_reg->OUTSET = set_mask;
    1ffe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2002:	2200      	movs	r2, #0
    2004:	2140      	movs	r1, #64	; 0x40
    2006:	f8c4 2500 	str.w	r2, [r4, #1280]	; 0x500
    p_reg->PSEL.TXD = pseltxd;
    200a:	2006      	movs	r0, #6
	data->dev = dev;
    200c:	6035      	str	r5, [r6, #0]
    200e:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2012:	2103      	movs	r1, #3
    2014:	f8c3 1718 	str.w	r1, [r3, #1816]	; 0x718
    2018:	f8c3 2720 	str.w	r2, [r3, #1824]	; 0x720
    201c:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    2020:	2008      	movs	r0, #8
    2022:	f8c4 0514 	str.w	r0, [r4, #1300]	; 0x514
    2026:	f8c3 271c 	str.w	r2, [r3, #1820]	; 0x71c
    p_reg->OUTSET = set_mask;
    202a:	2220      	movs	r2, #32
    202c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2030:	f8c3 1714 	str.w	r1, [r3, #1812]	; 0x714
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    2034:	68e9      	ldr	r1, [r5, #12]
    p_reg->PSEL.RTS = pselrts;
    2036:	2305      	movs	r3, #5
    2038:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    203c:	2307      	movs	r3, #7
    203e:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
    2042:	3104      	adds	r1, #4
    2044:	4628      	mov	r0, r5
    2046:	f7ff fec1 	bl	1dcc <uarte_nrfx_configure>
	if (err) {
    204a:	4607      	mov	r7, r0
    204c:	2800      	cmp	r0, #0
    204e:	d13c      	bne.n	20ca <uarte_0_init+0xe6>
	if (get_dev_config(dev)->ppi_endtx) {
    2050:	686b      	ldr	r3, [r5, #4]
    2052:	799b      	ldrb	r3, [r3, #6]
    2054:	b1cb      	cbz	r3, 208a <uarte_0_init+0xa6>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    2056:	f106 0012 	add.w	r0, r6, #18
    205a:	f000 fabd 	bl	25d8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    205e:	4b1d      	ldr	r3, [pc, #116]	; (20d4 <uarte_0_init+0xf0>)
    2060:	4298      	cmp	r0, r3
    2062:	d134      	bne.n	20ce <uarte_0_init+0xea>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2064:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2066:	00c3      	lsls	r3, r0, #3
    2068:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    206c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2070:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    2074:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    2078:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    207c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2080:	4a15      	ldr	r2, [pc, #84]	; (20d8 <uarte_0_init+0xf4>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2082:	2301      	movs	r3, #1
    2084:	4083      	lsls	r3, r0
    2086:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    208a:	2308      	movs	r3, #8
    208c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2090:	2300      	movs	r3, #0
    2092:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2096:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    209a:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    209e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    20a2:	2301      	movs	r3, #1
    20a4:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20a8:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    20aa:	686b      	ldr	r3, [r5, #4]
    20ac:	799b      	ldrb	r3, [r3, #6]
    20ae:	b91b      	cbnz	r3, 20b8 <uarte_0_init+0xd4>
    p_reg->INTENSET = mask;
    20b0:	f44f 7380 	mov.w	r3, #256	; 0x100
    20b4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    20b8:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    20ba:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    20bc:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    20c0:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20c4:	2301      	movs	r3, #1
    20c6:	60a3      	str	r3, [r4, #8]
    20c8:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    20ca:	4638      	mov	r0, r7
    20cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EIO;
    20ce:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    20d2:	e7fa      	b.n	20ca <uarte_0_init+0xe6>
    20d4:	0bad0000 	.word	0x0bad0000
    20d8:	4001f000 	.word	0x4001f000

000020dc <nrf52_errata_108>:
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    20dc:	4b04      	ldr	r3, [pc, #16]	; (20f0 <nrf52_errata_108+0x14>)
    20de:	6818      	ldr	r0, [r3, #0]
    20e0:	1c42      	adds	r2, r0, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    20e2:	bf04      	itt	eq
    20e4:	4b03      	ldreq	r3, [pc, #12]	; (20f4 <nrf52_errata_108+0x18>)
    20e6:	7818      	ldrbeq	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
    20e8:	1f83      	subs	r3, r0, #6
    20ea:	4258      	negs	r0, r3
    20ec:	4158      	adcs	r0, r3
    20ee:	4770      	bx	lr
    20f0:	10000130 	.word	0x10000130
    20f4:	f0000fe0 	.word	0xf0000fe0

000020f8 <nrf52_errata_16>:
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    20f8:	4b07      	ldr	r3, [pc, #28]	; (2118 <nrf52_errata_16+0x20>)
    20fa:	781b      	ldrb	r3, [r3, #0]
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    20fc:	2b06      	cmp	r3, #6
    20fe:	d109      	bne.n	2114 <nrf52_errata_16+0x1c>
            uint32_t var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    2100:	4b06      	ldr	r3, [pc, #24]	; (211c <nrf52_errata_16+0x24>)
    2102:	681b      	ldr	r3, [r3, #0]
    2104:	f3c3 1303 	ubfx	r3, r3, #4, #4
    2108:	3b03      	subs	r3, #3
    210a:	2b03      	cmp	r3, #3
    210c:	d802      	bhi.n	2114 <nrf52_errata_16+0x1c>
    210e:	4a04      	ldr	r2, [pc, #16]	; (2120 <nrf52_errata_16+0x28>)
    2110:	5cd0      	ldrb	r0, [r2, r3]
    2112:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
    2114:	2000      	movs	r0, #0
    #endif
}
    2116:	4770      	bx	lr
    2118:	f0000fe0 	.word	0xf0000fe0
    211c:	f0000fe8 	.word	0xf0000fe8
    2120:	00004185 	.word	0x00004185

00002124 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2124:	4a02      	ldr	r2, [pc, #8]	; (2130 <nvmc_wait+0xc>)
    2126:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    212a:	2b00      	cmp	r3, #0
    212c:	d0fb      	beq.n	2126 <nvmc_wait+0x2>
}
    212e:	4770      	bx	lr
    2130:	4001e000 	.word	0x4001e000

00002134 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2134:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_12_ENABLE_WORKAROUND
        /* Workaround for Errata 12 "COMP: Reference ladder not correctly calibrated" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_12()){
    2136:	f7ff ffd1 	bl	20dc <nrf52_errata_108>
    213a:	b128      	cbz	r0, 2148 <SystemInit+0x14>
            *(volatile uint32_t *)0x40013540 = (*(uint32_t *)0x10000324 & 0x00001F00) >> 8;
    213c:	4b77      	ldr	r3, [pc, #476]	; (231c <SystemInit+0x1e8>)
    213e:	4a78      	ldr	r2, [pc, #480]	; (2320 <SystemInit+0x1ec>)
    2140:	681b      	ldr	r3, [r3, #0]
    2142:	f3c3 2304 	ubfx	r3, r3, #8, #5
    2146:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_16_ENABLE_WORKAROUND
        /* Workaround for Errata 16 "System: RAM may be corrupt on wakeup from CPU IDLE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_16()){
    2148:	f7ff ffd6 	bl	20f8 <nrf52_errata_16>
    214c:	b110      	cbz	r0, 2154 <SystemInit+0x20>
            *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    214e:	4b75      	ldr	r3, [pc, #468]	; (2324 <SystemInit+0x1f0>)
    2150:	4a75      	ldr	r2, [pc, #468]	; (2328 <SystemInit+0x1f4>)
    2152:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_31_ENABLE_WORKAROUND
        /* Workaround for Errata 31 "CLOCK: Calibration values are not correctly loaded from FICR at reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_31()){
    2154:	f7ff ffc2 	bl	20dc <nrf52_errata_108>
    2158:	b128      	cbz	r0, 2166 <SystemInit+0x32>
            *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    215a:	4b74      	ldr	r3, [pc, #464]	; (232c <SystemInit+0x1f8>)
    215c:	4a74      	ldr	r2, [pc, #464]	; (2330 <SystemInit+0x1fc>)
    215e:	681b      	ldr	r3, [r3, #0]
    2160:	f3c3 3342 	ubfx	r3, r3, #13, #3
    2164:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_32_ENABLE_WORKAROUND
        /* Workaround for Errata 32 "DIF: Debug session automatically enables TracePort pins" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp */
        if (nrf52_errata_32()){
    2166:	f7ff ffc7 	bl	20f8 <nrf52_errata_16>
    216a:	b120      	cbz	r0, 2176 <SystemInit+0x42>
            CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    216c:	4a71      	ldr	r2, [pc, #452]	; (2334 <SystemInit+0x200>)
    216e:	68d3      	ldr	r3, [r2, #12]
    2170:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    2174:	60d3      	str	r3, [r2, #12]
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2176:	f7ff ffb1 	bl	20dc <nrf52_errata_108>
    217a:	b140      	cbz	r0, 218e <SystemInit+0x5a>
            NRF_CLOCK->EVENTS_DONE = 0;
    217c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2180:	2200      	movs	r2, #0
    2182:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2186:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    218a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_37_ENABLE_WORKAROUND
        /* Workaround for Errata 37 "RADIO: Encryption engine is slow by default" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_37()){
    218e:	f7ff ffb3 	bl	20f8 <nrf52_errata_16>
    2192:	b110      	cbz	r0, 219a <SystemInit+0x66>
            *(volatile uint32_t *)0x400005A0 = 0x3;
    2194:	4b68      	ldr	r3, [pc, #416]	; (2338 <SystemInit+0x204>)
    2196:	2203      	movs	r2, #3
    2198:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_57_ENABLE_WORKAROUND
        /* Workaround for Errata 57 "NFCT: NFC Modulation amplitude" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_57()){
    219a:	f7ff ffad 	bl	20f8 <nrf52_errata_16>
    219e:	b140      	cbz	r0, 21b2 <SystemInit+0x7e>
            *(volatile uint32_t *)0x40005610 = 0x00000005;
    21a0:	4b66      	ldr	r3, [pc, #408]	; (233c <SystemInit+0x208>)
    21a2:	2205      	movs	r2, #5
    21a4:	601a      	str	r2, [r3, #0]
            *(volatile uint32_t *)0x40005688 = 0x00000001;
    21a6:	2201      	movs	r2, #1
    21a8:	679a      	str	r2, [r3, #120]	; 0x78
            *(volatile uint32_t *)0x40005618 = 0x00000000;
    21aa:	2200      	movs	r2, #0
    21ac:	609a      	str	r2, [r3, #8]
            *(volatile uint32_t *)0x40005614 = 0x0000003F;
    21ae:	223f      	movs	r2, #63	; 0x3f
    21b0:	605a      	str	r2, [r3, #4]
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1;
            uint32_t var2;

            if (*(uint32_t *)0x10000130ul == 0xFFFFFFFF)
    21b2:	4b63      	ldr	r3, [pc, #396]	; (2340 <SystemInit+0x20c>)
    21b4:	681a      	ldr	r2, [r3, #0]
    21b6:	1c51      	adds	r1, r2, #1
            {
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    21b8:	bf0b      	itete	eq
    21ba:	4b62      	ldreq	r3, [pc, #392]	; (2344 <SystemInit+0x210>)
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
            }
            else
            {
                var1 = *(uint32_t *)0x10000130ul;
                var2 = *(uint32_t *)0x10000134ul;
    21bc:	4b62      	ldrne	r3, [pc, #392]	; (2348 <SystemInit+0x214>)
                var1 = ((*(uint32_t *)0xF0000FE0ul) & 0x000000FFul);
    21be:	781a      	ldrbeq	r2, [r3, #0]
                var2 = *(uint32_t *)0x10000134ul;
    21c0:	681b      	ldrne	r3, [r3, #0]
                var2 = ((*(uint32_t *)0xF0000FE8ul) & 0x000000F0ul) >> 4;
    21c2:	bf02      	ittt	eq
    21c4:	3308      	addeq	r3, #8
    21c6:	681b      	ldreq	r3, [r3, #0]
    21c8:	f3c3 1303 	ubfxeq	r3, r3, #4, #4
            uint32_t var1 = *(uint32_t *)0x10000130ul;
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    21cc:	2a06      	cmp	r2, #6
    21ce:	d14d      	bne.n	226c <SystemInit+0x138>
            {
                switch(var2)
    21d0:	3b03      	subs	r3, #3
    21d2:	2b03      	cmp	r3, #3
    21d4:	d803      	bhi.n	21de <SystemInit+0xaa>
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    21d6:	4a5d      	ldr	r2, [pc, #372]	; (234c <SystemInit+0x218>)
    21d8:	5cd3      	ldrb	r3, [r2, r3]
    21da:	2b00      	cmp	r3, #0
    21dc:	d046      	beq.n	226c <SystemInit+0x138>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    21de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    21e2:	4b5b      	ldr	r3, [pc, #364]	; (2350 <SystemInit+0x21c>)
    21e4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    21e8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    21ec:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    21f0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    21f4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    21f8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    21fc:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2200:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2204:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2208:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    220c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2210:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2214:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2218:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    221c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2220:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2224:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2228:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    222c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2230:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2234:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2238:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    223c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2240:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2244:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2248:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    224c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2250:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2254:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2258:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    225c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2260:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2264:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2268:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_108_ENABLE_WORKAROUND
        /* Workaround for Errata 108 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_108()){
    226c:	f7ff ff36 	bl	20dc <nrf52_errata_108>
    2270:	b128      	cbz	r0, 227e <SystemInit+0x14a>
            *(volatile uint32_t *)0x40000EE4ul = *(volatile uint32_t *)0x10000258ul & 0x0000004Ful;
    2272:	4b38      	ldr	r3, [pc, #224]	; (2354 <SystemInit+0x220>)
    2274:	4a38      	ldr	r2, [pc, #224]	; (2358 <SystemInit+0x224>)
    2276:	681b      	ldr	r3, [r3, #0]
    2278:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    227c:	6013      	str	r3, [r2, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    227e:	f7ff ff2d 	bl	20dc <nrf52_errata_108>
    2282:	b148      	cbz	r0, 2298 <SystemInit+0x164>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2288:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    228c:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    228e:	bf44      	itt	mi
    2290:	f06f 0201 	mvnmi.w	r2, #1
    2294:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2298:	4b29      	ldr	r3, [pc, #164]	; (2340 <SystemInit+0x20c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)
            if (var1 == 0x06)
    229a:	681b      	ldr	r3, [r3, #0]
    229c:	2b06      	cmp	r3, #6
    229e:	d10c      	bne.n	22ba <SystemInit+0x186>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    22a0:	4b29      	ldr	r3, [pc, #164]	; (2348 <SystemInit+0x214>)
    22a2:	681b      	ldr	r3, [r3, #0]
    22a4:	3b03      	subs	r3, #3
    22a6:	2b03      	cmp	r3, #3
    22a8:	d802      	bhi.n	22b0 <SystemInit+0x17c>
    #endif

    #if NRF52_ERRATA_182_ENABLE_WORKAROUND
        /* Workaround for Errata 182 "RADIO: Fixes for anomalies #102, #106, and #107 do not take effect" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_182()){
    22aa:	4a2c      	ldr	r2, [pc, #176]	; (235c <SystemInit+0x228>)
    22ac:	5cd3      	ldrb	r3, [r2, r3]
    22ae:	b123      	cbz	r3, 22ba <SystemInit+0x186>
            *(volatile uint32_t *) 0x4000173C |= (0x1 << 10);
    22b0:	4a2b      	ldr	r2, [pc, #172]	; (2360 <SystemInit+0x22c>)
    22b2:	6813      	ldr	r3, [r2, #0]
    22b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    22b8:	6013      	str	r3, [r2, #0]

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    22ba:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    22be:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    22c2:	2a00      	cmp	r2, #0
    22c4:	db03      	blt.n	22ce <SystemInit+0x19a>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    22c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    22ca:	2b00      	cmp	r3, #0
    22cc:	da22      	bge.n	2314 <SystemInit+0x1e0>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    22ce:	4925      	ldr	r1, [pc, #148]	; (2364 <SystemInit+0x230>)
    22d0:	2301      	movs	r3, #1
    22d2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    22d6:	f7ff ff25 	bl	2124 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    22da:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    22de:	2415      	movs	r4, #21
    22e0:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    22e4:	f7ff ff1e 	bl	2124 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    22e8:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    22ec:	f7ff ff1a 	bl	2124 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    22f0:	2300      	movs	r3, #0
    22f2:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    22f6:	f7ff ff15 	bl	2124 <nvmc_wait>
    22fa:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    22fe:	491a      	ldr	r1, [pc, #104]	; (2368 <SystemInit+0x234>)
    2300:	4b1a      	ldr	r3, [pc, #104]	; (236c <SystemInit+0x238>)
    2302:	68ca      	ldr	r2, [r1, #12]
    2304:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2308:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    230a:	60cb      	str	r3, [r1, #12]
    230c:	f3bf 8f4f 	dsb	sy
    __NOP();
    2310:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2312:	e7fd      	b.n	2310 <SystemInit+0x1dc>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2314:	4b16      	ldr	r3, [pc, #88]	; (2370 <SystemInit+0x23c>)
    2316:	4a17      	ldr	r2, [pc, #92]	; (2374 <SystemInit+0x240>)
    2318:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    231a:	bd10      	pop	{r4, pc}
    231c:	10000324 	.word	0x10000324
    2320:	40013540 	.word	0x40013540
    2324:	4007c074 	.word	0x4007c074
    2328:	baadf00d 	.word	0xbaadf00d
    232c:	10000244 	.word	0x10000244
    2330:	4000053c 	.word	0x4000053c
    2334:	e000edf0 	.word	0xe000edf0
    2338:	400005a0 	.word	0x400005a0
    233c:	40005610 	.word	0x40005610
    2340:	10000130 	.word	0x10000130
    2344:	f0000fe0 	.word	0xf0000fe0
    2348:	10000134 	.word	0x10000134
    234c:	0000417d 	.word	0x0000417d
    2350:	4000c000 	.word	0x4000c000
    2354:	10000258 	.word	0x10000258
    2358:	40000ee4 	.word	0x40000ee4
    235c:	00004181 	.word	0x00004181
    2360:	4000173c 	.word	0x4000173c
    2364:	4001e000 	.word	0x4001e000
    2368:	e000ed00 	.word	0xe000ed00
    236c:	05fa0004 	.word	0x05fa0004
    2370:	2000001c 	.word	0x2000001c
    2374:	03d09000 	.word	0x03d09000

00002378 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2378:	4b04      	ldr	r3, [pc, #16]	; (238c <nrfx_clock_init+0x14>)
    237a:	791a      	ldrb	r2, [r3, #4]
    237c:	b922      	cbnz	r2, 2388 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    237e:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2380:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2382:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2384:	4802      	ldr	r0, [pc, #8]	; (2390 <nrfx_clock_init+0x18>)
    2386:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2388:	4802      	ldr	r0, [pc, #8]	; (2394 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    238a:	4770      	bx	lr
    238c:	200002c4 	.word	0x200002c4
    2390:	0bad0000 	.word	0x0bad0000
    2394:	0bad000c 	.word	0x0bad000c

00002398 <nrfx_clock_start>:
    m_clock_cb.module_initialized = false;
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    2398:	b530      	push	{r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    239a:	b110      	cbz	r0, 23a2 <nrfx_clock_start+0xa>
    239c:	2801      	cmp	r0, #1
    239e:	d033      	beq.n	2408 <nrfx_clock_start+0x70>
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    23a0:	bd30      	pop	{r4, r5, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    23a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23a6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    23aa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    23ae:	f411 3f80 	tst.w	r1, #65536	; 0x10000
    23b2:	4619      	mov	r1, r3
    23b4:	d024      	beq.n	2400 <nrfx_clock_start+0x68>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    23b6:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    23ba:	2a01      	cmp	r2, #1
    23bc:	d120      	bne.n	2400 <nrfx_clock_start+0x68>
    p_reg->LFCLKSRC = (uint32_t)(source);
    23be:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    23c2:	4b16      	ldr	r3, [pc, #88]	; (241c <nrfx_clock_start+0x84>)
    23c4:	2200      	movs	r2, #0
    23c6:	601a      	str	r2, [r3, #0]
    23c8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    23ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    23ce:	2202      	movs	r2, #2
    23d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    core_debug = CoreDebug->DEMCR;
    23d4:	4a12      	ldr	r2, [pc, #72]	; (2420 <nrfx_clock_start+0x88>)
    23d6:	68d0      	ldr	r0, [r2, #12]
    CoreDebug->DEMCR = core_debug | CoreDebug_DEMCR_TRCENA_Msk;
    23d8:	f040 7380 	orr.w	r3, r0, #16777216	; 0x1000000
    23dc:	60d3      	str	r3, [r2, #12]
    dwt_ctrl = DWT->CTRL;
    23de:	4b11      	ldr	r3, [pc, #68]	; (2424 <nrfx_clock_start+0x8c>)
    23e0:	681c      	ldr	r4, [r3, #0]
    DWT->CTRL = dwt_ctrl | DWT_CTRL_CYCCNTENA_Msk;
    23e2:	f044 0101 	orr.w	r1, r4, #1
    23e6:	6019      	str	r1, [r3, #0]
    cyccnt_inital = DWT->CYCCNT;
    23e8:	685d      	ldr	r5, [r3, #4]
    while ((DWT->CYCCNT - cyccnt_inital) < ANOMALY_132_DELAY_CYCLES)
    23ea:	6859      	ldr	r1, [r3, #4]
    23ec:	1b49      	subs	r1, r1, r5
    23ee:	f5b1 5f0a 	cmp.w	r1, #8832	; 0x2280
    23f2:	d3fa      	bcc.n	23ea <nrfx_clock_start+0x52>
    DWT->CTRL = dwt_ctrl;
    23f4:	601c      	str	r4, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    23f6:	4b0c      	ldr	r3, [pc, #48]	; (2428 <nrfx_clock_start+0x90>)
    CoreDebug->DEMCR = core_debug;
    23f8:	60d0      	str	r0, [r2, #12]
    23fa:	2201      	movs	r2, #1
    23fc:	601a      	str	r2, [r3, #0]
}
    23fe:	e7cf      	b.n	23a0 <nrfx_clock_start+0x8>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2400:	2300      	movs	r3, #0
    2402:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
    2406:	e7dc      	b.n	23c2 <nrfx_clock_start+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2408:	4b08      	ldr	r3, [pc, #32]	; (242c <nrfx_clock_start+0x94>)
    240a:	2200      	movs	r2, #0
    240c:	601a      	str	r2, [r3, #0]
    240e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    2410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2414:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2418:	6018      	str	r0, [r3, #0]
}
    241a:	e7c1      	b.n	23a0 <nrfx_clock_start+0x8>
    241c:	40000104 	.word	0x40000104
    2420:	e000edf0 	.word	0xe000edf0
    2424:	e0001000 	.word	0xe0001000
    2428:	40000008 	.word	0x40000008
    242c:	40000100 	.word	0x40000100

00002430 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    2430:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    2432:	b110      	cbz	r0, 243a <nrfx_clock_stop+0xa>
    2434:	2801      	cmp	r0, #1
    2436:	d018      	beq.n	246a <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    2438:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
    243a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    243e:	2202      	movs	r2, #2
    2440:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2444:	4a18      	ldr	r2, [pc, #96]	; (24a8 <nrfx_clock_stop+0x78>)
    2446:	6010      	str	r0, [r2, #0]
    2448:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    244a:	4a18      	ldr	r2, [pc, #96]	; (24ac <nrfx_clock_stop+0x7c>)
    244c:	2101      	movs	r1, #1
    244e:	6011      	str	r1, [r2, #0]
    2450:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2454:	461c      	mov	r4, r3
    2456:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
    245a:	03db      	lsls	r3, r3, #15
    245c:	d5ec      	bpl.n	2438 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    245e:	2001      	movs	r0, #1
    2460:	f001 fc0a 	bl	3c78 <nrfx_busy_wait>
    2464:	3d01      	subs	r5, #1
    2466:	d1f6      	bne.n	2456 <nrfx_clock_stop+0x26>
    2468:	e7e6      	b.n	2438 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    246a:	4b11      	ldr	r3, [pc, #68]	; (24b0 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
    246c:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2470:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    2472:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2476:	601a      	str	r2, [r3, #0]
    2478:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    247a:	4b0e      	ldr	r3, [pc, #56]	; (24b4 <nrfx_clock_stop+0x84>)
    247c:	f242 7510 	movw	r5, #10000	; 0x2710
    2480:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2482:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2486:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
    248a:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    248c:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2490:	d505      	bpl.n	249e <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    2492:	b123      	cbz	r3, 249e <nrfx_clock_stop+0x6e>
    2494:	2001      	movs	r0, #1
    2496:	f001 fbef 	bl	3c78 <nrfx_busy_wait>
    249a:	3d01      	subs	r5, #1
    249c:	d1f1      	bne.n	2482 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
    249e:	4b06      	ldr	r3, [pc, #24]	; (24b8 <nrfx_clock_stop+0x88>)
    24a0:	2200      	movs	r2, #0
    24a2:	715a      	strb	r2, [r3, #5]
    24a4:	e7c8      	b.n	2438 <nrfx_clock_stop+0x8>
    24a6:	bf00      	nop
    24a8:	40000104 	.word	0x40000104
    24ac:	4000000c 	.word	0x4000000c
    24b0:	40000100 	.word	0x40000100
    24b4:	40000004 	.word	0x40000004
    24b8:	200002c4 	.word	0x200002c4

000024bc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    24bc:	4b16      	ldr	r3, [pc, #88]	; (2518 <nrfx_power_clock_irq_handler+0x5c>)
    24be:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    24c0:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    24c2:	b16a      	cbz	r2, 24e0 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24c4:	2200      	movs	r2, #0
    24c6:	601a      	str	r2, [r3, #0]
    24c8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    24ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    24ce:	2201      	movs	r2, #1
    24d0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    24d4:	4b11      	ldr	r3, [pc, #68]	; (251c <nrfx_power_clock_irq_handler+0x60>)
    24d6:	7958      	ldrb	r0, [r3, #5]
    24d8:	b910      	cbnz	r0, 24e0 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    24da:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    24dc:	681b      	ldr	r3, [r3, #0]
    24de:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    24e0:	4b0f      	ldr	r3, [pc, #60]	; (2520 <nrfx_power_clock_irq_handler+0x64>)
    24e2:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    24e4:	b172      	cbz	r2, 2504 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24e6:	2200      	movs	r2, #0
    24e8:	601a      	str	r2, [r3, #0]
    24ea:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    24ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    24f0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    24f4:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    24f8:	0792      	lsls	r2, r2, #30
    24fa:	d104      	bne.n	2506 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    24fc:	2201      	movs	r2, #1
    24fe:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2502:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2504:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2506:	2202      	movs	r2, #2
    2508:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    250c:	4b03      	ldr	r3, [pc, #12]	; (251c <nrfx_power_clock_irq_handler+0x60>)
}
    250e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2512:	681b      	ldr	r3, [r3, #0]
    2514:	2001      	movs	r0, #1
    2516:	4718      	bx	r3
    2518:	40000100 	.word	0x40000100
    251c:	200002c4 	.word	0x200002c4
    2520:	40000104 	.word	0x40000104

00002524 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    2524:	2301      	movs	r3, #1
    2526:	fa03 f000 	lsl.w	r0, r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    252a:	f010 0fff 	tst.w	r0, #255	; 0xff
    252e:	d012      	beq.n	2556 <nrfx_gpiote_channel_free+0x32>
	__asm__ volatile(
    2530:	f04f 0320 	mov.w	r3, #32
    2534:	f3ef 8111 	mrs	r1, BASEPRI
    2538:	f383 8811 	msr	BASEPRI, r3
    253c:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    2540:	4a06      	ldr	r2, [pc, #24]	; (255c <nrfx_gpiote_channel_free+0x38>)
    2542:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
    2544:	ea23 0000 	bic.w	r0, r3, r0
    2548:	64d0      	str	r0, [r2, #76]	; 0x4c
	__asm__ volatile(
    254a:	f381 8811 	msr	BASEPRI, r1
    254e:	f3bf 8f6f 	isb	sy
    2552:	4803      	ldr	r0, [pc, #12]	; (2560 <nrfx_gpiote_channel_free+0x3c>)
    2554:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    2556:	4803      	ldr	r0, [pc, #12]	; (2564 <nrfx_gpiote_channel_free+0x40>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2558:	4770      	bx	lr
    255a:	bf00      	nop
    255c:	200002cc 	.word	0x200002cc
    2560:	0bad0000 	.word	0x0bad0000
    2564:	0bad0004 	.word	0x0bad0004

00002568 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    2568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    256c:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    256e:	f8df e060 	ldr.w	lr, [pc, #96]	; 25d0 <nrfx_gpiote_channel_alloc+0x68>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    2572:	4816      	ldr	r0, [pc, #88]	; (25cc <nrfx_gpiote_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    2574:	f8df 805c 	ldr.w	r8, [pc, #92]	; 25d4 <nrfx_gpiote_channel_alloc+0x6c>
{
    2578:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    257a:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
    257c:	2601      	movs	r6, #1
    257e:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    2580:	f04f 0120 	mov.w	r1, #32
    2584:	f3ef 8c11 	mrs	ip, BASEPRI
    2588:	f381 8811 	msr	BASEPRI, r1
    258c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    2590:	fa22 f103 	lsr.w	r1, r2, r3
    2594:	07c9      	lsls	r1, r1, #31
    2596:	d50a      	bpl.n	25ae <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    2598:	f8de 104c 	ldr.w	r1, [lr, #76]	; 0x4c
    259c:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    25a0:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
    25a2:	bf01      	itttt	eq
    25a4:	4339      	orreq	r1, r7
    25a6:	f8ce 104c 	streq.w	r1, [lr, #76]	; 0x4c
            err_code = NRFX_SUCCESS;
    25aa:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
    25ac:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    25ae:	f38c 8811 	msr	BASEPRI, ip
    25b2:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    25b6:	4540      	cmp	r0, r8
    25b8:	d005      	beq.n	25c6 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    25ba:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    25be:	439a      	bics	r2, r3
    25c0:	f104 0401 	add.w	r4, r4, #1
    25c4:	d1db      	bne.n	257e <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    25c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    25ca:	bf00      	nop
    25cc:	0bad0002 	.word	0x0bad0002
    25d0:	200002cc 	.word	0x200002cc
    25d4:	0bad0000 	.word	0x0bad0000

000025d8 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    25d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    25dc:	4a14      	ldr	r2, [pc, #80]	; (2630 <nrfx_ppi_channel_alloc+0x58>)
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    25de:	4e15      	ldr	r6, [pc, #84]	; (2634 <nrfx_ppi_channel_alloc+0x5c>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
    25e0:	4f15      	ldr	r7, [pc, #84]	; (2638 <nrfx_ppi_channel_alloc+0x60>)
{
    25e2:	4605      	mov	r5, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    25e4:	4815      	ldr	r0, [pc, #84]	; (263c <nrfx_ppi_channel_alloc+0x64>)
{
    25e6:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    25e8:	f04f 0e01 	mov.w	lr, #1
    25ec:	fa5f fc84 	uxtb.w	ip, r4
	__asm__ volatile(
    25f0:	f04f 0320 	mov.w	r3, #32
    25f4:	f3ef 8811 	mrs	r8, BASEPRI
    25f8:	f383 8811 	msr	BASEPRI, r3
    25fc:	f3bf 8f6f 	isb	sy
    2600:	fa0e f30c 	lsl.w	r3, lr, ip
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    2604:	4213      	tst	r3, r2
    2606:	d007      	beq.n	2618 <nrfx_ppi_channel_alloc+0x40>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    2608:	6831      	ldr	r1, [r6, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    260a:	420b      	tst	r3, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    260c:	bf01      	itttt	eq
    260e:	4319      	orreq	r1, r3
    2610:	6031      	streq	r1, [r6, #0]
            *p_channel = channel;
    2612:	f885 c000 	strbeq.w	ip, [r5]
            err_code   = NRFX_SUCCESS;
    2616:	4638      	moveq	r0, r7
	__asm__ volatile(
    2618:	f388 8811 	msr	BASEPRI, r8
    261c:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    2620:	42b8      	cmp	r0, r7
    2622:	d003      	beq.n	262c <nrfx_ppi_channel_alloc+0x54>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    2624:	439a      	bics	r2, r3
    2626:	f104 0401 	add.w	r4, r4, #1
    262a:	d1df      	bne.n	25ec <nrfx_ppi_channel_alloc+0x14>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    262c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2630:	000fffff 	.word	0x000fffff
    2634:	2000031c 	.word	0x2000031c
    2638:	0bad0000 	.word	0x0bad0000
    263c:	0bad0002 	.word	0x0bad0002

00002640 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    2640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2642:	4b10      	ldr	r3, [pc, #64]	; (2684 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
    2644:	4f10      	ldr	r7, [pc, #64]	; (2688 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2646:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
    264a:	3001      	adds	r0, #1
    264c:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    2650:	42ae      	cmp	r6, r5
    2652:	d800      	bhi.n	2656 <z_sys_init_run_level+0x16>
		}
	}
}
    2654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
    2656:	e9d5 3400 	ldrd	r3, r4, [r5]
    265a:	4620      	mov	r0, r4
    265c:	4798      	blx	r3
    265e:	b170      	cbz	r0, 267e <z_sys_init_run_level+0x3e>
    2660:	b16c      	cbz	r4, 267e <z_sys_init_run_level+0x3e>
				(dev - __device_start));
    2662:	1be4      	subs	r4, r4, r7
    2664:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2666:	0961      	lsrs	r1, r4, #5
    2668:	4a08      	ldr	r2, [pc, #32]	; (268c <z_sys_init_run_level+0x4c>)
    266a:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    266e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
    2672:	2301      	movs	r3, #1
    2674:	fa03 f404 	lsl.w	r4, r3, r4
    2678:	4304      	orrs	r4, r0
    267a:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    267e:	3508      	adds	r5, #8
    2680:	e7e6      	b.n	2650 <z_sys_init_run_level+0x10>
    2682:	bf00      	nop
    2684:	00004110 	.word	0x00004110
    2688:	20000028 	.word	0x20000028
    268c:	20000068 	.word	0x20000068

00002690 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
    2690:	4b08      	ldr	r3, [pc, #32]	; (26b4 <z_device_ready+0x24>)
    2692:	1ac0      	subs	r0, r0, r3
    2694:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
    2696:	4b08      	ldr	r3, [pc, #32]	; (26b8 <z_device_ready+0x28>)
    2698:	0942      	lsrs	r2, r0, #5
    269a:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
    269e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
    26a2:	2301      	movs	r3, #1
    26a4:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
    26a8:	4210      	tst	r0, r2
}
    26aa:	bf0c      	ite	eq
    26ac:	4618      	moveq	r0, r3
    26ae:	2000      	movne	r0, #0
    26b0:	4770      	bx	lr
    26b2:	bf00      	nop
    26b4:	20000028 	.word	0x20000028
    26b8:	20000068 	.word	0x20000068

000026bc <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
    26bc:	4911      	ldr	r1, [pc, #68]	; (2704 <z_impl_device_get_binding+0x48>)
{
    26be:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
    26c0:	4c11      	ldr	r4, [pc, #68]	; (2708 <z_impl_device_get_binding+0x4c>)
{
    26c2:	4605      	mov	r5, r0
    26c4:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
    26c6:	428c      	cmp	r4, r1
    26c8:	d104      	bne.n	26d4 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
    26ca:	4c0f      	ldr	r4, [pc, #60]	; (2708 <z_impl_device_get_binding+0x4c>)
    26cc:	42b4      	cmp	r4, r6
    26ce:	d10a      	bne.n	26e6 <z_impl_device_get_binding+0x2a>
	return NULL;
    26d0:	2400      	movs	r4, #0
    26d2:	e014      	b.n	26fe <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
    26d4:	4620      	mov	r0, r4
    26d6:	f7ff ffdb 	bl	2690 <z_device_ready>
    26da:	b110      	cbz	r0, 26e2 <z_impl_device_get_binding+0x26>
    26dc:	6823      	ldr	r3, [r4, #0]
    26de:	42ab      	cmp	r3, r5
    26e0:	d00d      	beq.n	26fe <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
    26e2:	3410      	adds	r4, #16
    26e4:	e7ef      	b.n	26c6 <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    26e6:	4620      	mov	r0, r4
    26e8:	f7ff ffd2 	bl	2690 <z_device_ready>
    26ec:	b908      	cbnz	r0, 26f2 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
    26ee:	3410      	adds	r4, #16
    26f0:	e7ec      	b.n	26cc <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    26f2:	6821      	ldr	r1, [r4, #0]
    26f4:	4628      	mov	r0, r5
    26f6:	f001 f9aa 	bl	3a4e <strcmp>
    26fa:	2800      	cmp	r0, #0
    26fc:	d1f7      	bne.n	26ee <z_impl_device_get_binding+0x32>
}
    26fe:	4620      	mov	r0, r4
    2700:	bd70      	pop	{r4, r5, r6, pc}
    2702:	bf00      	nop
    2704:	20000068 	.word	0x20000068
    2708:	20000028 	.word	0x20000028

0000270c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
    270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
    270e:	4e16      	ldr	r6, [pc, #88]	; (2768 <idle+0x5c>)
{
    2710:	4605      	mov	r5, r0
			cpu->pending_abort = NULL;
    2712:	2700      	movs	r7, #0
	__asm__ volatile(
    2714:	f04f 0220 	mov.w	r2, #32
    2718:	f3ef 8311 	mrs	r3, BASEPRI
    271c:	f382 8811 	msr	BASEPRI, r2
    2720:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
    2724:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
    2726:	b188      	cbz	r0, 274c <idle+0x40>
			cpu->pending_abort = NULL;
    2728:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
    272a:	f383 8811 	msr	BASEPRI, r3
    272e:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
    2732:	f000 fa89 	bl	2c48 <z_thread_single_abort>
	__asm__ volatile(
    2736:	f04f 0320 	mov.w	r3, #32
    273a:	f3ef 8011 	mrs	r0, BASEPRI
    273e:	f383 8811 	msr	BASEPRI, r3
    2742:	f3bf 8f6f 	isb	sy
    2746:	f001 fac0 	bl	3cca <z_reschedule_irqlock>
			continue;
    274a:	e7e3      	b.n	2714 <idle+0x8>
		int32_t ticks = z_get_next_timeout_expiry();
    274c:	f001 fb89 	bl	3e62 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2750:	2101      	movs	r1, #1
    2752:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
    2754:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
    2756:	bfd8      	it	le
    2758:	4608      	movle	r0, r1
    275a:	f001 fb92 	bl	3e82 <z_set_timeout_expiry>
		_kernel.idle = ticks;
    275e:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
    2760:	f7fe fed0 	bl	1504 <arch_cpu_idle>
}
    2764:	e7d6      	b.n	2714 <idle+0x8>
    2766:	bf00      	nop
    2768:	20000320 	.word	0x20000320

0000276c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    276c:	4802      	ldr	r0, [pc, #8]	; (2778 <z_bss_zero+0xc>)
    276e:	4a03      	ldr	r2, [pc, #12]	; (277c <z_bss_zero+0x10>)
    2770:	2100      	movs	r1, #0
    2772:	1a12      	subs	r2, r2, r0
    2774:	f001 b9a2 	b.w	3abc <memset>
    2778:	20000070 	.word	0x20000070
    277c:	20000778 	.word	0x20000778

00002780 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    2780:	b508      	push	{r3, lr}
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	z_sys_post_kernel = true;
    2782:	4b0a      	ldr	r3, [pc, #40]	; (27ac <bg_thread_main+0x2c>)
    2784:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2786:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    2788:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    278a:	f7ff ff59 	bl	2640 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    278e:	f000 fcdb 	bl	3148 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    2792:	2003      	movs	r0, #3
    2794:	f7ff ff54 	bl	2640 <z_sys_init_run_level>

	z_init_static_threads();
    2798:	f000 fc64 	bl	3064 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    279c:	f7fd fe18 	bl	3d0 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    27a0:	4a03      	ldr	r2, [pc, #12]	; (27b0 <bg_thread_main+0x30>)
    27a2:	7b13      	ldrb	r3, [r2, #12]
    27a4:	f023 0301 	bic.w	r3, r3, #1
    27a8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    27aa:	bd08      	pop	{r3, pc}
    27ac:	20000777 	.word	0x20000777
    27b0:	200000f0 	.word	0x200000f0

000027b4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    27b4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    27b8:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 28b0 <z_cstart+0xfc>
    27bc:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    27be:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    27c2:	4d33      	ldr	r5, [pc, #204]	; (2890 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
    27c4:	4e33      	ldr	r6, [pc, #204]	; (2894 <z_cstart+0xe0>)
    27c6:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    27c8:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 28b4 <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
    27cc:	4f32      	ldr	r7, [pc, #200]	; (2898 <z_cstart+0xe4>)
    27ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    27d2:	2400      	movs	r4, #0
    27d4:	616b      	str	r3, [r5, #20]
    27d6:	23e0      	movs	r3, #224	; 0xe0
    27d8:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    27dc:	77ec      	strb	r4, [r5, #31]
    27de:	762c      	strb	r4, [r5, #24]
    27e0:	766c      	strb	r4, [r5, #25]
    27e2:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    27e4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    27e6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    27ea:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    27ec:	f7fe ffe6 	bl	17bc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    27f0:	f7fe fe82 	bl	14f8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    27f4:	f04f 33ff 	mov.w	r3, #4294967295
    27f8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    27fa:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    27fc:	4d27      	ldr	r5, [pc, #156]	; (289c <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    27fe:	f240 1301 	movw	r3, #257	; 0x101
    2802:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    2806:	ab06      	add	r3, sp, #24
    2808:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    280a:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
    280c:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
    2810:	f7ff ff16 	bl	2640 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    2814:	2001      	movs	r0, #1
    2816:	f7ff ff13 	bl	2640 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    281a:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
    281e:	f000 fb23 	bl	2e68 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2822:	4b1f      	ldr	r3, [pc, #124]	; (28a0 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
    2824:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    2826:	491f      	ldr	r1, [pc, #124]	; (28a4 <z_cstart+0xf0>)
    2828:	9305      	str	r3, [sp, #20]
    282a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    282e:	4653      	mov	r3, sl
    2830:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    2834:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2838:	9400      	str	r4, [sp, #0]
    283a:	4630      	mov	r0, r6
    283c:	f000 fbe0 	bl	3000 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2840:	7b73      	ldrb	r3, [r6, #13]
    2842:	4680      	mov	r8, r0
    2844:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    2848:	4630      	mov	r0, r6
    284a:	7373      	strb	r3, [r6, #13]
    284c:	f001 fa69 	bl	3d22 <z_ready_thread>
	z_setup_new_thread(thread, stack,
    2850:	230f      	movs	r3, #15
    2852:	e9cd 4302 	strd	r4, r3, [sp, #8]
    2856:	4914      	ldr	r1, [pc, #80]	; (28a8 <z_cstart+0xf4>)
    2858:	4b14      	ldr	r3, [pc, #80]	; (28ac <z_cstart+0xf8>)
    285a:	f44f 72a0 	mov.w	r2, #320	; 0x140
    285e:	e9cd b404 	strd	fp, r4, [sp, #16]
    2862:	e9cd 5400 	strd	r5, r4, [sp]
    2866:	4638      	mov	r0, r7
    2868:	f000 fbca 	bl	3000 <z_setup_new_thread>
    286c:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    286e:	60ef      	str	r7, [r5, #12]
    2870:	f023 0304 	bic.w	r3, r3, #4
    2874:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    2876:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
    287a:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
    287e:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
    2880:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    2884:	4652      	mov	r2, sl
    2886:	4641      	mov	r1, r8
    2888:	4630      	mov	r0, r6
    288a:	f7fe fe1b 	bl	14c4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    288e:	bf00      	nop
    2890:	e000ed00 	.word	0xe000ed00
    2894:	200000f0 	.word	0x200000f0
    2898:	20000070 	.word	0x20000070
    289c:	20000320 	.word	0x20000320
    28a0:	00004189 	.word	0x00004189
    28a4:	20000780 	.word	0x20000780
    28a8:	20000ba0 	.word	0x20000ba0
    28ac:	0000270d 	.word	0x0000270d
    28b0:	20001520 	.word	0x20001520
    28b4:	00002781 	.word	0x00002781

000028b8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    28b8:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    28ba:	4c08      	ldr	r4, [pc, #32]	; (28dc <z_reset_time_slice+0x24>)
    28bc:	6823      	ldr	r3, [r4, #0]
    28be:	b15b      	cbz	r3, 28d8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    28c0:	f7fe fcf6 	bl	12b0 <z_clock_elapsed>
    28c4:	4603      	mov	r3, r0
    28c6:	6820      	ldr	r0, [r4, #0]
    28c8:	4a05      	ldr	r2, [pc, #20]	; (28e0 <z_reset_time_slice+0x28>)
    28ca:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    28cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    28d0:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
    28d2:	2100      	movs	r1, #0
    28d4:	f001 bad5 	b.w	3e82 <z_set_timeout_expiry>
}
    28d8:	bd10      	pop	{r4, pc}
    28da:	bf00      	nop
    28dc:	2000035c 	.word	0x2000035c
    28e0:	20000320 	.word	0x20000320

000028e4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    28e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28e6:	4605      	mov	r5, r0
    28e8:	460c      	mov	r4, r1
    28ea:	f04f 0320 	mov.w	r3, #32
    28ee:	f3ef 8611 	mrs	r6, BASEPRI
    28f2:	f383 8811 	msr	BASEPRI, r3
    28f6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    28fa:	4b0d      	ldr	r3, [pc, #52]	; (2930 <k_sched_time_slice_set+0x4c>)
    28fc:	2200      	movs	r2, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    28fe:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2902:	f240 30e7 	movw	r0, #999	; 0x3e7
    2906:	2100      	movs	r1, #0
    2908:	615a      	str	r2, [r3, #20]
    290a:	fbe7 0105 	umlal	r0, r1, r7, r5
    290e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2912:	2300      	movs	r3, #0
    2914:	f7fd fbe2 	bl	dc <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    2918:	4b06      	ldr	r3, [pc, #24]	; (2934 <k_sched_time_slice_set+0x50>)
    291a:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
    291c:	4b06      	ldr	r3, [pc, #24]	; (2938 <k_sched_time_slice_set+0x54>)
    291e:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
    2920:	f7ff ffca 	bl	28b8 <z_reset_time_slice>
	__asm__ volatile(
    2924:	f386 8811 	msr	BASEPRI, r6
    2928:	f3bf 8f6f 	isb	sy
	}
}
    292c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    292e:	bf00      	nop
    2930:	20000320 	.word	0x20000320
    2934:	2000035c 	.word	0x2000035c
    2938:	20000358 	.word	0x20000358

0000293c <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    293c:	b949      	cbnz	r1, 2952 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    293e:	f3ef 8005 	mrs	r0, IPSR
    2942:	b930      	cbnz	r0, 2952 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
    2944:	4b05      	ldr	r3, [pc, #20]	; (295c <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    2946:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2948:	689b      	ldr	r3, [r3, #8]
    294a:	429a      	cmp	r2, r3
    294c:	d001      	beq.n	2952 <z_reschedule+0x16>
	ret = arch_swap(key);
    294e:	f7fe bcf9 	b.w	1344 <arch_swap>
    2952:	f381 8811 	msr	BASEPRI, r1
    2956:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    295a:	4770      	bx	lr
    295c:	20000320 	.word	0x20000320

00002960 <k_sched_lock>:
	__asm__ volatile(
    2960:	f04f 0320 	mov.w	r3, #32
    2964:	f3ef 8111 	mrs	r1, BASEPRI
    2968:	f383 8811 	msr	BASEPRI, r3
    296c:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    2970:	4b04      	ldr	r3, [pc, #16]	; (2984 <k_sched_lock+0x24>)
    2972:	689a      	ldr	r2, [r3, #8]
    2974:	7bd3      	ldrb	r3, [r2, #15]
    2976:	3b01      	subs	r3, #1
    2978:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    297a:	f381 8811 	msr	BASEPRI, r1
    297e:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    2982:	4770      	bx	lr
    2984:	20000320 	.word	0x20000320

00002988 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
    2988:	4b09      	ldr	r3, [pc, #36]	; (29b0 <z_priq_dumb_remove+0x28>)
    298a:	f103 022c 	add.w	r2, r3, #44	; 0x2c
    298e:	4282      	cmp	r2, r0
    2990:	d105      	bne.n	299e <z_priq_dumb_remove+0x16>
    2992:	689b      	ldr	r3, [r3, #8]
    2994:	428b      	cmp	r3, r1
    2996:	d102      	bne.n	299e <z_priq_dumb_remove+0x16>
    2998:	7b4b      	ldrb	r3, [r1, #13]
    299a:	06db      	lsls	r3, r3, #27
    299c:	d106      	bne.n	29ac <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    299e:	e9d1 3200 	ldrd	r3, r2, [r1]
    29a2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    29a4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    29a6:	2300      	movs	r3, #0
	node->prev = NULL;
    29a8:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    29ac:	4770      	bx	lr
    29ae:	bf00      	nop
    29b0:	20000320 	.word	0x20000320

000029b4 <update_cache>:
{
    29b4:	b538      	push	{r3, r4, r5, lr}
    29b6:	4c12      	ldr	r4, [pc, #72]	; (2a00 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
    29b8:	6923      	ldr	r3, [r4, #16]
    29ba:	68a2      	ldr	r2, [r4, #8]
{
    29bc:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
    29be:	b10b      	cbz	r3, 29c4 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
    29c0:	68e5      	ldr	r5, [r4, #12]
    29c2:	e00c      	b.n	29de <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
    29c4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    29c8:	f001 f9a1 	bl	3d0e <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
    29cc:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
    29ce:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
    29d0:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
    29d2:	bf44      	itt	mi
    29d4:	f043 0308 	orrmi.w	r3, r3, #8
    29d8:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
    29da:	2d00      	cmp	r5, #0
    29dc:	d0f0      	beq.n	29c0 <update_cache+0xc>
	if (preempt_ok != 0) {
    29de:	b949      	cbnz	r1, 29f4 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
    29e0:	7b53      	ldrb	r3, [r2, #13]
    29e2:	06db      	lsls	r3, r3, #27
    29e4:	d106      	bne.n	29f4 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    29e6:	69ab      	ldr	r3, [r5, #24]
    29e8:	b923      	cbnz	r3, 29f4 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
    29ea:	89d3      	ldrh	r3, [r2, #14]
    29ec:	2b7f      	cmp	r3, #127	; 0x7f
    29ee:	d901      	bls.n	29f4 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
    29f0:	62a2      	str	r2, [r4, #40]	; 0x28
}
    29f2:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    29f4:	4295      	cmp	r5, r2
    29f6:	d001      	beq.n	29fc <update_cache+0x48>
			z_reset_time_slice();
    29f8:	f7ff ff5e 	bl	28b8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    29fc:	62a5      	str	r5, [r4, #40]	; 0x28
}
    29fe:	e7f8      	b.n	29f2 <update_cache+0x3e>
    2a00:	20000320 	.word	0x20000320

00002a04 <k_sched_unlock>:
{
    2a04:	b510      	push	{r4, lr}
	__asm__ volatile(
    2a06:	f04f 0320 	mov.w	r3, #32
    2a0a:	f3ef 8411 	mrs	r4, BASEPRI
    2a0e:	f383 8811 	msr	BASEPRI, r3
    2a12:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    2a16:	4b08      	ldr	r3, [pc, #32]	; (2a38 <k_sched_unlock+0x34>)
    2a18:	689a      	ldr	r2, [r3, #8]
    2a1a:	7bd3      	ldrb	r3, [r2, #15]
    2a1c:	3301      	adds	r3, #1
    2a1e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    2a20:	2000      	movs	r0, #0
    2a22:	f7ff ffc7 	bl	29b4 <update_cache>
	__asm__ volatile(
    2a26:	f384 8811 	msr	BASEPRI, r4
    2a2a:	f3bf 8f6f 	isb	sy
}
    2a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    2a32:	f001 b956 	b.w	3ce2 <z_reschedule_unlocked>
    2a36:	bf00      	nop
    2a38:	20000320 	.word	0x20000320

00002a3c <ready_thread>:
{
    2a3c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    2a3e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    2a42:	7b43      	ldrb	r3, [r0, #13]
    2a44:	2a00      	cmp	r2, #0
    2a46:	db2c      	blt.n	2aa2 <ready_thread+0x66>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    2a48:	06db      	lsls	r3, r3, #27
    2a4a:	d12a      	bne.n	2aa2 <ready_thread+0x66>

int z_abort_timeout(struct _timeout *to);

static inline bool z_is_inactive_timeout(const struct _timeout *t)
{
	return !sys_dnode_is_linked(&t->node);
    2a4c:	6983      	ldr	r3, [r0, #24]
    2a4e:	bb43      	cbnz	r3, 2aa2 <ready_thread+0x66>
	return list->head == list;
    2a50:	4a15      	ldr	r2, [pc, #84]	; (2aa8 <ready_thread+0x6c>)
    2a52:	4611      	mov	r1, r2
    2a54:	f851 4f2c 	ldr.w	r4, [r1, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2a58:	428c      	cmp	r4, r1
    2a5a:	bf18      	it	ne
    2a5c:	4623      	movne	r3, r4
    2a5e:	2b00      	cmp	r3, #0
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2a60:	6b14      	ldr	r4, [r2, #48]	; 0x30
    2a62:	bf38      	it	cc
    2a64:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2a66:	b1b3      	cbz	r3, 2a96 <ready_thread+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
    2a68:	f990 600e 	ldrsb.w	r6, [r0, #14]
    2a6c:	f993 500e 	ldrsb.w	r5, [r3, #14]
    2a70:	42ae      	cmp	r6, r5
    2a72:	db03      	blt.n	2a7c <ready_thread+0x40>
	return (node == list->tail) ? NULL : node->next;
    2a74:	42a3      	cmp	r3, r4
    2a76:	d00e      	beq.n	2a96 <ready_thread+0x5a>
    2a78:	681b      	ldr	r3, [r3, #0]
    2a7a:	e7f4      	b.n	2a66 <ready_thread+0x2a>
	node->prev = successor->prev;
    2a7c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2a7e:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
    2a82:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    2a84:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
    2a86:	7b43      	ldrb	r3, [r0, #13]
    2a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2a8c:	7343      	strb	r3, [r0, #13]
}
    2a8e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    2a90:	2000      	movs	r0, #0
    2a92:	f7ff bf8f 	b.w	29b4 <update_cache>
	node->prev = list->tail;
    2a96:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
    2a9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2a9c:	6018      	str	r0, [r3, #0]
	list->tail = node;
    2a9e:	6310      	str	r0, [r2, #48]	; 0x30
}
    2aa0:	e7f1      	b.n	2a86 <ready_thread+0x4a>
}
    2aa2:	bc70      	pop	{r4, r5, r6}
    2aa4:	4770      	bx	lr
    2aa6:	bf00      	nop
    2aa8:	20000320 	.word	0x20000320

00002aac <z_sched_start>:
{
    2aac:	b510      	push	{r4, lr}
	__asm__ volatile(
    2aae:	f04f 0220 	mov.w	r2, #32
    2ab2:	f3ef 8411 	mrs	r4, BASEPRI
    2ab6:	f382 8811 	msr	BASEPRI, r2
    2aba:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
    2abe:	7b42      	ldrb	r2, [r0, #13]
    2ac0:	0751      	lsls	r1, r2, #29
    2ac2:	d404      	bmi.n	2ace <z_sched_start+0x22>
	__asm__ volatile(
    2ac4:	f384 8811 	msr	BASEPRI, r4
    2ac8:	f3bf 8f6f 	isb	sy
}
    2acc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2ace:	f022 0204 	bic.w	r2, r2, #4
    2ad2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    2ad4:	f7ff ffb2 	bl	2a3c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    2ad8:	4621      	mov	r1, r4
    2ada:	4802      	ldr	r0, [pc, #8]	; (2ae4 <z_sched_start+0x38>)
}
    2adc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    2ae0:	f7ff bf2c 	b.w	293c <z_reschedule>
    2ae4:	20000778 	.word	0x20000778

00002ae8 <move_thread_to_end_of_prio_q>:
{
    2ae8:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    2aea:	f990 300d 	ldrsb.w	r3, [r0, #13]
    2aee:	2b00      	cmp	r3, #0
{
    2af0:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    2af2:	da02      	bge.n	2afa <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    2af4:	4817      	ldr	r0, [pc, #92]	; (2b54 <move_thread_to_end_of_prio_q+0x6c>)
    2af6:	f7ff ff47 	bl	2988 <z_priq_dumb_remove>
	return list->head == list;
    2afa:	4a17      	ldr	r2, [pc, #92]	; (2b58 <move_thread_to_end_of_prio_q+0x70>)
    2afc:	4610      	mov	r0, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2afe:	6b14      	ldr	r4, [r2, #48]	; 0x30
	return list->head == list;
    2b00:	f850 3f2c 	ldr.w	r3, [r0, #44]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2b04:	4283      	cmp	r3, r0
    2b06:	bf08      	it	eq
    2b08:	2300      	moveq	r3, #0
    2b0a:	2b00      	cmp	r3, #0
    2b0c:	bf38      	it	cc
    2b0e:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2b10:	b1d3      	cbz	r3, 2b48 <move_thread_to_end_of_prio_q+0x60>
	if (thread_1->base.prio < thread_2->base.prio) {
    2b12:	f991 600e 	ldrsb.w	r6, [r1, #14]
    2b16:	f993 500e 	ldrsb.w	r5, [r3, #14]
    2b1a:	42ae      	cmp	r6, r5
    2b1c:	db03      	blt.n	2b26 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    2b1e:	42a3      	cmp	r3, r4
    2b20:	d012      	beq.n	2b48 <move_thread_to_end_of_prio_q+0x60>
    2b22:	681b      	ldr	r3, [r3, #0]
    2b24:	e7f4      	b.n	2b10 <move_thread_to_end_of_prio_q+0x28>
	node->prev = successor->prev;
    2b26:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
    2b28:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
    2b2c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    2b2e:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
    2b30:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
    2b32:	6890      	ldr	r0, [r2, #8]
    2b34:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2b38:	734b      	strb	r3, [r1, #13]
    2b3a:	1a43      	subs	r3, r0, r1
    2b3c:	4258      	negs	r0, r3
}
    2b3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    2b42:	4158      	adcs	r0, r3
    2b44:	f7ff bf36 	b.w	29b4 <update_cache>
	node->prev = list->tail;
    2b48:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
    2b4c:	6b13      	ldr	r3, [r2, #48]	; 0x30
    2b4e:	6019      	str	r1, [r3, #0]
	list->tail = node;
    2b50:	6311      	str	r1, [r2, #48]	; 0x30
}
    2b52:	e7ed      	b.n	2b30 <move_thread_to_end_of_prio_q+0x48>
    2b54:	2000034c 	.word	0x2000034c
    2b58:	20000320 	.word	0x20000320

00002b5c <z_time_slice>:
{
    2b5c:	b570      	push	{r4, r5, r6, lr}
    2b5e:	4601      	mov	r1, r0
	__asm__ volatile(
    2b60:	f04f 0320 	mov.w	r3, #32
    2b64:	f3ef 8411 	mrs	r4, BASEPRI
    2b68:	f383 8811 	msr	BASEPRI, r3
    2b6c:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    2b70:	4b16      	ldr	r3, [pc, #88]	; (2bcc <z_time_slice+0x70>)
    2b72:	4a17      	ldr	r2, [pc, #92]	; (2bd0 <z_time_slice+0x74>)
    2b74:	6898      	ldr	r0, [r3, #8]
    2b76:	6815      	ldr	r5, [r2, #0]
    2b78:	42a8      	cmp	r0, r5
    2b7a:	461d      	mov	r5, r3
    2b7c:	d106      	bne.n	2b8c <z_time_slice+0x30>
			z_reset_time_slice();
    2b7e:	f7ff fe9b 	bl	28b8 <z_reset_time_slice>
	__asm__ volatile(
    2b82:	f384 8811 	msr	BASEPRI, r4
    2b86:	f3bf 8f6f 	isb	sy
}
    2b8a:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    2b8c:	2600      	movs	r6, #0
    2b8e:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    2b90:	4a10      	ldr	r2, [pc, #64]	; (2bd4 <z_time_slice+0x78>)
    2b92:	6812      	ldr	r2, [r2, #0]
    2b94:	b1ba      	cbz	r2, 2bc6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    2b96:	89c2      	ldrh	r2, [r0, #14]
    2b98:	2a7f      	cmp	r2, #127	; 0x7f
    2b9a:	d814      	bhi.n	2bc6 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    2b9c:	7b42      	ldrb	r2, [r0, #13]
    2b9e:	06d2      	lsls	r2, r2, #27
    2ba0:	d111      	bne.n	2bc6 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2ba2:	4a0d      	ldr	r2, [pc, #52]	; (2bd8 <z_time_slice+0x7c>)
    2ba4:	f990 600e 	ldrsb.w	r6, [r0, #14]
    2ba8:	6812      	ldr	r2, [r2, #0]
    2baa:	4296      	cmp	r6, r2
    2bac:	db0b      	blt.n	2bc6 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    2bae:	4a0b      	ldr	r2, [pc, #44]	; (2bdc <z_time_slice+0x80>)
    2bb0:	4290      	cmp	r0, r2
    2bb2:	d008      	beq.n	2bc6 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    2bb4:	695a      	ldr	r2, [r3, #20]
    2bb6:	428a      	cmp	r2, r1
    2bb8:	dc02      	bgt.n	2bc0 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
    2bba:	f7ff ff95 	bl	2ae8 <move_thread_to_end_of_prio_q>
    2bbe:	e7de      	b.n	2b7e <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
    2bc0:	1a52      	subs	r2, r2, r1
    2bc2:	615a      	str	r2, [r3, #20]
    2bc4:	e7dd      	b.n	2b82 <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
    2bc6:	2300      	movs	r3, #0
    2bc8:	616b      	str	r3, [r5, #20]
    2bca:	e7da      	b.n	2b82 <z_time_slice+0x26>
    2bcc:	20000320 	.word	0x20000320
    2bd0:	20000354 	.word	0x20000354
    2bd4:	2000035c 	.word	0x2000035c
    2bd8:	20000358 	.word	0x20000358
    2bdc:	20000070 	.word	0x20000070

00002be0 <z_impl_k_thread_suspend>:
{
    2be0:	b570      	push	{r4, r5, r6, lr}
    2be2:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2be4:	3018      	adds	r0, #24
    2be6:	f001 f926 	bl	3e36 <z_abort_timeout>
	__asm__ volatile(
    2bea:	f04f 0320 	mov.w	r3, #32
    2bee:	f3ef 8611 	mrs	r6, BASEPRI
    2bf2:	f383 8811 	msr	BASEPRI, r3
    2bf6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2bfa:	f994 300d 	ldrsb.w	r3, [r4, #13]
    2bfe:	2b00      	cmp	r3, #0
    2c00:	da07      	bge.n	2c12 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
    2c02:	480f      	ldr	r0, [pc, #60]	; (2c40 <z_impl_k_thread_suspend+0x60>)
    2c04:	4621      	mov	r1, r4
    2c06:	f7ff febf 	bl	2988 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2c0a:	7b63      	ldrb	r3, [r4, #13]
    2c0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2c10:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    2c12:	4d0c      	ldr	r5, [pc, #48]	; (2c44 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2c14:	7b63      	ldrb	r3, [r4, #13]
    2c16:	68a8      	ldr	r0, [r5, #8]
    2c18:	f043 0310 	orr.w	r3, r3, #16
    2c1c:	7363      	strb	r3, [r4, #13]
    2c1e:	1b03      	subs	r3, r0, r4
    2c20:	4258      	negs	r0, r3
    2c22:	4158      	adcs	r0, r3
    2c24:	f7ff fec6 	bl	29b4 <update_cache>
	__asm__ volatile(
    2c28:	f386 8811 	msr	BASEPRI, r6
    2c2c:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    2c30:	68ab      	ldr	r3, [r5, #8]
    2c32:	42a3      	cmp	r3, r4
    2c34:	d103      	bne.n	2c3e <z_impl_k_thread_suspend+0x5e>
}
    2c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    2c3a:	f001 b852 	b.w	3ce2 <z_reschedule_unlocked>
}
    2c3e:	bd70      	pop	{r4, r5, r6, pc}
    2c40:	2000034c 	.word	0x2000034c
    2c44:	20000320 	.word	0x20000320

00002c48 <z_thread_single_abort>:
{
    2c48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c4c:	4604      	mov	r4, r0
	__asm__ volatile(
    2c4e:	f04f 0320 	mov.w	r3, #32
    2c52:	f3ef 8211 	mrs	r2, BASEPRI
    2c56:	f383 8811 	msr	BASEPRI, r3
    2c5a:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
    2c5e:	7b43      	ldrb	r3, [r0, #13]
    2c60:	f013 0f28 	tst.w	r3, #40	; 0x28
    2c64:	d005      	beq.n	2c72 <z_thread_single_abort+0x2a>
	__asm__ volatile(
    2c66:	f382 8811 	msr	BASEPRI, r2
    2c6a:	f3bf 8f6f 	isb	sy
}
    2c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
    2c72:	f043 0320 	orr.w	r3, r3, #32
    2c76:	7343      	strb	r3, [r0, #13]
    2c78:	f382 8811 	msr	BASEPRI, r2
    2c7c:	f3bf 8f6f 	isb	sy
    2c80:	3018      	adds	r0, #24
    2c82:	f001 f8d8 	bl	3e36 <z_abort_timeout>
	__asm__ volatile(
    2c86:	f04f 0320 	mov.w	r3, #32
    2c8a:	f3ef 8611 	mrs	r6, BASEPRI
    2c8e:	f383 8811 	msr	BASEPRI, r3
    2c92:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    2c96:	7b63      	ldrb	r3, [r4, #13]
    2c98:	06d8      	lsls	r0, r3, #27
    2c9a:	d116      	bne.n	2cca <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
    2c9c:	69a2      	ldr	r2, [r4, #24]
    2c9e:	b9a2      	cbnz	r2, 2cca <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
    2ca0:	0619      	lsls	r1, r3, #24
    2ca2:	d507      	bpl.n	2cb4 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
    2ca4:	4826      	ldr	r0, [pc, #152]	; (2d40 <z_thread_single_abort+0xf8>)
    2ca6:	4621      	mov	r1, r4
    2ca8:	f7ff fe6e 	bl	2988 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2cac:	7b63      	ldrb	r3, [r4, #13]
    2cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2cb2:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
    2cb4:	4b23      	ldr	r3, [pc, #140]	; (2d44 <z_thread_single_abort+0xfc>)
    2cb6:	6898      	ldr	r0, [r3, #8]
    2cb8:	1b02      	subs	r2, r0, r4
    2cba:	4250      	negs	r0, r2
    2cbc:	4150      	adcs	r0, r2
    2cbe:	f7ff fe79 	bl	29b4 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    2cc2:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
    2cc6:	2700      	movs	r7, #0
    2cc8:	e01d      	b.n	2d06 <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
    2cca:	079b      	lsls	r3, r3, #30
    2ccc:	d5f9      	bpl.n	2cc2 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
    2cce:	68a0      	ldr	r0, [r4, #8]
    2cd0:	4621      	mov	r1, r4
    2cd2:	f7ff fe59 	bl	2988 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    2cd6:	7b63      	ldrb	r3, [r4, #13]
    2cd8:	f023 0302 	bic.w	r3, r3, #2
    2cdc:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
    2cde:	2300      	movs	r3, #0
    2ce0:	60a3      	str	r3, [r4, #8]
    2ce2:	e7ee      	b.n	2cc2 <z_thread_single_abort+0x7a>
    2ce4:	f105 0018 	add.w	r0, r5, #24
    2ce8:	f001 f8a5 	bl	3e36 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
    2cec:	68a8      	ldr	r0, [r5, #8]
    2cee:	4629      	mov	r1, r5
    2cf0:	f7ff fe4a 	bl	2988 <z_priq_dumb_remove>
    2cf4:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
    2cf6:	60af      	str	r7, [r5, #8]
    2cf8:	f023 0302 	bic.w	r3, r3, #2
    2cfc:	736b      	strb	r3, [r5, #13]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2cfe:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
    2d00:	4628      	mov	r0, r5
    2d02:	f7ff fe9b 	bl	2a3c <ready_thread>
	return list->head == list;
    2d06:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2d08:	4545      	cmp	r5, r8
    2d0a:	d001      	beq.n	2d10 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
    2d0c:	2d00      	cmp	r5, #0
    2d0e:	d1e9      	bne.n	2ce4 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
    2d10:	4b0c      	ldr	r3, [pc, #48]	; (2d44 <z_thread_single_abort+0xfc>)
    2d12:	689a      	ldr	r2, [r3, #8]
    2d14:	4b0c      	ldr	r3, [pc, #48]	; (2d48 <z_thread_single_abort+0x100>)
    2d16:	429a      	cmp	r2, r3
    2d18:	d102      	bne.n	2d20 <z_thread_single_abort+0xd8>
			update_cache(1);
    2d1a:	2001      	movs	r0, #1
    2d1c:	f7ff fe4a 	bl	29b4 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
    2d20:	7b63      	ldrb	r3, [r4, #13]
    2d22:	f043 0308 	orr.w	r3, r3, #8
    2d26:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
    2d28:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
    2d2a:	f386 8811 	msr	BASEPRI, r6
    2d2e:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
    2d32:	2b00      	cmp	r3, #0
    2d34:	d09b      	beq.n	2c6e <z_thread_single_abort+0x26>
		fn_abort(thread);
    2d36:	4620      	mov	r0, r4
}
    2d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
    2d3c:	4718      	bx	r3
    2d3e:	bf00      	nop
    2d40:	2000034c 	.word	0x2000034c
    2d44:	20000320 	.word	0x20000320
    2d48:	20000070 	.word	0x20000070

00002d4c <unready_thread>:
{
    2d4c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    2d4e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    2d52:	2b00      	cmp	r3, #0
{
    2d54:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    2d56:	da06      	bge.n	2d66 <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
    2d58:	4807      	ldr	r0, [pc, #28]	; (2d78 <unready_thread+0x2c>)
    2d5a:	f7ff fe15 	bl	2988 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
    2d5e:	7b4b      	ldrb	r3, [r1, #13]
    2d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2d64:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
    2d66:	4b05      	ldr	r3, [pc, #20]	; (2d7c <unready_thread+0x30>)
    2d68:	6898      	ldr	r0, [r3, #8]
    2d6a:	1a43      	subs	r3, r0, r1
    2d6c:	4258      	negs	r0, r3
    2d6e:	4158      	adcs	r0, r3
}
    2d70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    2d74:	f7ff be1e 	b.w	29b4 <update_cache>
    2d78:	2000034c 	.word	0x2000034c
    2d7c:	20000320 	.word	0x20000320

00002d80 <pend>:
{
    2d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d84:	4606      	mov	r6, r0
    2d86:	4614      	mov	r4, r2
    2d88:	461d      	mov	r5, r3
	__asm__ volatile(
    2d8a:	f04f 0320 	mov.w	r3, #32
    2d8e:	f3ef 8711 	mrs	r7, BASEPRI
    2d92:	f383 8811 	msr	BASEPRI, r3
    2d96:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    2d9a:	f000 fff2 	bl	3d82 <add_to_waitq_locked>
	__asm__ volatile(
    2d9e:	f387 8811 	msr	BASEPRI, r7
    2da2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2da6:	1c6b      	adds	r3, r5, #1
    2da8:	bf08      	it	eq
    2daa:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    2dae:	d008      	beq.n	2dc2 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2db0:	4622      	mov	r2, r4
    2db2:	462b      	mov	r3, r5
    2db4:	f106 0018 	add.w	r0, r6, #24
    2db8:	4903      	ldr	r1, [pc, #12]	; (2dc8 <pend+0x48>)
}
    2dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2dbe:	f000 ba39 	b.w	3234 <z_add_timeout>
    2dc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2dc6:	bf00      	nop
    2dc8:	00003d43 	.word	0x00003d43

00002dcc <z_pend_curr>:
{
    2dcc:	b510      	push	{r4, lr}
	pending_current = _current;
    2dce:	4b07      	ldr	r3, [pc, #28]	; (2dec <z_pend_curr+0x20>)
    2dd0:	6898      	ldr	r0, [r3, #8]
    2dd2:	4b07      	ldr	r3, [pc, #28]	; (2df0 <z_pend_curr+0x24>)
{
    2dd4:	460c      	mov	r4, r1
	pending_current = _current;
    2dd6:	6018      	str	r0, [r3, #0]
{
    2dd8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    2dda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2dde:	f7ff ffcf 	bl	2d80 <pend>
    2de2:	4620      	mov	r0, r4
}
    2de4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2de8:	f7fe baac 	b.w	1344 <arch_swap>
    2dec:	20000320 	.word	0x20000320
    2df0:	20000354 	.word	0x20000354

00002df4 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
    2df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2df8:	4605      	mov	r5, r0
    2dfa:	460f      	mov	r7, r1
		return 0;
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);

	expected_wakeup_ticks = ticks + z_tick_get_32();
    2dfc:	f001 f85b 	bl	3eb6 <z_tick_get_32>
    2e00:	4604      	mov	r4, r0
	__asm__ volatile(
    2e02:	f04f 0320 	mov.w	r3, #32
    2e06:	f3ef 8811 	mrs	r8, BASEPRI
    2e0a:	f383 8811 	msr	BASEPRI, r3
    2e0e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    2e12:	4e12      	ldr	r6, [pc, #72]	; (2e5c <z_tick_sleep.part.0+0x68>)
    2e14:	4b12      	ldr	r3, [pc, #72]	; (2e60 <z_tick_sleep.part.0+0x6c>)
    2e16:	68b0      	ldr	r0, [r6, #8]
    2e18:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    2e1a:	f7ff ff97 	bl	2d4c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    2e1e:	68b0      	ldr	r0, [r6, #8]
    2e20:	4910      	ldr	r1, [pc, #64]	; (2e64 <z_tick_sleep.part.0+0x70>)
    2e22:	462a      	mov	r2, r5
    2e24:	463b      	mov	r3, r7
    2e26:	3018      	adds	r0, #24
    2e28:	f000 fa04 	bl	3234 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    2e2c:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2e2e:	7b53      	ldrb	r3, [r2, #13]
    2e30:	f043 0310 	orr.w	r3, r3, #16
    2e34:	7353      	strb	r3, [r2, #13]
    2e36:	4640      	mov	r0, r8
    2e38:	f7fe fa84 	bl	1344 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    2e3c:	f001 f83b 	bl	3eb6 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
    2e40:	442c      	add	r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    2e42:	1a24      	subs	r4, r4, r0
    2e44:	f04f 0500 	mov.w	r5, #0
    2e48:	f165 0500 	sbc.w	r5, r5, #0
    2e4c:	2c00      	cmp	r4, #0
    2e4e:	f175 0300 	sbcs.w	r3, r5, #0
    2e52:	bfb8      	it	lt
    2e54:	2400      	movlt	r4, #0
		return ticks;
	}
#endif

	return 0;
}
    2e56:	4620      	mov	r0, r4
    2e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e5c:	20000320 	.word	0x20000320
    2e60:	20000354 	.word	0x20000354
    2e64:	00003d43 	.word	0x00003d43

00002e68 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    2e68:	4b04      	ldr	r3, [pc, #16]	; (2e7c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2e6a:	2100      	movs	r1, #0
    2e6c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
    2e70:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
    2e74:	4608      	mov	r0, r1
    2e76:	f7ff bd35 	b.w	28e4 <k_sched_time_slice_set>
    2e7a:	bf00      	nop
    2e7c:	20000320 	.word	0x20000320

00002e80 <z_impl_k_yield>:
{
    2e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    2e82:	4c24      	ldr	r4, [pc, #144]	; (2f14 <z_impl_k_yield+0x94>)
    2e84:	4b24      	ldr	r3, [pc, #144]	; (2f18 <z_impl_k_yield+0x98>)
    2e86:	68a2      	ldr	r2, [r4, #8]
    2e88:	429a      	cmp	r2, r3
    2e8a:	d030      	beq.n	2eee <z_impl_k_yield+0x6e>
    2e8c:	f04f 0320 	mov.w	r3, #32
    2e90:	f3ef 8511 	mrs	r5, BASEPRI
    2e94:	f383 8811 	msr	BASEPRI, r3
    2e98:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
    2e9c:	68a1      	ldr	r1, [r4, #8]
    2e9e:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    2ea2:	f7ff fd71 	bl	2988 <z_priq_dumb_remove>
	return list->head == list;
    2ea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
    2ea8:	68a2      	ldr	r2, [r4, #8]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    2eaa:	6b21      	ldr	r1, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2eac:	4283      	cmp	r3, r0
    2eae:	bf08      	it	eq
    2eb0:	2300      	moveq	r3, #0
    2eb2:	2b00      	cmp	r3, #0
    2eb4:	bf38      	it	cc
    2eb6:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2eb8:	b32b      	cbz	r3, 2f06 <z_impl_k_yield+0x86>
	if (thread_1->base.prio < thread_2->base.prio) {
    2eba:	f992 700e 	ldrsb.w	r7, [r2, #14]
    2ebe:	f993 600e 	ldrsb.w	r6, [r3, #14]
    2ec2:	42b7      	cmp	r7, r6
    2ec4:	db03      	blt.n	2ece <z_impl_k_yield+0x4e>
	return (node == list->tail) ? NULL : node->next;
    2ec6:	428b      	cmp	r3, r1
    2ec8:	d01d      	beq.n	2f06 <z_impl_k_yield+0x86>
    2eca:	681b      	ldr	r3, [r3, #0]
    2ecc:	e7f4      	b.n	2eb8 <z_impl_k_yield+0x38>
	node->prev = successor->prev;
    2ece:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    2ed0:	e9c2 3100 	strd	r3, r1, [r2]
	successor->prev->next = node;
    2ed4:	600a      	str	r2, [r1, #0]
	successor->prev = node;
    2ed6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state |= states;
    2ed8:	7b53      	ldrb	r3, [r2, #13]
    2eda:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2ede:	7353      	strb	r3, [r2, #13]
			update_cache(1);
    2ee0:	2001      	movs	r0, #1
    2ee2:	f7ff fd67 	bl	29b4 <update_cache>
	__asm__ volatile(
    2ee6:	f385 8811 	msr	BASEPRI, r5
    2eea:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    2eee:	f04f 0320 	mov.w	r3, #32
    2ef2:	f3ef 8011 	mrs	r0, BASEPRI
    2ef6:	f383 8811 	msr	BASEPRI, r3
    2efa:	f3bf 8f6f 	isb	sy
}
    2efe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2f02:	f7fe ba1f 	b.w	1344 <arch_swap>
	node->prev = list->tail;
    2f06:	e9c2 0100 	strd	r0, r1, [r2]
	list->tail->next = node;
    2f0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    2f0c:	601a      	str	r2, [r3, #0]
	list->tail = node;
    2f0e:	6322      	str	r2, [r4, #48]	; 0x30
}
    2f10:	e7e2      	b.n	2ed8 <z_impl_k_yield+0x58>
    2f12:	bf00      	nop
    2f14:	20000320 	.word	0x20000320
    2f18:	20000070 	.word	0x20000070

00002f1c <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2f1c:	f1b1 3fff 	cmp.w	r1, #4294967295
    2f20:	bf08      	it	eq
    2f22:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    2f26:	b508      	push	{r3, lr}
    2f28:	4602      	mov	r2, r0
    2f2a:	460b      	mov	r3, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2f2c:	d106      	bne.n	2f3c <z_impl_k_sleep+0x20>
		k_thread_suspend(_current);
    2f2e:	4b0b      	ldr	r3, [pc, #44]	; (2f5c <z_impl_k_sleep+0x40>)
    2f30:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    2f32:	f7ff fe55 	bl	2be0 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    2f36:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    2f3a:	bd08      	pop	{r3, pc}
	if (ticks == 0) {
    2f3c:	4313      	orrs	r3, r2
    2f3e:	d10a      	bne.n	2f56 <z_impl_k_sleep+0x3a>
	z_impl_k_yield();
    2f40:	f7ff ff9e 	bl	2e80 <z_impl_k_yield>
		return 0;
    2f44:	2000      	movs	r0, #0
		} else {
			return (t * to_hz + off) / from_hz;
    2f46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2f4a:	fb80 2303 	smull	r2, r3, r0, r3
    2f4e:	0bd0      	lsrs	r0, r2, #15
    2f50:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    2f54:	e7f1      	b.n	2f3a <z_impl_k_sleep+0x1e>
    2f56:	f7ff ff4d 	bl	2df4 <z_tick_sleep.part.0>
    2f5a:	e7f4      	b.n	2f46 <z_impl_k_sleep+0x2a>
    2f5c:	20000320 	.word	0x20000320

00002f60 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    2f60:	4b01      	ldr	r3, [pc, #4]	; (2f68 <z_impl_k_current_get+0x8>)
    2f62:	6898      	ldr	r0, [r3, #8]
    2f64:	4770      	bx	lr
    2f66:	bf00      	nop
    2f68:	20000320 	.word	0x20000320

00002f6c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    2f6c:	b538      	push	{r3, r4, r5, lr}
    2f6e:	4604      	mov	r4, r0
    2f70:	f04f 0320 	mov.w	r3, #32
    2f74:	f3ef 8511 	mrs	r5, BASEPRI
    2f78:	f383 8811 	msr	BASEPRI, r3
    2f7c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    2f80:	f000 ff2a 	bl	3dd8 <z_unpend_first_thread>

	if (thread != NULL) {
    2f84:	b148      	cbz	r0, 2f9a <z_impl_k_sem_give+0x2e>
    2f86:	2200      	movs	r2, #0
    2f88:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    2f8a:	f000 feca 	bl	3d22 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    2f8e:	4629      	mov	r1, r5
    2f90:	4805      	ldr	r0, [pc, #20]	; (2fa8 <z_impl_k_sem_give+0x3c>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    2f92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    2f96:	f7ff bcd1 	b.w	293c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2f9a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2f9e:	429a      	cmp	r2, r3
    2fa0:	bf18      	it	ne
    2fa2:	3301      	addne	r3, #1
    2fa4:	60a3      	str	r3, [r4, #8]
		handle_poll_events(sem);
    2fa6:	e7f2      	b.n	2f8e <z_impl_k_sem_give+0x22>
    2fa8:	20000778 	.word	0x20000778

00002fac <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    2fac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    2fae:	4614      	mov	r4, r2
    2fb0:	461d      	mov	r5, r3
    2fb2:	f04f 0320 	mov.w	r3, #32
    2fb6:	f3ef 8111 	mrs	r1, BASEPRI
    2fba:	f383 8811 	msr	BASEPRI, r3
    2fbe:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    2fc2:	6883      	ldr	r3, [r0, #8]
    2fc4:	b143      	cbz	r3, 2fd8 <z_impl_k_sem_take+0x2c>
		sem->count--;
    2fc6:	3b01      	subs	r3, #1
    2fc8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    2fca:	f381 8811 	msr	BASEPRI, r1
    2fce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    2fd2:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    2fd4:	b003      	add	sp, #12
    2fd6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2fd8:	ea54 0305 	orrs.w	r3, r4, r5
    2fdc:	d106      	bne.n	2fec <z_impl_k_sem_take+0x40>
    2fde:	f381 8811 	msr	BASEPRI, r1
    2fe2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    2fe6:	f06f 000f 	mvn.w	r0, #15
    2fea:	e7f3      	b.n	2fd4 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2fec:	4602      	mov	r2, r0
    2fee:	e9cd 4500 	strd	r4, r5, [sp]
    2ff2:	4802      	ldr	r0, [pc, #8]	; (2ffc <z_impl_k_sem_take+0x50>)
    2ff4:	f7ff feea 	bl	2dcc <z_pend_curr>
	return ret;
    2ff8:	e7ec      	b.n	2fd4 <z_impl_k_sem_take+0x28>
    2ffa:	bf00      	nop
    2ffc:	20000778 	.word	0x20000778

00003000 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    3000:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
    3004:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
    3008:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
    300c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    300e:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    3010:	2504      	movs	r5, #4
    3012:	7345      	strb	r5, [r0, #13]
{
    3014:	460f      	mov	r7, r1

	thread_base->prio = priority;
    3016:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    3018:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    301a:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
    301c:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    301e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
    3020:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3022:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    3026:	3720      	adds	r7, #32
	node->prev = NULL;
    3028:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    302c:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	new_thread->stack_info.delta = delta;
    3030:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    3032:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3036:	9202      	str	r2, [sp, #8]
    3038:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    303a:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    303c:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    303e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    3040:	9200      	str	r2, [sp, #0]
    3042:	4642      	mov	r2, r8
{
    3044:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    3046:	f7fe fa07 	bl	1458 <arch_new_thread>
	if (!_current) {
    304a:	4b05      	ldr	r3, [pc, #20]	; (3060 <z_setup_new_thread+0x60>)
    304c:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
    304e:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
    3052:	b103      	cbz	r3, 3056 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    3054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    3056:	6763      	str	r3, [r4, #116]	; 0x74
}
    3058:	4640      	mov	r0, r8
    305a:	b004      	add	sp, #16
    305c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3060:	20000320 	.word	0x20000320

00003064 <z_init_static_threads>:
{
    3064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    3068:	4e2a      	ldr	r6, [pc, #168]	; (3114 <z_init_static_threads+0xb0>)
    306a:	4d2b      	ldr	r5, [pc, #172]	; (3118 <z_init_static_threads+0xb4>)
{
    306c:	b086      	sub	sp, #24
    306e:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
    3070:	42b5      	cmp	r5, r6
    3072:	f105 0430 	add.w	r4, r5, #48	; 0x30
    3076:	d310      	bcc.n	309a <z_init_static_threads+0x36>
	k_sched_lock();
    3078:	f7ff fc72 	bl	2960 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    307c:	4c26      	ldr	r4, [pc, #152]	; (3118 <z_init_static_threads+0xb4>)
    307e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 311c <z_init_static_threads+0xb8>
    3082:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    3086:	f240 36e7 	movw	r6, #999	; 0x3e7
    308a:	2700      	movs	r7, #0
    308c:	4544      	cmp	r4, r8
    308e:	d321      	bcc.n	30d4 <z_init_static_threads+0x70>
}
    3090:	b006      	add	sp, #24
    3092:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
    3096:	f7ff bcb5 	b.w	2a04 <k_sched_unlock>
		z_setup_new_thread(
    309a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    309e:	9305      	str	r3, [sp, #20]
    30a0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    30a4:	9304      	str	r3, [sp, #16]
    30a6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    30aa:	9303      	str	r3, [sp, #12]
    30ac:	f854 3c18 	ldr.w	r3, [r4, #-24]
    30b0:	9302      	str	r3, [sp, #8]
    30b2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    30b6:	9301      	str	r3, [sp, #4]
    30b8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    30bc:	9300      	str	r3, [sp, #0]
    30be:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    30c2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    30c6:	f7ff ff9b 	bl	3000 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    30ca:	f854 3c30 	ldr.w	r3, [r4, #-48]
    30ce:	65dd      	str	r5, [r3, #92]	; 0x5c
    30d0:	4625      	mov	r5, r4
    30d2:	e7cd      	b.n	3070 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    30d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    30d6:	1c5a      	adds	r2, r3, #1
    30d8:	d00d      	beq.n	30f6 <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
    30da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    30de:	4630      	mov	r0, r6
    30e0:	4639      	mov	r1, r7
    30e2:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    30e6:	42b9      	cmp	r1, r7
    30e8:	bf08      	it	eq
    30ea:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
    30ec:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    30ee:	d104      	bne.n	30fa <z_init_static_threads+0x96>
	z_sched_start(thread);
    30f0:	4628      	mov	r0, r5
    30f2:	f7ff fcdb 	bl	2aac <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    30f6:	3430      	adds	r4, #48	; 0x30
    30f8:	e7c8      	b.n	308c <z_init_static_threads+0x28>
    30fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    30fe:	2300      	movs	r3, #0
    3100:	f7fc ffec 	bl	dc <__aeabi_uldivmod>
    3104:	4602      	mov	r2, r0
    3106:	460b      	mov	r3, r1
    3108:	f105 0018 	add.w	r0, r5, #24
    310c:	4651      	mov	r1, sl
    310e:	f000 f891 	bl	3234 <z_add_timeout>
    3112:	e7f0      	b.n	30f6 <z_init_static_threads+0x92>
    3114:	2000006c 	.word	0x2000006c
    3118:	2000006c 	.word	0x2000006c
    311c:	00003d43 	.word	0x00003d43

00003120 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
    3120:	b508      	push	{r3, lr}
	__asm__ volatile(
    3122:	f04f 0320 	mov.w	r3, #32
    3126:	f3ef 8411 	mrs	r4, BASEPRI
    312a:	f383 8811 	msr	BASEPRI, r3
    312e:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
    3132:	4b04      	ldr	r3, [pc, #16]	; (3144 <z_self_abort+0x24>)
    3134:	6898      	ldr	r0, [r3, #8]
    3136:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
    3138:	f7ff fd52 	bl	2be0 <z_impl_k_thread_suspend>
    313c:	4620      	mov	r0, r4
    313e:	f7fe f901 	bl	1344 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3142:	bf00      	nop
    3144:	20000320 	.word	0x20000320

00003148 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3148:	4a02      	ldr	r2, [pc, #8]	; (3154 <boot_banner+0xc>)
    314a:	4903      	ldr	r1, [pc, #12]	; (3158 <boot_banner+0x10>)
    314c:	4803      	ldr	r0, [pc, #12]	; (315c <boot_banner+0x14>)
    314e:	f000 b9b9 	b.w	34c4 <printk>
    3152:	bf00      	nop
    3154:	00004135 	.word	0x00004135
    3158:	0000418e 	.word	0x0000418e
    315c:	0000419b 	.word	0x0000419b

00003160 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    3160:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    3162:	4806      	ldr	r0, [pc, #24]	; (317c <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3164:	4a06      	ldr	r2, [pc, #24]	; (3180 <z_data_copy+0x20>)
    3166:	4907      	ldr	r1, [pc, #28]	; (3184 <z_data_copy+0x24>)
    3168:	1a12      	subs	r2, r2, r0
    316a:	f000 fc7c 	bl	3a66 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    316e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    3172:	4a05      	ldr	r2, [pc, #20]	; (3188 <z_data_copy+0x28>)
    3174:	4905      	ldr	r1, [pc, #20]	; (318c <z_data_copy+0x2c>)
    3176:	4806      	ldr	r0, [pc, #24]	; (3190 <z_data_copy+0x30>)
    3178:	f000 bc75 	b.w	3a66 <memcpy>
    317c:	20000000 	.word	0x20000000
    3180:	2000006c 	.word	0x2000006c
    3184:	000041c4 	.word	0x000041c4
    3188:	00000000 	.word	0x00000000
    318c:	000041c4 	.word	0x000041c4
    3190:	20000000 	.word	0x20000000

00003194 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    3194:	4b03      	ldr	r3, [pc, #12]	; (31a4 <elapsed+0x10>)
    3196:	681b      	ldr	r3, [r3, #0]
    3198:	b90b      	cbnz	r3, 319e <elapsed+0xa>
    319a:	f7fe b889 	b.w	12b0 <z_clock_elapsed>
}
    319e:	2000      	movs	r0, #0
    31a0:	4770      	bx	lr
    31a2:	bf00      	nop
    31a4:	20000360 	.word	0x20000360

000031a8 <remove_timeout>:
{
    31a8:	b530      	push	{r4, r5, lr}
    31aa:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    31ac:	b168      	cbz	r0, 31ca <remove_timeout+0x22>
    31ae:	4a0a      	ldr	r2, [pc, #40]	; (31d8 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    31b0:	6852      	ldr	r2, [r2, #4]
    31b2:	4290      	cmp	r0, r2
    31b4:	d009      	beq.n	31ca <remove_timeout+0x22>
	if (next(t) != NULL) {
    31b6:	b143      	cbz	r3, 31ca <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    31b8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    31bc:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    31c0:	1912      	adds	r2, r2, r4
    31c2:	eb45 0101 	adc.w	r1, r5, r1
    31c6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
    31ca:	6842      	ldr	r2, [r0, #4]
    31cc:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
    31ce:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    31d0:	2300      	movs	r3, #0
	node->prev = NULL;
    31d2:	e9c0 3300 	strd	r3, r3, [r0]
}
    31d6:	bd30      	pop	{r4, r5, pc}
    31d8:	20000020 	.word	0x20000020

000031dc <next_timeout>:

static int32_t next_timeout(void)
{
    31dc:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    31de:	4b13      	ldr	r3, [pc, #76]	; (322c <next_timeout+0x50>)
    31e0:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    31e2:	429c      	cmp	r4, r3
    31e4:	bf08      	it	eq
    31e6:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    31e8:	f7ff ffd4 	bl	3194 <elapsed>
    31ec:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    31ee:	b1bc      	cbz	r4, 3220 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    31f0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    31f4:	1b40      	subs	r0, r0, r5
    31f6:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    31fa:	2801      	cmp	r0, #1
    31fc:	f171 0300 	sbcs.w	r3, r1, #0
    3200:	db11      	blt.n	3226 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    3202:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    3206:	2300      	movs	r3, #0
    3208:	4282      	cmp	r2, r0
    320a:	eb73 0401 	sbcs.w	r4, r3, r1
    320e:	da00      	bge.n	3212 <next_timeout+0x36>
    3210:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    3212:	4b07      	ldr	r3, [pc, #28]	; (3230 <next_timeout+0x54>)
    3214:	695b      	ldr	r3, [r3, #20]
    3216:	b113      	cbz	r3, 321e <next_timeout+0x42>
    3218:	4298      	cmp	r0, r3
    321a:	bfa8      	it	ge
    321c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    321e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    3220:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    3224:	e7f5      	b.n	3212 <next_timeout+0x36>
    3226:	2000      	movs	r0, #0
    3228:	e7f3      	b.n	3212 <next_timeout+0x36>
    322a:	bf00      	nop
    322c:	20000020 	.word	0x20000020
    3230:	20000320 	.word	0x20000320

00003234 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    3234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3238:	9101      	str	r1, [sp, #4]
    323a:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    323c:	1c4b      	adds	r3, r1, #1
    323e:	bf08      	it	eq
    3240:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    3244:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3246:	d071      	beq.n	332c <z_add_timeout+0xf8>

#ifdef KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
    3248:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    324a:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
    324e:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    3252:	f04f 3bff 	mov.w	fp, #4294967295
    3256:	ebb3 0804 	subs.w	r8, r3, r4
    325a:	eb6b 0905 	sbc.w	r9, fp, r5
    325e:	f1b8 0f00 	cmp.w	r8, #0
    3262:	f179 0300 	sbcs.w	r3, r9, #0
    3266:	db0f      	blt.n	3288 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
    3268:	f7ff ff94 	bl	3194 <elapsed>
    326c:	4a36      	ldr	r2, [pc, #216]	; (3348 <z_add_timeout+0x114>)
    326e:	e9d2 1c00 	ldrd	r1, ip, [r2]
    3272:	f06f 0301 	mvn.w	r3, #1
    3276:	1a5b      	subs	r3, r3, r1
    3278:	eb6b 020c 	sbc.w	r2, fp, ip
    327c:	1b1e      	subs	r6, r3, r4
    327e:	eb62 0705 	sbc.w	r7, r2, r5
    3282:	1a34      	subs	r4, r6, r0
    3284:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    3288:	9b01      	ldr	r3, [sp, #4]
    328a:	f8ca 3008 	str.w	r3, [sl, #8]
    328e:	f04f 0320 	mov.w	r3, #32
    3292:	f3ef 8611 	mrs	r6, BASEPRI
    3296:	f383 8811 	msr	BASEPRI, r3
    329a:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    329e:	f7ff ff79 	bl	3194 <elapsed>
	ticks = MAX(1, ticks);
    32a2:	2c01      	cmp	r4, #1
    32a4:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
    32a8:	4b28      	ldr	r3, [pc, #160]	; (334c <z_add_timeout+0x118>)
    32aa:	bfb8      	it	lt
    32ac:	2401      	movlt	r4, #1
    32ae:	681a      	ldr	r2, [r3, #0]
    32b0:	bfb8      	it	lt
    32b2:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
    32b4:	1824      	adds	r4, r4, r0
    32b6:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    32ba:	429a      	cmp	r2, r3
    32bc:	e9ca 4504 	strd	r4, r5, [sl, #16]
    32c0:	d001      	beq.n	32c6 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    32c2:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
    32c4:	b952      	cbnz	r2, 32dc <z_add_timeout+0xa8>
	node->prev = list->tail;
    32c6:	685a      	ldr	r2, [r3, #4]
    32c8:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
    32cc:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    32ce:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
    32d2:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    32d6:	f8c3 a004 	str.w	sl, [r3, #4]
}
    32da:	e014      	b.n	3306 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
    32dc:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
    32e0:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    32e4:	4544      	cmp	r4, r8
    32e6:	eb75 0109 	sbcs.w	r1, r5, r9
    32ea:	da22      	bge.n	3332 <z_add_timeout+0xfe>
				t->dticks -= to->dticks;
    32ec:	ebb8 0004 	subs.w	r0, r8, r4
    32f0:	eb69 0105 	sbc.w	r1, r9, r5
    32f4:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
    32f8:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    32fa:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
    32fe:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    3302:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
    3306:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3308:	429a      	cmp	r2, r3
    330a:	d00b      	beq.n	3324 <z_add_timeout+0xf0>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    330c:	4592      	cmp	sl, r2
    330e:	d109      	bne.n	3324 <z_add_timeout+0xf0>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    3310:	f7ff ff64 	bl	31dc <next_timeout>

			if (next_time == 0 ||
    3314:	b118      	cbz	r0, 331e <z_add_timeout+0xea>
			    _current_cpu->slice_ticks != next_time) {
    3316:	4b0e      	ldr	r3, [pc, #56]	; (3350 <z_add_timeout+0x11c>)
			if (next_time == 0 ||
    3318:	695b      	ldr	r3, [r3, #20]
    331a:	4283      	cmp	r3, r0
    331c:	d002      	beq.n	3324 <z_add_timeout+0xf0>
				z_clock_set_timeout(next_time, false);
    331e:	2100      	movs	r1, #0
    3320:	f7fd ff94 	bl	124c <z_clock_set_timeout>
	__asm__ volatile(
    3324:	f386 8811 	msr	BASEPRI, r6
    3328:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    332c:	b003      	add	sp, #12
    332e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    3332:	ebb4 0008 	subs.w	r0, r4, r8
    3336:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
    333a:	42ba      	cmp	r2, r7
    333c:	e9ca 0104 	strd	r0, r1, [sl, #16]
    3340:	d0c1      	beq.n	32c6 <z_add_timeout+0x92>
    3342:	6812      	ldr	r2, [r2, #0]
    3344:	e7be      	b.n	32c4 <z_add_timeout+0x90>
    3346:	bf00      	nop
    3348:	20000170 	.word	0x20000170
    334c:	20000020 	.word	0x20000020
    3350:	20000320 	.word	0x20000320

00003354 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    3354:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3358:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    335a:	f7ff fbff 	bl	2b5c <z_time_slice>
	__asm__ volatile(
    335e:	f04f 0320 	mov.w	r3, #32
    3362:	f3ef 8411 	mrs	r4, BASEPRI
    3366:	f383 8811 	msr	BASEPRI, r3
    336a:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    336e:	4d2c      	ldr	r5, [pc, #176]	; (3420 <z_clock_announce+0xcc>)
    3370:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 3424 <z_clock_announce+0xd0>
	return list->head == list;
    3374:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 3428 <z_clock_announce+0xd4>
    3378:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    337a:	4651      	mov	r1, sl
    337c:	f8d5 c000 	ldr.w	ip, [r5]
    3380:	f8db 0000 	ldr.w	r0, [fp]
    3384:	4662      	mov	r2, ip
    3386:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3388:	4558      	cmp	r0, fp
    338a:	e9da 8900 	ldrd	r8, r9, [sl]
    338e:	e9cd 2300 	strd	r2, r3, [sp]
    3392:	d00d      	beq.n	33b0 <z_clock_announce+0x5c>
    3394:	b160      	cbz	r0, 33b0 <z_clock_announce+0x5c>
    3396:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    339a:	45b4      	cmp	ip, r6
    339c:	41bb      	sbcs	r3, r7
    339e:	da1e      	bge.n	33de <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    33a0:	9b00      	ldr	r3, [sp, #0]
    33a2:	ebb6 0c03 	subs.w	ip, r6, r3
    33a6:	9b01      	ldr	r3, [sp, #4]
    33a8:	eb67 0603 	sbc.w	r6, r7, r3
    33ac:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
    33b0:	9b00      	ldr	r3, [sp, #0]
    33b2:	eb13 0208 	adds.w	r2, r3, r8
    33b6:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
    33b8:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
    33bc:	eb43 0309 	adc.w	r3, r3, r9
    33c0:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
    33c4:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
    33c6:	f7ff ff09 	bl	31dc <next_timeout>
    33ca:	4631      	mov	r1, r6
    33cc:	f7fd ff3e 	bl	124c <z_clock_set_timeout>
	__asm__ volatile(
    33d0:	f384 8811 	msr	BASEPRI, r4
    33d4:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    33d8:	b003      	add	sp, #12
    33da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    33de:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
    33e2:	f04f 0200 	mov.w	r2, #0
    33e6:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    33ea:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
    33ee:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
    33f2:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
    33f6:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
    33fa:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
    33fc:	f7ff fed4 	bl	31a8 <remove_timeout>
    3400:	f384 8811 	msr	BASEPRI, r4
    3404:	f3bf 8f6f 	isb	sy
		t->fn(t);
    3408:	6883      	ldr	r3, [r0, #8]
    340a:	4798      	blx	r3
	__asm__ volatile(
    340c:	f04f 0320 	mov.w	r3, #32
    3410:	f3ef 8411 	mrs	r4, BASEPRI
    3414:	f383 8811 	msr	BASEPRI, r3
    3418:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
    341c:	4901      	ldr	r1, [pc, #4]	; (3424 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    341e:	e7ad      	b.n	337c <z_clock_announce+0x28>
    3420:	20000360 	.word	0x20000360
    3424:	20000170 	.word	0x20000170
    3428:	20000020 	.word	0x20000020

0000342c <z_tick_get>:

int64_t z_tick_get(void)
{
    342c:	b510      	push	{r4, lr}
    342e:	f04f 0320 	mov.w	r3, #32
    3432:	f3ef 8411 	mrs	r4, BASEPRI
    3436:	f383 8811 	msr	BASEPRI, r3
    343a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    343e:	f7fd ff37 	bl	12b0 <z_clock_elapsed>
    3442:	4b06      	ldr	r3, [pc, #24]	; (345c <z_tick_get+0x30>)
    3444:	e9d3 2300 	ldrd	r2, r3, [r3]
    3448:	1812      	adds	r2, r2, r0
    344a:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    344e:	f384 8811 	msr	BASEPRI, r4
    3452:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3456:	4610      	mov	r0, r2
    3458:	4619      	mov	r1, r3
    345a:	bd10      	pop	{r4, pc}
    345c:	20000170 	.word	0x20000170

00003460 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
    3460:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3462:	4c06      	ldr	r4, [pc, #24]	; (347c <statics_init+0x1c>)
    3464:	4d06      	ldr	r5, [pc, #24]	; (3480 <statics_init+0x20>)
    3466:	42ac      	cmp	r4, r5
    3468:	d301      	bcc.n	346e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
    346a:	2000      	movs	r0, #0
    346c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    346e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    3472:	4620      	mov	r0, r4
    3474:	f000 fd23 	bl	3ebe <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
    3478:	3414      	adds	r4, #20
    347a:	e7f4      	b.n	3466 <statics_init+0x6>
    347c:	2000006c 	.word	0x2000006c
    3480:	2000006c 	.word	0x2000006c

00003484 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    3484:	4603      	mov	r3, r0
    3486:	b158      	cbz	r0, 34a0 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3488:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    348a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    348e:	2a01      	cmp	r2, #1
    3490:	d003      	beq.n	349a <sys_notify_validate+0x16>
    3492:	2a03      	cmp	r2, #3
    3494:	d104      	bne.n	34a0 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    3496:	6802      	ldr	r2, [r0, #0]
    3498:	b112      	cbz	r2, 34a0 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    349a:	2000      	movs	r0, #0
    349c:	6098      	str	r0, [r3, #8]
    349e:	4770      	bx	lr
		return -EINVAL;
    34a0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    34a4:	4770      	bx	lr

000034a6 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    34a6:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    34a8:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    34aa:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    34ae:	2a03      	cmp	r2, #3
    34b0:	f04f 0200 	mov.w	r2, #0
{
    34b4:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    34b6:	bf0c      	ite	eq
    34b8:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
    34ba:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    34bc:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    34be:	4770      	bx	lr

000034c0 <arch_printk_char_out>:
}
    34c0:	2000      	movs	r0, #0
    34c2:	4770      	bx	lr

000034c4 <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    34c4:	b40f      	push	{r0, r1, r2, r3}
    34c6:	b507      	push	{r0, r1, r2, lr}
    34c8:	a904      	add	r1, sp, #16
    34ca:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    34ce:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    34d0:	f7fc ff92 	bl	3f8 <vprintk>
	}
	va_end(ap);
}
    34d4:	b003      	add	sp, #12
    34d6:	f85d eb04 	ldr.w	lr, [sp], #4
    34da:	b004      	add	sp, #16
    34dc:	4770      	bx	lr

000034de <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    34de:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    34e0:	f013 0307 	ands.w	r3, r3, #7
    34e4:	d105      	bne.n	34f2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    34e6:	6803      	ldr	r3, [r0, #0]
    34e8:	2b00      	cmp	r3, #0
		evt = EVT_START;
    34ea:	bf0c      	ite	eq
    34ec:	2000      	moveq	r0, #0
    34ee:	2003      	movne	r0, #3
    34f0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    34f2:	2b02      	cmp	r3, #2
    34f4:	d105      	bne.n	3502 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    34f6:	8b43      	ldrh	r3, [r0, #26]
    34f8:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    34fa:	bf14      	ite	ne
    34fc:	2000      	movne	r0, #0
    34fe:	2004      	moveq	r0, #4
    3500:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    3502:	2b01      	cmp	r3, #1
    3504:	d105      	bne.n	3512 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    3506:	6803      	ldr	r3, [r0, #0]
    3508:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    350a:	bf0c      	ite	eq
    350c:	2000      	moveq	r0, #0
    350e:	2005      	movne	r0, #5
    3510:	4770      	bx	lr
	int evt = EVT_NOP;
    3512:	2000      	movs	r0, #0
}
    3514:	4770      	bx	lr

00003516 <notify_one>:
{
    3516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    351a:	460d      	mov	r5, r1
    351c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    351e:	4619      	mov	r1, r3
    3520:	1d28      	adds	r0, r5, #4
{
    3522:	4690      	mov	r8, r2
    3524:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    3526:	f7ff ffbe 	bl	34a6 <sys_notify_finalize>
	if (cb) {
    352a:	4604      	mov	r4, r0
    352c:	b138      	cbz	r0, 353e <notify_one+0x28>
		cb(mgr, cli, state, res);
    352e:	4633      	mov	r3, r6
    3530:	4642      	mov	r2, r8
    3532:	4629      	mov	r1, r5
    3534:	4638      	mov	r0, r7
    3536:	46a4      	mov	ip, r4
}
    3538:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    353c:	4760      	bx	ip
}
    353e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003542 <transition_complete>:
{
    3542:	b410      	push	{r4}
	__asm__ volatile(
    3544:	f04f 0420 	mov.w	r4, #32
    3548:	f3ef 8211 	mrs	r2, BASEPRI
    354c:	f384 8811 	msr	BASEPRI, r4
    3550:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    3554:	6141      	str	r1, [r0, #20]
}
    3556:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    3558:	2101      	movs	r1, #1
    355a:	f7fc bf5b 	b.w	414 <process_event>

0000355e <validate_args>:
{
    355e:	b510      	push	{r4, lr}
    3560:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    3562:	b140      	cbz	r0, 3576 <validate_args+0x18>
    3564:	b139      	cbz	r1, 3576 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    3566:	1d08      	adds	r0, r1, #4
    3568:	f7ff ff8c 	bl	3484 <sys_notify_validate>
	if ((rv == 0)
    356c:	b928      	cbnz	r0, 357a <validate_args+0x1c>
	    && ((cli->notify.flags
    356e:	68a3      	ldr	r3, [r4, #8]
    3570:	f033 0303 	bics.w	r3, r3, #3
    3574:	d001      	beq.n	357a <validate_args+0x1c>
		rv = -EINVAL;
    3576:	f06f 0015 	mvn.w	r0, #21
}
    357a:	bd10      	pop	{r4, pc}

0000357c <onoff_manager_init>:
{
    357c:	b538      	push	{r3, r4, r5, lr}
    357e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    3580:	4605      	mov	r5, r0
    3582:	b158      	cbz	r0, 359c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    3584:	b151      	cbz	r1, 359c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    3586:	680b      	ldr	r3, [r1, #0]
    3588:	b143      	cbz	r3, 359c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    358a:	684b      	ldr	r3, [r1, #4]
    358c:	b133      	cbz	r3, 359c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    358e:	221c      	movs	r2, #28
    3590:	2100      	movs	r1, #0
    3592:	f000 fa93 	bl	3abc <memset>
    3596:	612c      	str	r4, [r5, #16]
	return 0;
    3598:	2000      	movs	r0, #0
}
    359a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    359c:	f06f 0015 	mvn.w	r0, #21
    35a0:	e7fb      	b.n	359a <onoff_manager_init+0x1e>

000035a2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    35a2:	b570      	push	{r4, r5, r6, lr}
    35a4:	4604      	mov	r4, r0
    35a6:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    35a8:	f7ff ffd9 	bl	355e <validate_args>

	if (rv < 0) {
    35ac:	1e05      	subs	r5, r0, #0
    35ae:	db31      	blt.n	3614 <onoff_request+0x72>
    35b0:	f04f 0320 	mov.w	r3, #32
    35b4:	f3ef 8111 	mrs	r1, BASEPRI
    35b8:	f383 8811 	msr	BASEPRI, r3
    35bc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    35c0:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    35c2:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    35c4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    35c8:	42ab      	cmp	r3, r5
    35ca:	f000 0207 	and.w	r2, r0, #7
    35ce:	d02e      	beq.n	362e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    35d0:	2a02      	cmp	r2, #2
    35d2:	d10e      	bne.n	35f2 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    35d4:	3301      	adds	r3, #1
    35d6:	8363      	strh	r3, [r4, #26]
	rv = state;
    35d8:	4615      	mov	r5, r2
		notify = true;
    35da:	2301      	movs	r3, #1
	__asm__ volatile(
    35dc:	f381 8811 	msr	BASEPRI, r1
    35e0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    35e4:	b1b3      	cbz	r3, 3614 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    35e6:	2300      	movs	r3, #0
    35e8:	4631      	mov	r1, r6
    35ea:	4620      	mov	r0, r4
    35ec:	f7ff ff93 	bl	3516 <notify_one>
    35f0:	e010      	b.n	3614 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    35f2:	0783      	lsls	r3, r0, #30
    35f4:	d001      	beq.n	35fa <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    35f6:	2a06      	cmp	r2, #6
    35f8:	d10e      	bne.n	3618 <onoff_request+0x76>
	parent->next = child;
    35fa:	2300      	movs	r3, #0
    35fc:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
    35fe:	6863      	ldr	r3, [r4, #4]
    3600:	b993      	cbnz	r3, 3628 <onoff_request+0x86>
	list->head = node;
    3602:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    3606:	4615      	mov	r5, r2
    3608:	b962      	cbnz	r2, 3624 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    360a:	460a      	mov	r2, r1
    360c:	4620      	mov	r0, r4
    360e:	2102      	movs	r1, #2
    3610:	f7fc ff00 	bl	414 <process_event>
		}
	}

	return rv;
}
    3614:	4628      	mov	r0, r5
    3616:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    3618:	2a05      	cmp	r2, #5
    361a:	bf0c      	ite	eq
    361c:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    3620:	f06f 0504 	mvnne.w	r5, #4
    3624:	2300      	movs	r3, #0
    3626:	e7d9      	b.n	35dc <onoff_request+0x3a>
	parent->next = child;
    3628:	601e      	str	r6, [r3, #0]
	list->tail = node;
    362a:	6066      	str	r6, [r4, #4]
}
    362c:	e7eb      	b.n	3606 <onoff_request+0x64>
		rv = -EAGAIN;
    362e:	f06f 050a 	mvn.w	r5, #10
    3632:	e7f7      	b.n	3624 <onoff_request+0x82>

00003634 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    3634:	4604      	mov	r4, r0
    3636:	b508      	push	{r3, lr}
    3638:	4608      	mov	r0, r1
    363a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    363c:	461a      	mov	r2, r3
    363e:	47a0      	blx	r4
	return z_impl_k_current_get();
    3640:	f7ff fc8e 	bl	2f60 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    3644:	f7fe f8dc 	bl	1800 <z_impl_k_thread_abort>

00003648 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    3648:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
    364a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    364e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
    3652:	bf2c      	ite	cs
    3654:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
    3658:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
    365c:	4770      	bx	lr

0000365e <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    365e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
    3662:	6880      	ldr	r0, [r0, #8]
    3664:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
    3668:	bf2c      	ite	cs
    366a:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    366e:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
    3672:	4770      	bx	lr

00003674 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
    3674:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    3676:	2201      	movs	r2, #1
    3678:	f7ff ffe6 	bl	3648 <chunk_field>
}
    367c:	0840      	lsrs	r0, r0, #1
    367e:	bd08      	pop	{r3, pc}

00003680 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
    3680:	6883      	ldr	r3, [r0, #8]
    3682:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
    3686:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
    368a:	d308      	bcc.n	369e <set_chunk_used+0x1e>
		if (used) {
    368c:	684b      	ldr	r3, [r1, #4]
    368e:	b11a      	cbz	r2, 3698 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    3690:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    3694:	604b      	str	r3, [r1, #4]
    3696:	4770      	bx	lr
    3698:	f023 0301 	bic.w	r3, r3, #1
    369c:	e7fa      	b.n	3694 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
    369e:	884b      	ldrh	r3, [r1, #2]
    36a0:	b11a      	cbz	r2, 36aa <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    36a2:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    36a6:	804b      	strh	r3, [r1, #2]
		}
	}
}
    36a8:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    36aa:	f023 0301 	bic.w	r3, r3, #1
    36ae:	e7fa      	b.n	36a6 <set_chunk_used+0x26>

000036b0 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    36b0:	0053      	lsls	r3, r2, #1
    36b2:	2201      	movs	r2, #1
    36b4:	f7ff bfd3 	b.w	365e <chunk_set>

000036b8 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    36b8:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    36ba:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    36bc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    36c0:	bf2c      	ite	cs
    36c2:	2002      	movcs	r0, #2
    36c4:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
    36c6:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
    36c8:	fab0 f080 	clz	r0, r0
}
    36cc:	f1c0 001f 	rsb	r0, r0, #31
    36d0:	4770      	bx	lr

000036d2 <free_list_add>:
		set_prev_free_chunk(h, second, c);
	}
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    36d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36d6:	4604      	mov	r4, r0
    36d8:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
    36da:	f7ff ffcb 	bl	3674 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
    36de:	68a3      	ldr	r3, [r4, #8]
    36e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    36e4:	4601      	mov	r1, r0
    36e6:	d301      	bcc.n	36ec <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
    36e8:	2801      	cmp	r0, #1
    36ea:	d035      	beq.n	3758 <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
    36ec:	4620      	mov	r0, r4
    36ee:	f7ff ffe3 	bl	36b8 <bucket_idx>
	if (b->next == 0U) {
    36f2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    36f6:	6916      	ldr	r6, [r2, #16]
    36f8:	b99e      	cbnz	r6, 3722 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
    36fa:	2301      	movs	r3, #1
    36fc:	fa03 f000 	lsl.w	r0, r3, r0
    3700:	68e3      	ldr	r3, [r4, #12]
    3702:	4303      	orrs	r3, r0
    3704:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
    3706:	4629      	mov	r1, r5
		b->next = c;
    3708:	6115      	str	r5, [r2, #16]
    370a:	462b      	mov	r3, r5
    370c:	2202      	movs	r2, #2
    370e:	4620      	mov	r0, r4
    3710:	f7ff ffa5 	bl	365e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    3714:	2203      	movs	r2, #3
    3716:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
    3718:	4620      	mov	r0, r4
		free_list_add_bidx(h, c, bidx);
	}
}
    371a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    371e:	f7ff bf9e 	b.w	365e <chunk_set>
	return chunk_field(h, c, FREE_PREV);
    3722:	2202      	movs	r2, #2
    3724:	4631      	mov	r1, r6
    3726:	4620      	mov	r0, r4
    3728:	f7ff ff8e 	bl	3648 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
    372c:	2202      	movs	r2, #2
    372e:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
    3730:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
    3732:	4629      	mov	r1, r5
    3734:	4620      	mov	r0, r4
    3736:	f7ff ff92 	bl	365e <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
    373a:	4633      	mov	r3, r6
    373c:	2203      	movs	r2, #3
    373e:	4629      	mov	r1, r5
    3740:	4620      	mov	r0, r4
    3742:	f7ff ff8c 	bl	365e <chunk_set>
    3746:	2203      	movs	r2, #3
    3748:	4639      	mov	r1, r7
    374a:	462b      	mov	r3, r5
    374c:	4620      	mov	r0, r4
    374e:	f7ff ff86 	bl	365e <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
    3752:	2202      	movs	r2, #2
    3754:	4631      	mov	r1, r6
    3756:	e7df      	b.n	3718 <free_list_add+0x46>
    3758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000375c <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
    375c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
		return ptr2;
	}
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    3760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3762:	bf2c      	ite	cs
    3764:	2508      	movcs	r5, #8
    3766:	2504      	movcc	r5, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    3768:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    376a:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    376c:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    376e:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    3772:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
    3776:	2200      	movs	r2, #0
    3778:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    377a:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
    377c:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
    377e:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
    3780:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
    3784:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    3786:	4629      	mov	r1, r5
	h->len = buf_sz;
    3788:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
    378a:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    378c:	4620      	mov	r0, r4
    378e:	f7ff ff93 	bl	36b8 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
    3792:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    3794:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
    3796:	1c41      	adds	r1, r0, #1
    3798:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    379a:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
    379e:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
    37a0:	428b      	cmp	r3, r1
    37a2:	db29      	blt.n	37f8 <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
    37a4:	4632      	mov	r2, r6
    37a6:	4620      	mov	r0, r4
    37a8:	2100      	movs	r1, #0
    37aa:	f7ff ff81 	bl	36b0 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    37ae:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
    37b0:	4620      	mov	r0, r4
    37b2:	2201      	movs	r2, #1
    37b4:	2100      	movs	r1, #0
    37b6:	f7ff ff63 	bl	3680 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
    37ba:	463a      	mov	r2, r7
    37bc:	4631      	mov	r1, r6
    37be:	f7ff ff77 	bl	36b0 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
    37c2:	4633      	mov	r3, r6
    37c4:	4631      	mov	r1, r6
    37c6:	4620      	mov	r0, r4
    37c8:	2200      	movs	r2, #0
    37ca:	f7ff ff48 	bl	365e <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
    37ce:	4629      	mov	r1, r5
    37d0:	4620      	mov	r0, r4
    37d2:	2200      	movs	r2, #0
    37d4:	f7ff ff6c 	bl	36b0 <set_chunk_size>
    37d8:	463b      	mov	r3, r7
    37da:	4629      	mov	r1, r5
    37dc:	4620      	mov	r0, r4
    37de:	2200      	movs	r2, #0
    37e0:	f7ff ff3d 	bl	365e <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
    37e4:	4629      	mov	r1, r5
    37e6:	4620      	mov	r0, r4
    37e8:	2201      	movs	r2, #1
    37ea:	f7ff ff49 	bl	3680 <set_chunk_used>

	free_list_add(h, chunk0_size);
    37ee:	4631      	mov	r1, r6
}
    37f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
    37f4:	f7ff bf6d 	b.w	36d2 <free_list_add>
		h->buckets[i].next = 0;
    37f8:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
    37fc:	3301      	adds	r3, #1
    37fe:	e7cf      	b.n	37a0 <sys_heap_init+0x44>

00003800 <encode_uint>:
{
    3800:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3804:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    3806:	78d3      	ldrb	r3, [r2, #3]
{
    3808:	4614      	mov	r4, r2
	switch (specifier) {
    380a:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    380c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    3810:	4606      	mov	r6, r0
    3812:	460f      	mov	r7, r1
    3814:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    3816:	d02d      	beq.n	3874 <encode_uint+0x74>
    3818:	d828      	bhi.n	386c <encode_uint+0x6c>
		return 16;
    381a:	2b58      	cmp	r3, #88	; 0x58
    381c:	bf14      	ite	ne
    381e:	250a      	movne	r5, #10
    3820:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    3822:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    3826:	46aa      	mov	sl, r5
    3828:	f04f 0b00 	mov.w	fp, #0
    382c:	4652      	mov	r2, sl
    382e:	465b      	mov	r3, fp
    3830:	4630      	mov	r0, r6
    3832:	4639      	mov	r1, r7
    3834:	f7fc fc52 	bl	dc <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3838:	2a09      	cmp	r2, #9
    383a:	b2d3      	uxtb	r3, r2
    383c:	d81f      	bhi.n	387e <encode_uint+0x7e>
    383e:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    3840:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3842:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    3844:	bf08      	it	eq
    3846:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3848:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    384c:	d301      	bcc.n	3852 <encode_uint+0x52>
    384e:	45c8      	cmp	r8, r9
    3850:	d812      	bhi.n	3878 <encode_uint+0x78>
	if (conv->flag_hash) {
    3852:	7823      	ldrb	r3, [r4, #0]
    3854:	069b      	lsls	r3, r3, #26
    3856:	d505      	bpl.n	3864 <encode_uint+0x64>
		if (radix == 8) {
    3858:	2d08      	cmp	r5, #8
    385a:	d116      	bne.n	388a <encode_uint+0x8a>
			conv->altform_0 = true;
    385c:	78a3      	ldrb	r3, [r4, #2]
    385e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    3862:	70a3      	strb	r3, [r4, #2]
}
    3864:	4640      	mov	r0, r8
    3866:	b003      	add	sp, #12
    3868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    386c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    3870:	2b70      	cmp	r3, #112	; 0x70
    3872:	e7d3      	b.n	381c <encode_uint+0x1c>
	switch (specifier) {
    3874:	2508      	movs	r5, #8
    3876:	e7d4      	b.n	3822 <encode_uint+0x22>
		value /= radix;
    3878:	4606      	mov	r6, r0
    387a:	460f      	mov	r7, r1
    387c:	e7d6      	b.n	382c <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    387e:	9a01      	ldr	r2, [sp, #4]
    3880:	2a19      	cmp	r2, #25
    3882:	bf94      	ite	ls
    3884:	3337      	addls	r3, #55	; 0x37
    3886:	3357      	addhi	r3, #87	; 0x57
    3888:	e7da      	b.n	3840 <encode_uint+0x40>
		} else if (radix == 16) {
    388a:	2d10      	cmp	r5, #16
    388c:	d1ea      	bne.n	3864 <encode_uint+0x64>
			conv->altform_0c = true;
    388e:	78a3      	ldrb	r3, [r4, #2]
    3890:	f043 0310 	orr.w	r3, r3, #16
    3894:	e7e5      	b.n	3862 <encode_uint+0x62>

00003896 <outs>:
{
    3896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    389a:	4607      	mov	r7, r0
    389c:	4688      	mov	r8, r1
    389e:	4615      	mov	r5, r2
    38a0:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    38a2:	4614      	mov	r4, r2
    38a4:	42b4      	cmp	r4, r6
    38a6:	eba4 0005 	sub.w	r0, r4, r5
    38aa:	d302      	bcc.n	38b2 <outs+0x1c>
    38ac:	b93e      	cbnz	r6, 38be <outs+0x28>
    38ae:	7823      	ldrb	r3, [r4, #0]
    38b0:	b12b      	cbz	r3, 38be <outs+0x28>
		int rc = out((int)*sp++, ctx);
    38b2:	f814 0b01 	ldrb.w	r0, [r4], #1
    38b6:	4641      	mov	r1, r8
    38b8:	47b8      	blx	r7
		if (rc < 0) {
    38ba:	2800      	cmp	r0, #0
    38bc:	daf2      	bge.n	38a4 <outs+0xe>
}
    38be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000038c2 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    38c2:	4770      	bx	lr

000038c4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    38c4:	68c2      	ldr	r2, [r0, #12]
    38c6:	b2cb      	uxtb	r3, r1
    38c8:	210c      	movs	r1, #12
    38ca:	fb03 2101 	mla	r1, r3, r1, r2
    38ce:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
    38d0:	f000 0007 	and.w	r0, r0, #7
    38d4:	4770      	bx	lr

000038d6 <set_off_state>:
	__asm__ volatile(
    38d6:	f04f 0320 	mov.w	r3, #32
    38da:	f3ef 8211 	mrs	r2, BASEPRI
    38de:	f383 8811 	msr	BASEPRI, r3
    38e2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    38e6:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    38e8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    38ec:	d001      	beq.n	38f2 <set_off_state+0x1c>
    38ee:	428b      	cmp	r3, r1
    38f0:	d107      	bne.n	3902 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    38f2:	2301      	movs	r3, #1
    38f4:	6003      	str	r3, [r0, #0]
	int err = 0;
    38f6:	2000      	movs	r0, #0
	__asm__ volatile(
    38f8:	f382 8811 	msr	BASEPRI, r2
    38fc:	f3bf 8f6f 	isb	sy
}
    3900:	4770      	bx	lr
		err = -EPERM;
    3902:	f04f 30ff 	mov.w	r0, #4294967295
    3906:	e7f7      	b.n	38f8 <set_off_state+0x22>

00003908 <set_starting_state>:
{
    3908:	b510      	push	{r4, lr}
	__asm__ volatile(
    390a:	f04f 0320 	mov.w	r3, #32
    390e:	f3ef 8211 	mrs	r2, BASEPRI
    3912:	f383 8811 	msr	BASEPRI, r3
    3916:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    391a:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    391c:	f003 0407 	and.w	r4, r3, #7
    3920:	2c01      	cmp	r4, #1
    3922:	d106      	bne.n	3932 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    3924:	6001      	str	r1, [r0, #0]
	int err = 0;
    3926:	2000      	movs	r0, #0
	__asm__ volatile(
    3928:	f382 8811 	msr	BASEPRI, r2
    392c:	f3bf 8f6f 	isb	sy
}
    3930:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    3932:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    3936:	428b      	cmp	r3, r1
		err = -EALREADY;
    3938:	bf14      	ite	ne
    393a:	f04f 30ff 	movne.w	r0, #4294967295
    393e:	f06f 0044 	mvneq.w	r0, #68	; 0x44
    3942:	e7f1      	b.n	3928 <set_starting_state+0x20>

00003944 <set_on_state>:
	__asm__ volatile(
    3944:	f04f 0320 	mov.w	r3, #32
    3948:	f3ef 8211 	mrs	r2, BASEPRI
    394c:	f383 8811 	msr	BASEPRI, r3
    3950:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    3954:	6803      	ldr	r3, [r0, #0]
    3956:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    395a:	f043 0302 	orr.w	r3, r3, #2
    395e:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    3960:	f382 8811 	msr	BASEPRI, r2
    3964:	f3bf 8f6f 	isb	sy
}
    3968:	4770      	bx	lr

0000396a <onoff_started_callback>:
	return &data->mgr[type];
    396a:	68c0      	ldr	r0, [r0, #12]
{
    396c:	b410      	push	{r4}
	return &data->mgr[type];
    396e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    3970:	241c      	movs	r4, #28
    3972:	fb03 0004 	mla	r0, r3, r4, r0
    3976:	2100      	movs	r1, #0
}
    3978:	bc10      	pop	{r4}
	notify(mgr, 0);
    397a:	4710      	bx	r2

0000397c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    397c:	2000      	movs	r0, #0
    397e:	f7fe bd57 	b.w	2430 <nrfx_clock_stop>

00003982 <blocking_start_callback>:
{
    3982:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    3984:	f7ff baf2 	b.w	2f6c <z_impl_k_sem_give>

00003988 <api_stop>:
{
    3988:	b538      	push	{r3, r4, r5, lr}
    398a:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
    398c:	230c      	movs	r3, #12
{
    398e:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
    3990:	4363      	muls	r3, r4
    3992:	68c0      	ldr	r0, [r0, #12]
    3994:	3340      	adds	r3, #64	; 0x40
    3996:	2180      	movs	r1, #128	; 0x80
    3998:	4418      	add	r0, r3
    399a:	f7ff ff9c 	bl	38d6 <set_off_state>
	if (err < 0) {
    399e:	2800      	cmp	r0, #0
    39a0:	db05      	blt.n	39ae <api_stop+0x26>
	get_sub_config(dev, type)->stop();
    39a2:	6869      	ldr	r1, [r5, #4]
    39a4:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    39a8:	6863      	ldr	r3, [r4, #4]
    39aa:	4798      	blx	r3
	return 0;
    39ac:	2000      	movs	r0, #0
}
    39ae:	bd38      	pop	{r3, r4, r5, pc}

000039b0 <api_start>:
{
    39b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    39b4:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    39b6:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    39b8:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
    39ba:	436f      	muls	r7, r5
{
    39bc:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    39be:	f107 0040 	add.w	r0, r7, #64	; 0x40
    39c2:	2180      	movs	r1, #128	; 0x80
    39c4:	4420      	add	r0, r4
{
    39c6:	4690      	mov	r8, r2
    39c8:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    39ca:	f7ff ff9d 	bl	3908 <set_starting_state>
	if (err < 0) {
    39ce:	2800      	cmp	r0, #0
    39d0:	db07      	blt.n	39e2 <api_start+0x32>
	subdata->cb = cb;
    39d2:	443c      	add	r4, r7
	subdata->user_data = user_data;
    39d4:	e9c4 890e 	strd	r8, r9, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    39d8:	6873      	ldr	r3, [r6, #4]
    39da:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    39de:	4798      	blx	r3
	return 0;
    39e0:	2000      	movs	r0, #0
}
    39e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000039e6 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    39e6:	4770      	bx	lr

000039e8 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    39e8:	4770      	bx	lr

000039ea <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    39ea:	f7fd bc7b 	b.w	12e4 <_DoInit>

000039ee <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    39ee:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    39f0:	f7ff fffb 	bl	39ea <SEGGER_RTT_Init>

	return 0;
}
    39f4:	2000      	movs	r0, #0
    39f6:	bd08      	pop	{r3, pc}

000039f8 <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    39f8:	2100      	movs	r1, #0
    39fa:	2001      	movs	r0, #1
    39fc:	f000 b800 	b.w	3a00 <z_arm_fatal_error>

00003a00 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3a00:	f000 b946 	b.w	3c90 <z_fatal_error>

00003a04 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3a04:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3a06:	6800      	ldr	r0, [r0, #0]
    3a08:	f000 b942 	b.w	3c90 <z_fatal_error>

00003a0c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3a0c:	b508      	push	{r3, lr}
	handler();
    3a0e:	f7fd fd91 	bl	1534 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    3a12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    3a16:	f7fd bed9 	b.w	17cc <z_arm_exc_exit>

00003a1a <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    3a1a:	3901      	subs	r1, #1
    3a1c:	4603      	mov	r3, r0
    3a1e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    3a22:	b90a      	cbnz	r2, 3a28 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    3a24:	701a      	strb	r2, [r3, #0]

	return dest;
}
    3a26:	4770      	bx	lr
		*d = *s;
    3a28:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    3a2c:	e7f7      	b.n	3a1e <strcpy+0x4>

00003a2e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    3a2e:	4603      	mov	r3, r0
	size_t n = 0;
    3a30:	2000      	movs	r0, #0

	while (*s != '\0') {
    3a32:	5c1a      	ldrb	r2, [r3, r0]
    3a34:	b902      	cbnz	r2, 3a38 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    3a36:	4770      	bx	lr
		n++;
    3a38:	3001      	adds	r0, #1
    3a3a:	e7fa      	b.n	3a32 <strlen+0x4>

00003a3c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    3a3c:	4603      	mov	r3, r0
	size_t n = 0;
    3a3e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    3a40:	5c1a      	ldrb	r2, [r3, r0]
    3a42:	b10a      	cbz	r2, 3a48 <strnlen+0xc>
    3a44:	4288      	cmp	r0, r1
    3a46:	d100      	bne.n	3a4a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    3a48:	4770      	bx	lr
		n++;
    3a4a:	3001      	adds	r0, #1
    3a4c:	e7f8      	b.n	3a40 <strnlen+0x4>

00003a4e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    3a4e:	1e43      	subs	r3, r0, #1
    3a50:	3901      	subs	r1, #1
    3a52:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    3a56:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    3a5a:	4282      	cmp	r2, r0
    3a5c:	d101      	bne.n	3a62 <strcmp+0x14>
    3a5e:	2a00      	cmp	r2, #0
    3a60:	d1f7      	bne.n	3a52 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    3a62:	1a10      	subs	r0, r2, r0
    3a64:	4770      	bx	lr

00003a66 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    3a66:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    3a68:	ea81 0400 	eor.w	r4, r1, r0
    3a6c:	07a5      	lsls	r5, r4, #30
    3a6e:	4603      	mov	r3, r0
    3a70:	d00b      	beq.n	3a8a <memcpy+0x24>
    3a72:	3b01      	subs	r3, #1
    3a74:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    3a76:	4291      	cmp	r1, r2
    3a78:	d11b      	bne.n	3ab2 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    3a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    3a7c:	2a00      	cmp	r2, #0
    3a7e:	d0fc      	beq.n	3a7a <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    3a80:	f811 4b01 	ldrb.w	r4, [r1], #1
    3a84:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    3a88:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
    3a8a:	079c      	lsls	r4, r3, #30
    3a8c:	d1f6      	bne.n	3a7c <memcpy+0x16>
    3a8e:	f022 0403 	bic.w	r4, r2, #3
    3a92:	1f1d      	subs	r5, r3, #4
    3a94:	0896      	lsrs	r6, r2, #2
    3a96:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    3a98:	42b9      	cmp	r1, r7
    3a9a:	d105      	bne.n	3aa8 <memcpy+0x42>
    3a9c:	f06f 0503 	mvn.w	r5, #3
    3aa0:	fb05 2206 	mla	r2, r5, r6, r2
    3aa4:	4423      	add	r3, r4
    3aa6:	e7e4      	b.n	3a72 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    3aa8:	f851 cb04 	ldr.w	ip, [r1], #4
    3aac:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    3ab0:	e7f2      	b.n	3a98 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    3ab2:	f811 4b01 	ldrb.w	r4, [r1], #1
    3ab6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    3aba:	e7dc      	b.n	3a76 <memcpy+0x10>

00003abc <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    3abc:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    3abe:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
    3ac0:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    3ac2:	079c      	lsls	r4, r3, #30
    3ac4:	d111      	bne.n	3aea <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    3ac6:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
    3aca:	f022 0603 	bic.w	r6, r2, #3
    3ace:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    3ad2:	441e      	add	r6, r3
    3ad4:	0894      	lsrs	r4, r2, #2
    3ad6:	42b3      	cmp	r3, r6
    3ad8:	d10d      	bne.n	3af6 <memset+0x3a>
    3ada:	f06f 0503 	mvn.w	r5, #3
    3ade:	fb05 2204 	mla	r2, r5, r4, r2
    3ae2:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    3ae4:	4293      	cmp	r3, r2
    3ae6:	d109      	bne.n	3afc <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    3ae8:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    3aea:	2a00      	cmp	r2, #0
    3aec:	d0fc      	beq.n	3ae8 <memset+0x2c>
		*(d_byte++) = c_byte;
    3aee:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3af2:	3a01      	subs	r2, #1
    3af4:	e7e5      	b.n	3ac2 <memset+0x6>
		*(d_word++) = c_word;
    3af6:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
    3afa:	e7ec      	b.n	3ad6 <memset+0x1a>
		*(d_byte++) = c_byte;
    3afc:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3b00:	e7f0      	b.n	3ae4 <memset+0x28>

00003b02 <_stdout_hook_default>:
}
    3b02:	f04f 30ff 	mov.w	r0, #4294967295
    3b06:	4770      	bx	lr

00003b08 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    3b08:	f7fe bb14 	b.w	2134 <SystemInit>

00003b0c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    3b0c:	f000 001f 	and.w	r0, r0, #31
    3b10:	0080      	lsls	r0, r0, #2
    3b12:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    3b16:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    3b1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    3b1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    3b22:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    3b26:	4770      	bx	lr

00003b28 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3b28:	6843      	ldr	r3, [r0, #4]
    3b2a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    3b2c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    3b30:	600b      	str	r3, [r1, #0]
}
    3b32:	2000      	movs	r0, #0
    3b34:	4770      	bx	lr

00003b36 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3b36:	6843      	ldr	r3, [r0, #4]
    3b38:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    3b3a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    3b3e:	4042      	eors	r2, r0
    3b40:	400a      	ands	r2, r1
    3b42:	4042      	eors	r2, r0
    p_reg->OUT = value;
    3b44:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    3b48:	2000      	movs	r0, #0
    3b4a:	4770      	bx	lr

00003b4c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3b4c:	6843      	ldr	r3, [r0, #4]
    3b4e:	685b      	ldr	r3, [r3, #4]
}
    3b50:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    3b52:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    3b56:	4770      	bx	lr

00003b58 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3b58:	6843      	ldr	r3, [r0, #4]
    3b5a:	685b      	ldr	r3, [r3, #4]
}
    3b5c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    3b5e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    3b62:	4770      	bx	lr

00003b64 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3b64:	6843      	ldr	r3, [r0, #4]
    3b66:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    3b68:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    3b6c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    3b6e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    3b72:	2000      	movs	r0, #0
    3b74:	4770      	bx	lr

00003b76 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3b76:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
    3b78:	6858      	ldr	r0, [r3, #4]
{
    3b7a:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    3b7c:	b158      	cbz	r0, 3b96 <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3b7e:	2400      	movs	r4, #0
    3b80:	4281      	cmp	r1, r0
    3b82:	d113      	bne.n	3bac <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
    3b84:	6808      	ldr	r0, [r1, #0]
    3b86:	b95c      	cbnz	r4, 3ba0 <gpio_nrfx_manage_callback+0x2a>
    3b88:	689c      	ldr	r4, [r3, #8]
	list->head = node;
    3b8a:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    3b8c:	42a1      	cmp	r1, r4
    3b8e:	d100      	bne.n	3b92 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    3b90:	6098      	str	r0, [r3, #8]
	parent->next = child;
    3b92:	2000      	movs	r0, #0
    3b94:	6008      	str	r0, [r1, #0]
	if (set) {
    3b96:	b972      	cbnz	r2, 3bb6 <gpio_nrfx_manage_callback+0x40>
	return 0;
    3b98:	2000      	movs	r0, #0
}
    3b9a:	bd30      	pop	{r4, r5, pc}
    3b9c:	4628      	mov	r0, r5
    3b9e:	e7ef      	b.n	3b80 <gpio_nrfx_manage_callback+0xa>
    3ba0:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    3ba2:	6898      	ldr	r0, [r3, #8]
    3ba4:	4281      	cmp	r1, r0
	list->tail = node;
    3ba6:	bf08      	it	eq
    3ba8:	609c      	streq	r4, [r3, #8]
}
    3baa:	e7f2      	b.n	3b92 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3bac:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3bae:	4604      	mov	r4, r0
    3bb0:	2d00      	cmp	r5, #0
    3bb2:	d1f3      	bne.n	3b9c <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    3bb4:	b13a      	cbz	r2, 3bc6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
    3bb6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    3bb8:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    3bba:	6898      	ldr	r0, [r3, #8]
	list->head = node;
    3bbc:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    3bbe:	2800      	cmp	r0, #0
    3bc0:	d1ea      	bne.n	3b98 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    3bc2:	6099      	str	r1, [r3, #8]
}
    3bc4:	e7e9      	b.n	3b9a <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    3bc6:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3bca:	e7e6      	b.n	3b9a <gpio_nrfx_manage_callback+0x24>

00003bcc <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    3bcc:	6843      	ldr	r3, [r0, #4]
    3bce:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    3bd0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    3bd4:	05d2      	lsls	r2, r2, #23
    3bd6:	d518      	bpl.n	3c0a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3bd8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    3bdc:	b1aa      	cbz	r2, 3c0a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    3bde:	f04f 0120 	mov.w	r1, #32
    3be2:	f3ef 8211 	mrs	r2, BASEPRI
    3be6:	f381 8811 	msr	BASEPRI, r1
    3bea:	f3bf 8f6f 	isb	sy
    3bee:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    3bf2:	b131      	cbz	r1, 3c02 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3bf4:	2100      	movs	r1, #0
    3bf6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    3bfa:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3bfe:	2101      	movs	r1, #1
    3c00:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    3c02:	f382 8811 	msr	BASEPRI, r2
    3c06:	f3bf 8f6f 	isb	sy
}
    3c0a:	4770      	bx	lr

00003c0c <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    3c0c:	68c2      	ldr	r2, [r0, #12]
{
    3c0e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    3c10:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    3c14:	e883 0003 	stmia.w	r3, {r0, r1}
}
    3c18:	2000      	movs	r0, #0
    3c1a:	4770      	bx	lr

00003c1c <uarte_nrfx_err_check>:
	return config->uarte_regs;
    3c1c:	6843      	ldr	r3, [r0, #4]
    3c1e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    3c20:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    3c24:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    3c28:	4770      	bx	lr

00003c2a <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    3c2a:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    3c2c:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3c2e:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    3c32:	b938      	cbnz	r0, 3c44 <is_tx_ready+0x1a>
    3c34:	7992      	ldrb	r2, [r2, #6]
    3c36:	b932      	cbnz	r2, 3c46 <is_tx_ready+0x1c>
    3c38:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    3c3c:	3800      	subs	r0, #0
    3c3e:	bf18      	it	ne
    3c40:	2001      	movne	r0, #1
    3c42:	4770      	bx	lr
    3c44:	2001      	movs	r0, #1
}
    3c46:	4770      	bx	lr

00003c48 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    3c48:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    3c4a:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
    3c4c:	681b      	ldr	r3, [r3, #0]
    3c4e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    3c52:	b148      	cbz	r0, 3c68 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    3c54:	7c52      	ldrb	r2, [r2, #17]
    3c56:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3c58:	2000      	movs	r0, #0
    3c5a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    3c5e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3c62:	2201      	movs	r2, #1
    3c64:	601a      	str	r2, [r3, #0]
	return 0;
    3c66:	4770      	bx	lr
		return -1;
    3c68:	f04f 30ff 	mov.w	r0, #4294967295
}
    3c6c:	4770      	bx	lr

00003c6e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    3c6e:	b508      	push	{r3, lr}
	ARG_UNUSED(reason);

	LOG_PANIC();

	LOG_ERR("Resetting system");
	sys_arch_reboot(0);
    3c70:	2000      	movs	r0, #0
    3c72:	f7fd fec1 	bl	19f8 <sys_arch_reboot>

00003c76 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    3c76:	4700      	bx	r0

00003c78 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    3c78:	f000 b8d9 	b.w	3e2e <z_impl_k_busy_wait>

00003c7c <nrfx_clock_enable>:
{
    3c7c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3c7e:	2000      	movs	r0, #0
    3c80:	f7fd fbc4 	bl	140c <arch_irq_is_enabled>
    3c84:	b918      	cbnz	r0, 3c8e <nrfx_clock_enable+0x12>
}
    3c86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3c8a:	f7fd bbaf 	b.w	13ec <arch_irq_enable>
    3c8e:	bd08      	pop	{r3, pc}

00003c90 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c92:	4605      	mov	r5, r0
    3c94:	460e      	mov	r6, r1
	__asm__ volatile(
    3c96:	f04f 0320 	mov.w	r3, #32
    3c9a:	f3ef 8711 	mrs	r7, BASEPRI
    3c9e:	f383 8811 	msr	BASEPRI, r3
    3ca2:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    3ca6:	f7ff f95b 	bl	2f60 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3caa:	4631      	mov	r1, r6
    3cac:	4604      	mov	r4, r0
    3cae:	4628      	mov	r0, r5
    3cb0:	f7ff ffdd 	bl	3c6e <k_sys_fatal_error_handler>
	__asm__ volatile(
    3cb4:	f387 8811 	msr	BASEPRI, r7
    3cb8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3cbc:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    3cbe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3cc2:	f7fd bd9d 	b.w	1800 <z_impl_k_thread_abort>

00003cc6 <z_pm_save_idle_exit>:
	z_clock_idle_exit();
    3cc6:	f7ff be8f 	b.w	39e8 <z_clock_idle_exit>

00003cca <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3cca:	4603      	mov	r3, r0
    3ccc:	b920      	cbnz	r0, 3cd8 <z_reschedule_irqlock+0xe>
    3cce:	f3ef 8205 	mrs	r2, IPSR
    3cd2:	b90a      	cbnz	r2, 3cd8 <z_reschedule_irqlock+0xe>
    3cd4:	f7fd bb36 	b.w	1344 <arch_swap>
    3cd8:	f383 8811 	msr	BASEPRI, r3
    3cdc:	f3bf 8f6f 	isb	sy
}
    3ce0:	4770      	bx	lr

00003ce2 <z_reschedule_unlocked>:
	__asm__ volatile(
    3ce2:	f04f 0320 	mov.w	r3, #32
    3ce6:	f3ef 8011 	mrs	r0, BASEPRI
    3cea:	f383 8811 	msr	BASEPRI, r3
    3cee:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    3cf2:	f7ff bfea 	b.w	3cca <z_reschedule_irqlock>

00003cf6 <unpend_thread_no_timeout>:
{
    3cf6:	4601      	mov	r1, r0
    3cf8:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
    3cfa:	6880      	ldr	r0, [r0, #8]
    3cfc:	f7fe fe44 	bl	2988 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3d00:	7b4b      	ldrb	r3, [r1, #13]
    3d02:	f023 0302 	bic.w	r3, r3, #2
    3d06:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
    3d08:	2300      	movs	r3, #0
    3d0a:	608b      	str	r3, [r1, #8]
}
    3d0c:	bd08      	pop	{r3, pc}

00003d0e <z_priq_dumb_best>:
{
    3d0e:	4603      	mov	r3, r0
	return list->head == list;
    3d10:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d12:	4283      	cmp	r3, r0
    3d14:	d003      	beq.n	3d1e <z_priq_dumb_best+0x10>
	if (n != NULL) {
    3d16:	2800      	cmp	r0, #0
    3d18:	bf38      	it	cc
    3d1a:	2000      	movcc	r0, #0
    3d1c:	4770      	bx	lr
	struct k_thread *thread = NULL;
    3d1e:	2000      	movs	r0, #0
}
    3d20:	4770      	bx	lr

00003d22 <z_ready_thread>:
{
    3d22:	b510      	push	{r4, lr}
    3d24:	f04f 0320 	mov.w	r3, #32
    3d28:	f3ef 8411 	mrs	r4, BASEPRI
    3d2c:	f383 8811 	msr	BASEPRI, r3
    3d30:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
    3d34:	f7fe fe82 	bl	2a3c <ready_thread>
	__asm__ volatile(
    3d38:	f384 8811 	msr	BASEPRI, r4
    3d3c:	f3bf 8f6f 	isb	sy
}
    3d40:	bd10      	pop	{r4, pc}

00003d42 <z_thread_timeout>:
{
    3d42:	b570      	push	{r4, r5, r6, lr}
    3d44:	4604      	mov	r4, r0
	__asm__ volatile(
    3d46:	f04f 0320 	mov.w	r3, #32
    3d4a:	f3ef 8611 	mrs	r6, BASEPRI
    3d4e:	f383 8811 	msr	BASEPRI, r3
    3d52:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    3d56:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
    3d5a:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
    3d5e:	b113      	cbz	r3, 3d66 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
    3d60:	4628      	mov	r0, r5
    3d62:	f7ff ffc8 	bl	3cf6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3d66:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    3d6a:	f023 0314 	bic.w	r3, r3, #20
    3d6e:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
    3d72:	4628      	mov	r0, r5
    3d74:	f7fe fe62 	bl	2a3c <ready_thread>
	__asm__ volatile(
    3d78:	f386 8811 	msr	BASEPRI, r6
    3d7c:	f3bf 8f6f 	isb	sy
}
    3d80:	bd70      	pop	{r4, r5, r6, pc}

00003d82 <add_to_waitq_locked>:
{
    3d82:	b538      	push	{r3, r4, r5, lr}
    3d84:	4604      	mov	r4, r0
    3d86:	460d      	mov	r5, r1
	unready_thread(thread);
    3d88:	f7fe ffe0 	bl	2d4c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    3d8c:	7b63      	ldrb	r3, [r4, #13]
    3d8e:	f043 0302 	orr.w	r3, r3, #2
    3d92:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    3d94:	b1c5      	cbz	r5, 3dc8 <add_to_waitq_locked+0x46>
	return list->head == list;
    3d96:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    3d98:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3d9a:	429d      	cmp	r5, r3
    3d9c:	bf08      	it	eq
    3d9e:	2300      	moveq	r3, #0
    3da0:	2b00      	cmp	r3, #0
    3da2:	bf38      	it	cc
    3da4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3da6:	b183      	cbz	r3, 3dca <add_to_waitq_locked+0x48>
	if (thread_1->base.prio < thread_2->base.prio) {
    3da8:	f994 100e 	ldrsb.w	r1, [r4, #14]
    3dac:	f993 200e 	ldrsb.w	r2, [r3, #14]
    3db0:	4291      	cmp	r1, r2
    3db2:	db04      	blt.n	3dbe <add_to_waitq_locked+0x3c>
	return (node == list->tail) ? NULL : node->next;
    3db4:	686a      	ldr	r2, [r5, #4]
    3db6:	429a      	cmp	r2, r3
    3db8:	d007      	beq.n	3dca <add_to_waitq_locked+0x48>
    3dba:	681b      	ldr	r3, [r3, #0]
    3dbc:	e7f3      	b.n	3da6 <add_to_waitq_locked+0x24>
	node->prev = successor->prev;
    3dbe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3dc0:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
    3dc4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3dc6:	605c      	str	r4, [r3, #4]
}
    3dc8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev = list->tail;
    3dca:	686b      	ldr	r3, [r5, #4]
    3dcc:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
    3dce:	686b      	ldr	r3, [r5, #4]
	node->next = list;
    3dd0:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
    3dd2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3dd4:	606c      	str	r4, [r5, #4]
    3dd6:	e7f7      	b.n	3dc8 <add_to_waitq_locked+0x46>

00003dd8 <z_unpend_first_thread>:
{
    3dd8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3dda:	f04f 0320 	mov.w	r3, #32
    3dde:	f3ef 8211 	mrs	r2, BASEPRI
    3de2:	f383 8811 	msr	BASEPRI, r3
    3de6:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
    3dea:	f7ff ff90 	bl	3d0e <z_priq_dumb_best>
    3dee:	4604      	mov	r4, r0
	__asm__ volatile(
    3df0:	f382 8811 	msr	BASEPRI, r2
    3df4:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
    3df8:	b188      	cbz	r0, 3e1e <z_unpend_first_thread+0x46>
	__asm__ volatile(
    3dfa:	f04f 0320 	mov.w	r3, #32
    3dfe:	f3ef 8511 	mrs	r5, BASEPRI
    3e02:	f383 8811 	msr	BASEPRI, r3
    3e06:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    3e0a:	f7ff ff74 	bl	3cf6 <unpend_thread_no_timeout>
	__asm__ volatile(
    3e0e:	f385 8811 	msr	BASEPRI, r5
    3e12:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
    3e16:	f104 0018 	add.w	r0, r4, #24
    3e1a:	f000 f80c 	bl	3e36 <z_abort_timeout>
}
    3e1e:	4620      	mov	r0, r4
    3e20:	bd38      	pop	{r3, r4, r5, pc}

00003e22 <k_is_in_isr>:
    3e22:	f3ef 8005 	mrs	r0, IPSR
}
    3e26:	3800      	subs	r0, #0
    3e28:	bf18      	it	ne
    3e2a:	2001      	movne	r0, #1
    3e2c:	4770      	bx	lr

00003e2e <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    3e2e:	b108      	cbz	r0, 3e34 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    3e30:	f7fd bdf8 	b.w	1a24 <arch_busy_wait>
}
    3e34:	4770      	bx	lr

00003e36 <z_abort_timeout>:
{
    3e36:	b510      	push	{r4, lr}
	__asm__ volatile(
    3e38:	f04f 0220 	mov.w	r2, #32
    3e3c:	f3ef 8411 	mrs	r4, BASEPRI
    3e40:	f382 8811 	msr	BASEPRI, r2
    3e44:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3e48:	6803      	ldr	r3, [r0, #0]
    3e4a:	b13b      	cbz	r3, 3e5c <z_abort_timeout+0x26>
			remove_timeout(to);
    3e4c:	f7ff f9ac 	bl	31a8 <remove_timeout>
			ret = 0;
    3e50:	2000      	movs	r0, #0
	__asm__ volatile(
    3e52:	f384 8811 	msr	BASEPRI, r4
    3e56:	f3bf 8f6f 	isb	sy
}
    3e5a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    3e5c:	f06f 0015 	mvn.w	r0, #21
    3e60:	e7f7      	b.n	3e52 <z_abort_timeout+0x1c>

00003e62 <z_get_next_timeout_expiry>:
{
    3e62:	b510      	push	{r4, lr}
	__asm__ volatile(
    3e64:	f04f 0320 	mov.w	r3, #32
    3e68:	f3ef 8411 	mrs	r4, BASEPRI
    3e6c:	f383 8811 	msr	BASEPRI, r3
    3e70:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    3e74:	f7ff f9b2 	bl	31dc <next_timeout>
	__asm__ volatile(
    3e78:	f384 8811 	msr	BASEPRI, r4
    3e7c:	f3bf 8f6f 	isb	sy
}
    3e80:	bd10      	pop	{r4, pc}

00003e82 <z_set_timeout_expiry>:
{
    3e82:	b570      	push	{r4, r5, r6, lr}
    3e84:	4604      	mov	r4, r0
    3e86:	460d      	mov	r5, r1
	__asm__ volatile(
    3e88:	f04f 0320 	mov.w	r3, #32
    3e8c:	f3ef 8611 	mrs	r6, BASEPRI
    3e90:	f383 8811 	msr	BASEPRI, r3
    3e94:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    3e98:	f7ff f9a0 	bl	31dc <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    3e9c:	2801      	cmp	r0, #1
    3e9e:	dd05      	ble.n	3eac <z_set_timeout_expiry+0x2a>
    3ea0:	42a0      	cmp	r0, r4
    3ea2:	dd03      	ble.n	3eac <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
    3ea4:	4629      	mov	r1, r5
    3ea6:	4620      	mov	r0, r4
    3ea8:	f7fd f9d0 	bl	124c <z_clock_set_timeout>
	__asm__ volatile(
    3eac:	f386 8811 	msr	BASEPRI, r6
    3eb0:	f3bf 8f6f 	isb	sy
}
    3eb4:	bd70      	pop	{r4, r5, r6, pc}

00003eb6 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    3eb6:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    3eb8:	f7ff fab8 	bl	342c <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    3ebc:	bd08      	pop	{r3, pc}

00003ebe <k_heap_init>:
{
    3ebe:	b410      	push	{r4}
    3ec0:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    3ec4:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    3ec8:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    3eca:	f7ff bc47 	b.w	375c <sys_heap_init>

00003ece <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    3ece:	4770      	bx	lr
