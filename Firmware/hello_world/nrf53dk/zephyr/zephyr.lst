
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	a0 07 00 20 f1 16 00 00 09 37 00 00 21 17 00 00     ... .....7..!...
  10:	21 17 00 00 21 17 00 00 21 17 00 00 21 17 00 00     !...!...!...!...
	...
  2c:	35 15 00 00 21 17 00 00 00 00 00 00 dd 14 00 00     5...!...........
  3c:	e9 36 00 00                                         .6..

00000040 <_irq_vector_table>:
  40:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
  50:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
  60:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
  70:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
  80:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
  90:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
  a0:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
  b0:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
  c0:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
  d0:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
  e0:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
  f0:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
 100:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
 110:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
 120:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
 130:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
 140:	b1 16 00 00 b1 16 00 00 b1 16 00 00 b1 16 00 00     ................
 150:	b1 16 00 00                                         ....

Disassembly of section text:

00000154 <__aeabi_uldivmod>:
     154:	b953      	cbnz	r3, 16c <__aeabi_uldivmod+0x18>
     156:	b94a      	cbnz	r2, 16c <__aeabi_uldivmod+0x18>
     158:	2900      	cmp	r1, #0
     15a:	bf08      	it	eq
     15c:	2800      	cmpeq	r0, #0
     15e:	bf1c      	itt	ne
     160:	f04f 31ff 	movne.w	r1, #4294967295
     164:	f04f 30ff 	movne.w	r0, #4294967295
     168:	f000 b980 	b.w	46c <__aeabi_idiv0>
     16c:	f1ad 0c08 	sub.w	ip, sp, #8
     170:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     174:	f000 f806 	bl	184 <__udivmoddi4>
     178:	f8dd e004 	ldr.w	lr, [sp, #4]
     17c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     180:	b004      	add	sp, #16
     182:	4770      	bx	lr

00000184 <__udivmoddi4>:
     184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     188:	9e09      	ldr	r6, [sp, #36]	; 0x24
     18a:	460d      	mov	r5, r1
     18c:	4604      	mov	r4, r0
     18e:	460f      	mov	r7, r1
     190:	2b00      	cmp	r3, #0
     192:	d147      	bne.n	224 <CONFIG_SRAM_SIZE+0x64>
     194:	428a      	cmp	r2, r1
     196:	4694      	mov	ip, r2
     198:	d95f      	bls.n	25a <CONFIG_SRAM_SIZE+0x9a>
     19a:	fab2 f382 	clz	r3, r2
     19e:	b143      	cbz	r3, 1b2 <__udivmoddi4+0x2e>
     1a0:	f1c3 0120 	rsb	r1, r3, #32
     1a4:	409f      	lsls	r7, r3
     1a6:	fa02 fc03 	lsl.w	ip, r2, r3
     1aa:	409c      	lsls	r4, r3
     1ac:	fa20 f101 	lsr.w	r1, r0, r1
     1b0:	430f      	orrs	r7, r1
     1b2:	ea4f 451c 	mov.w	r5, ip, lsr #16
     1b6:	fa1f fe8c 	uxth.w	lr, ip
     1ba:	0c22      	lsrs	r2, r4, #16
     1bc:	fbb7 f1f5 	udiv	r1, r7, r5
     1c0:	fb05 7711 	mls	r7, r5, r1, r7
     1c4:	fb01 f00e 	mul.w	r0, r1, lr
     1c8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
     1cc:	4290      	cmp	r0, r2
     1ce:	d908      	bls.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     1d0:	eb1c 0202 	adds.w	r2, ip, r2
     1d4:	f101 37ff 	add.w	r7, r1, #4294967295
     1d8:	d202      	bcs.n	1e0 <CONFIG_SRAM_SIZE+0x20>
     1da:	4290      	cmp	r0, r2
     1dc:	f200 8134 	bhi.w	448 <CONFIG_FLASH_SIZE+0x48>
     1e0:	4639      	mov	r1, r7
     1e2:	1a12      	subs	r2, r2, r0
     1e4:	b2a4      	uxth	r4, r4
     1e6:	fbb2 f0f5 	udiv	r0, r2, r5
     1ea:	fb05 2210 	mls	r2, r5, r0, r2
     1ee:	fb00 fe0e 	mul.w	lr, r0, lr
     1f2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
     1f6:	45a6      	cmp	lr, r4
     1f8:	d908      	bls.n	20c <CONFIG_SRAM_SIZE+0x4c>
     1fa:	eb1c 0404 	adds.w	r4, ip, r4
     1fe:	f100 32ff 	add.w	r2, r0, #4294967295
     202:	d202      	bcs.n	20a <CONFIG_SRAM_SIZE+0x4a>
     204:	45a6      	cmp	lr, r4
     206:	f200 8119 	bhi.w	43c <CONFIG_FLASH_SIZE+0x3c>
     20a:	4610      	mov	r0, r2
     20c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
     210:	eba4 040e 	sub.w	r4, r4, lr
     214:	2100      	movs	r1, #0
     216:	b11e      	cbz	r6, 220 <CONFIG_SRAM_SIZE+0x60>
     218:	40dc      	lsrs	r4, r3
     21a:	2300      	movs	r3, #0
     21c:	e9c6 4300 	strd	r4, r3, [r6]
     220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     224:	428b      	cmp	r3, r1
     226:	d908      	bls.n	23a <CONFIG_SRAM_SIZE+0x7a>
     228:	2e00      	cmp	r6, #0
     22a:	f000 80fb 	beq.w	424 <CONFIG_FLASH_SIZE+0x24>
     22e:	2100      	movs	r1, #0
     230:	e9c6 0500 	strd	r0, r5, [r6]
     234:	4608      	mov	r0, r1
     236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     23a:	fab3 f183 	clz	r1, r3
     23e:	2900      	cmp	r1, #0
     240:	d14b      	bne.n	2da <CONFIG_SRAM_SIZE+0x11a>
     242:	42ab      	cmp	r3, r5
     244:	f0c0 80f1 	bcc.w	42a <CONFIG_FLASH_SIZE+0x2a>
     248:	4282      	cmp	r2, r0
     24a:	f240 80ee 	bls.w	42a <CONFIG_FLASH_SIZE+0x2a>
     24e:	4608      	mov	r0, r1
     250:	2e00      	cmp	r6, #0
     252:	d0e5      	beq.n	220 <CONFIG_SRAM_SIZE+0x60>
     254:	e9c6 4700 	strd	r4, r7, [r6]
     258:	e7e2      	b.n	220 <CONFIG_SRAM_SIZE+0x60>
     25a:	b902      	cbnz	r2, 25e <CONFIG_SRAM_SIZE+0x9e>
     25c:	deff      	udf	#255	; 0xff
     25e:	fab2 f382 	clz	r3, r2
     262:	2b00      	cmp	r3, #0
     264:	f040 809d 	bne.w	3a2 <CONFIG_SRAM_SIZE+0x1e2>
     268:	1a8d      	subs	r5, r1, r2
     26a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
     26e:	b297      	uxth	r7, r2
     270:	2101      	movs	r1, #1
     272:	fbb5 f2fe 	udiv	r2, r5, lr
     276:	fb0e 5012 	mls	r0, lr, r2, r5
     27a:	0c25      	lsrs	r5, r4, #16
     27c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     280:	fb07 f002 	mul.w	r0, r7, r2
     284:	42a8      	cmp	r0, r5
     286:	d90f      	bls.n	2a8 <CONFIG_SRAM_SIZE+0xe8>
     288:	eb1c 0505 	adds.w	r5, ip, r5
     28c:	f102 38ff 	add.w	r8, r2, #4294967295
     290:	bf2c      	ite	cs
     292:	f04f 0901 	movcs.w	r9, #1
     296:	f04f 0900 	movcc.w	r9, #0
     29a:	42a8      	cmp	r0, r5
     29c:	d903      	bls.n	2a6 <CONFIG_SRAM_SIZE+0xe6>
     29e:	f1b9 0f00 	cmp.w	r9, #0
     2a2:	f000 80ce 	beq.w	442 <CONFIG_FLASH_SIZE+0x42>
     2a6:	4642      	mov	r2, r8
     2a8:	1a2d      	subs	r5, r5, r0
     2aa:	b2a4      	uxth	r4, r4
     2ac:	fbb5 f0fe 	udiv	r0, r5, lr
     2b0:	fb0e 5510 	mls	r5, lr, r0, r5
     2b4:	fb00 f707 	mul.w	r7, r0, r7
     2b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     2bc:	42a7      	cmp	r7, r4
     2be:	d908      	bls.n	2d2 <CONFIG_SRAM_SIZE+0x112>
     2c0:	eb1c 0404 	adds.w	r4, ip, r4
     2c4:	f100 35ff 	add.w	r5, r0, #4294967295
     2c8:	d202      	bcs.n	2d0 <CONFIG_SRAM_SIZE+0x110>
     2ca:	42a7      	cmp	r7, r4
     2cc:	f200 80b3 	bhi.w	436 <CONFIG_FLASH_SIZE+0x36>
     2d0:	4628      	mov	r0, r5
     2d2:	1be4      	subs	r4, r4, r7
     2d4:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
     2d8:	e79d      	b.n	216 <CONFIG_SRAM_SIZE+0x56>
     2da:	f1c1 0720 	rsb	r7, r1, #32
     2de:	408b      	lsls	r3, r1
     2e0:	fa05 f401 	lsl.w	r4, r5, r1
     2e4:	fa22 fc07 	lsr.w	ip, r2, r7
     2e8:	40fd      	lsrs	r5, r7
     2ea:	408a      	lsls	r2, r1
     2ec:	ea4c 0c03 	orr.w	ip, ip, r3
     2f0:	fa20 f307 	lsr.w	r3, r0, r7
     2f4:	ea4f 491c 	mov.w	r9, ip, lsr #16
     2f8:	431c      	orrs	r4, r3
     2fa:	fa1f fe8c 	uxth.w	lr, ip
     2fe:	fa00 f301 	lsl.w	r3, r0, r1
     302:	0c20      	lsrs	r0, r4, #16
     304:	fbb5 f8f9 	udiv	r8, r5, r9
     308:	fb09 5518 	mls	r5, r9, r8, r5
     30c:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
     310:	fb08 f00e 	mul.w	r0, r8, lr
     314:	42a8      	cmp	r0, r5
     316:	d90f      	bls.n	338 <CONFIG_SRAM_SIZE+0x178>
     318:	eb1c 0505 	adds.w	r5, ip, r5
     31c:	f108 3aff 	add.w	sl, r8, #4294967295
     320:	bf2c      	ite	cs
     322:	f04f 0b01 	movcs.w	fp, #1
     326:	f04f 0b00 	movcc.w	fp, #0
     32a:	42a8      	cmp	r0, r5
     32c:	d903      	bls.n	336 <CONFIG_SRAM_SIZE+0x176>
     32e:	f1bb 0f00 	cmp.w	fp, #0
     332:	f000 808c 	beq.w	44e <CONFIG_FLASH_SIZE+0x4e>
     336:	46d0      	mov	r8, sl
     338:	1a2d      	subs	r5, r5, r0
     33a:	b2a4      	uxth	r4, r4
     33c:	fbb5 f0f9 	udiv	r0, r5, r9
     340:	fb09 5510 	mls	r5, r9, r0, r5
     344:	fb00 fe0e 	mul.w	lr, r0, lr
     348:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     34c:	45ae      	cmp	lr, r5
     34e:	d907      	bls.n	360 <CONFIG_SRAM_SIZE+0x1a0>
     350:	eb1c 0505 	adds.w	r5, ip, r5
     354:	f100 34ff 	add.w	r4, r0, #4294967295
     358:	d201      	bcs.n	35e <CONFIG_SRAM_SIZE+0x19e>
     35a:	45ae      	cmp	lr, r5
     35c:	d87e      	bhi.n	45c <CONFIG_FLASH_SIZE+0x5c>
     35e:	4620      	mov	r0, r4
     360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     364:	eba5 050e 	sub.w	r5, r5, lr
     368:	fba0 9802 	umull	r9, r8, r0, r2
     36c:	4545      	cmp	r5, r8
     36e:	464c      	mov	r4, r9
     370:	46c6      	mov	lr, r8
     372:	d302      	bcc.n	37a <CONFIG_SRAM_SIZE+0x1ba>
     374:	d106      	bne.n	384 <CONFIG_SRAM_SIZE+0x1c4>
     376:	454b      	cmp	r3, r9
     378:	d204      	bcs.n	384 <CONFIG_SRAM_SIZE+0x1c4>
     37a:	3801      	subs	r0, #1
     37c:	ebb9 0402 	subs.w	r4, r9, r2
     380:	eb68 0e0c 	sbc.w	lr, r8, ip
     384:	2e00      	cmp	r6, #0
     386:	d06f      	beq.n	468 <CONFIG_FLASH_SIZE+0x68>
     388:	1b1a      	subs	r2, r3, r4
     38a:	eb65 050e 	sbc.w	r5, r5, lr
     38e:	fa22 f301 	lsr.w	r3, r2, r1
     392:	fa05 f707 	lsl.w	r7, r5, r7
     396:	40cd      	lsrs	r5, r1
     398:	2100      	movs	r1, #0
     39a:	431f      	orrs	r7, r3
     39c:	e9c6 7500 	strd	r7, r5, [r6]
     3a0:	e73e      	b.n	220 <CONFIG_SRAM_SIZE+0x60>
     3a2:	fa02 fc03 	lsl.w	ip, r2, r3
     3a6:	f1c3 0020 	rsb	r0, r3, #32
     3aa:	fa01 f203 	lsl.w	r2, r1, r3
     3ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
     3b2:	40c1      	lsrs	r1, r0
     3b4:	fa24 f500 	lsr.w	r5, r4, r0
     3b8:	fa1f f78c 	uxth.w	r7, ip
     3bc:	409c      	lsls	r4, r3
     3be:	4315      	orrs	r5, r2
     3c0:	fbb1 f0fe 	udiv	r0, r1, lr
     3c4:	0c2a      	lsrs	r2, r5, #16
     3c6:	fb0e 1110 	mls	r1, lr, r0, r1
     3ca:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
     3ce:	fb00 f107 	mul.w	r1, r0, r7
     3d2:	4291      	cmp	r1, r2
     3d4:	d90e      	bls.n	3f4 <CONFIG_SRAM_SIZE+0x234>
     3d6:	eb1c 0202 	adds.w	r2, ip, r2
     3da:	f100 38ff 	add.w	r8, r0, #4294967295
     3de:	bf2c      	ite	cs
     3e0:	f04f 0901 	movcs.w	r9, #1
     3e4:	f04f 0900 	movcc.w	r9, #0
     3e8:	4291      	cmp	r1, r2
     3ea:	d902      	bls.n	3f2 <CONFIG_SRAM_SIZE+0x232>
     3ec:	f1b9 0f00 	cmp.w	r9, #0
     3f0:	d031      	beq.n	456 <CONFIG_FLASH_SIZE+0x56>
     3f2:	4640      	mov	r0, r8
     3f4:	1a52      	subs	r2, r2, r1
     3f6:	b2ad      	uxth	r5, r5
     3f8:	fbb2 f1fe 	udiv	r1, r2, lr
     3fc:	fb0e 2211 	mls	r2, lr, r1, r2
     400:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
     404:	fb01 f207 	mul.w	r2, r1, r7
     408:	42aa      	cmp	r2, r5
     40a:	d907      	bls.n	41c <CONFIG_FLASH_SIZE+0x1c>
     40c:	eb1c 0505 	adds.w	r5, ip, r5
     410:	f101 38ff 	add.w	r8, r1, #4294967295
     414:	d201      	bcs.n	41a <CONFIG_FLASH_SIZE+0x1a>
     416:	42aa      	cmp	r2, r5
     418:	d823      	bhi.n	462 <CONFIG_FLASH_SIZE+0x62>
     41a:	4641      	mov	r1, r8
     41c:	1aad      	subs	r5, r5, r2
     41e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     422:	e726      	b.n	272 <CONFIG_SRAM_SIZE+0xb2>
     424:	4631      	mov	r1, r6
     426:	4630      	mov	r0, r6
     428:	e6fa      	b.n	220 <CONFIG_SRAM_SIZE+0x60>
     42a:	1a84      	subs	r4, r0, r2
     42c:	eb65 0303 	sbc.w	r3, r5, r3
     430:	2001      	movs	r0, #1
     432:	461f      	mov	r7, r3
     434:	e70c      	b.n	250 <CONFIG_SRAM_SIZE+0x90>
     436:	4464      	add	r4, ip
     438:	3802      	subs	r0, #2
     43a:	e74a      	b.n	2d2 <CONFIG_SRAM_SIZE+0x112>
     43c:	4464      	add	r4, ip
     43e:	3802      	subs	r0, #2
     440:	e6e4      	b.n	20c <CONFIG_SRAM_SIZE+0x4c>
     442:	3a02      	subs	r2, #2
     444:	4465      	add	r5, ip
     446:	e72f      	b.n	2a8 <CONFIG_SRAM_SIZE+0xe8>
     448:	3902      	subs	r1, #2
     44a:	4462      	add	r2, ip
     44c:	e6c9      	b.n	1e2 <CONFIG_SRAM_SIZE+0x22>
     44e:	f1a8 0802 	sub.w	r8, r8, #2
     452:	4465      	add	r5, ip
     454:	e770      	b.n	338 <CONFIG_SRAM_SIZE+0x178>
     456:	3802      	subs	r0, #2
     458:	4462      	add	r2, ip
     45a:	e7cb      	b.n	3f4 <CONFIG_SRAM_SIZE+0x234>
     45c:	3802      	subs	r0, #2
     45e:	4465      	add	r5, ip
     460:	e77e      	b.n	360 <CONFIG_SRAM_SIZE+0x1a0>
     462:	3902      	subs	r1, #2
     464:	4465      	add	r5, ip
     466:	e7d9      	b.n	41c <CONFIG_FLASH_SIZE+0x1c>
     468:	4631      	mov	r1, r6
     46a:	e6d9      	b.n	220 <CONFIG_SRAM_SIZE+0x60>

0000046c <__aeabi_idiv0>:
     46c:	4770      	bx	lr
     46e:	bf00      	nop

00000470 <main>:

void main(void)
{
	int x = 5;
	int y = 2;
	int result = multiply(x, y);
     470:	2102      	movs	r1, #2
{
     472:	b510      	push	{r4, lr}
	int result = multiply(x, y);
     474:	2005      	movs	r0, #5
     476:	f002 ff47 	bl	3308 <multiply>
	printk("%d times %d equals %d\n", x, y, result);
     47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	int result = multiply(x, y);
     47e:	4603      	mov	r3, r0
	printk("%d times %d equals %d\n", x, y, result);
     480:	2202      	movs	r2, #2
     482:	2105      	movs	r1, #5
     484:	4801      	ldr	r0, [pc, #4]	; (48c <main+0x1c>)
     486:	f002 bf61 	b.w	334c <printk>
     48a:	bf00      	nop
     48c:	0000419c 	.word	0x0000419c

00000490 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     490:	680b      	ldr	r3, [r1, #0]
     492:	3301      	adds	r3, #1
     494:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     496:	4b01      	ldr	r3, [pc, #4]	; (49c <char_out+0xc>)
     498:	681b      	ldr	r3, [r3, #0]
     49a:	4718      	bx	r3
     49c:	20000000 	.word	0x20000000

000004a0 <__printk_hook_install>:
	_char_out = fn;
     4a0:	4b01      	ldr	r3, [pc, #4]	; (4a8 <__printk_hook_install+0x8>)
     4a2:	6018      	str	r0, [r3, #0]
}
     4a4:	4770      	bx	lr
     4a6:	bf00      	nop
     4a8:	20000000 	.word	0x20000000

000004ac <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     4ac:	b507      	push	{r0, r1, r2, lr}
     4ae:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     4b0:	2100      	movs	r1, #0
{
     4b2:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
     4b4:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     4b6:	4803      	ldr	r0, [pc, #12]	; (4c4 <vprintk+0x18>)
     4b8:	a901      	add	r1, sp, #4
     4ba:	f000 f8e5 	bl	688 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     4be:	b003      	add	sp, #12
     4c0:	f85d fb04 	ldr.w	pc, [sp], #4
     4c4:	00000491 	.word	0x00000491

000004c8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     4c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4cc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
{
     4d0:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     4d2:	f019 0808 	ands.w	r8, r9, #8
{
     4d6:	4693      	mov	fp, r2
	if (processing) {
     4d8:	d00d      	beq.n	4f6 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     4da:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     4dc:	bf0c      	ite	eq
     4de:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     4e2:	f049 0920 	orrne.w	r9, r9, #32
     4e6:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     4ea:	f38b 8811 	msr	BASEPRI, fp
     4ee:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     4f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     4f6:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     4fa:	2902      	cmp	r1, #2
     4fc:	d107      	bne.n	50e <process_event+0x46>
			evt = process_recheck(mgr);
     4fe:	4620      	mov	r0, r4
     500:	f002 ff31 	bl	3366 <process_recheck>
		if (evt == EVT_NOP) {
     504:	2800      	cmp	r0, #0
     506:	d0f0      	beq.n	4ea <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     508:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     50a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     50c:	d14e      	bne.n	5ac <process_event+0xe4>
			res = mgr->last_res;
     50e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     510:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     512:	2f00      	cmp	r7, #0
     514:	da15      	bge.n	542 <process_event+0x7a>
		*clients = mgr->clients;
     516:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     518:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     51c:	e9c4 8800 	strd	r8, r8, [r4]
     520:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     524:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     526:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     528:	8b21      	ldrh	r1, [r4, #24]
     52a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     52e:	45ca      	cmp	sl, r9
     530:	d002      	beq.n	538 <process_event+0x70>
		if (do_monitors
     532:	68a3      	ldr	r3, [r4, #8]
     534:	2b00      	cmp	r3, #0
     536:	d15a      	bne.n	5ee <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     538:	b90d      	cbnz	r5, 53e <process_event+0x76>
		    || (transit != NULL)) {
     53a:	2e00      	cmp	r6, #0
     53c:	d071      	beq.n	622 <process_event+0x15a>
     53e:	2300      	movs	r3, #0
     540:	e056      	b.n	5f0 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     542:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     546:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     548:	2a01      	cmp	r2, #1
     54a:	d81e      	bhi.n	58a <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     54c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     550:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     552:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     554:	b289      	uxth	r1, r1
     556:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     55a:	d10a      	bne.n	572 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     55c:	b13d      	cbz	r5, 56e <process_event+0xa6>
     55e:	462a      	mov	r2, r5
     560:	8b63      	ldrh	r3, [r4, #26]

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     562:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     564:	3301      	adds	r3, #1
     566:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     568:	2a00      	cmp	r2, #0
     56a:	d1fa      	bne.n	562 <process_event+0x9a>
     56c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     56e:	f041 0102 	orr.w	r1, r1, #2
		if (process_recheck(mgr) != EVT_NOP) {
     572:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     574:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     576:	f002 fef6 	bl	3366 <process_recheck>
     57a:	4606      	mov	r6, r0
     57c:	2800      	cmp	r0, #0
     57e:	d0d3      	beq.n	528 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     580:	8b23      	ldrh	r3, [r4, #24]
     582:	f043 0320 	orr.w	r3, r3, #32
     586:	8323      	strh	r3, [r4, #24]
     588:	e7cd      	b.n	526 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     58a:	2b04      	cmp	r3, #4
     58c:	d10c      	bne.n	5a8 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     58e:	f021 0107 	bic.w	r1, r1, #7
     592:	b289      	uxth	r1, r1
		if (process_recheck(mgr) != EVT_NOP) {
     594:	4620      	mov	r0, r4
	mgr->flags = (state & ONOFF_STATE_MASK)
     596:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     598:	f002 fee5 	bl	3366 <process_recheck>
     59c:	4605      	mov	r5, r0
     59e:	2800      	cmp	r0, #0
     5a0:	d0c1      	beq.n	526 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5a2:	f041 0120 	orr.w	r1, r1, #32
     5a6:	8321      	strh	r1, [r4, #24]
     5a8:	2500      	movs	r5, #0
     5aa:	e7bc      	b.n	526 <process_event+0x5e>
		} else if (evt == EVT_START) {
     5ac:	2803      	cmp	r0, #3
     5ae:	d109      	bne.n	5c4 <process_event+0xfc>
			transit = mgr->transitions->start;
     5b0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5b2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     5b6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5b8:	f043 0306 	orr.w	r3, r3, #6
}
     5bc:	2500      	movs	r5, #0
	mgr->flags = (state & ONOFF_STATE_MASK)
     5be:	8323      	strh	r3, [r4, #24]
		res = 0;
     5c0:	462f      	mov	r7, r5
     5c2:	e7b1      	b.n	528 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     5c4:	2804      	cmp	r0, #4
     5c6:	d106      	bne.n	5d6 <process_event+0x10e>
			transit = mgr->transitions->stop;
     5c8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5ca:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     5ce:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5d0:	f043 0304 	orr.w	r3, r3, #4
     5d4:	e7f2      	b.n	5bc <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     5d6:	2805      	cmp	r0, #5
     5d8:	d106      	bne.n	5e8 <process_event+0x120>
			transit = mgr->transitions->reset;
     5da:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5dc:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     5e0:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5e2:	f043 0305 	orr.w	r3, r3, #5
     5e6:	e7e9      	b.n	5bc <process_event+0xf4>
     5e8:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     5ea:	462e      	mov	r6, r5
     5ec:	e7e8      	b.n	5c0 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     5ee:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     5f0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     5f4:	8321      	strh	r1, [r4, #24]
     5f6:	f38b 8811 	msr	BASEPRI, fp
     5fa:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     5fe:	b9fb      	cbnz	r3, 640 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     600:	bb85      	cbnz	r5, 664 <process_event+0x19c>
			if (transit != NULL) {
     602:	b116      	cbz	r6, 60a <process_event+0x142>
				transit(mgr, transition_complete);
     604:	4620      	mov	r0, r4
     606:	491f      	ldr	r1, [pc, #124]	; (684 <process_event+0x1bc>)
     608:	47b0      	blx	r6
	__asm__ volatile(
     60a:	f04f 0320 	mov.w	r3, #32
     60e:	f3ef 8b11 	mrs	fp, BASEPRI
     612:	f383 8811 	msr	BASEPRI, r3
     616:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     61a:	8b23      	ldrh	r3, [r4, #24]
     61c:	f023 0308 	bic.w	r3, r3, #8
     620:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     622:	8b23      	ldrh	r3, [r4, #24]
     624:	06da      	lsls	r2, r3, #27
     626:	d525      	bpl.n	674 <process_event+0x1ac>
			evt = EVT_COMPLETE;
     628:	2101      	movs	r1, #1
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     62a:	f023 0310 	bic.w	r3, r3, #16
     62e:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
     630:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     634:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     638:	2900      	cmp	r1, #0
     63a:	f47f af5e 	bne.w	4fa <process_event+0x32>
out:
     63e:	e754      	b.n	4ea <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     640:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     642:	2900      	cmp	r1, #0
     644:	d0dc      	beq.n	600 <process_event+0x138>
	return node->next;
     646:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     64a:	463b      	mov	r3, r7
     64c:	4652      	mov	r2, sl
     64e:	4620      	mov	r0, r4
     650:	f8d1 b004 	ldr.w	fp, [r1, #4]
     654:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     656:	f1b9 0f00 	cmp.w	r9, #0
     65a:	d0d1      	beq.n	600 <process_event+0x138>
     65c:	4649      	mov	r1, r9
     65e:	f8d9 9000 	ldr.w	r9, [r9]
     662:	e7f2      	b.n	64a <process_event+0x182>
     664:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     666:	463b      	mov	r3, r7
     668:	4652      	mov	r2, sl
     66a:	4620      	mov	r0, r4
     66c:	682d      	ldr	r5, [r5, #0]
     66e:	f002 fe96 	bl	339e <notify_one>
     672:	e7c5      	b.n	600 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     674:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     678:	bf1e      	ittt	ne
     67a:	f023 0320 	bicne.w	r3, r3, #32
			evt = EVT_RECHECK;
     67e:	2102      	movne	r1, #2
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     680:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     682:	e7d5      	b.n	630 <process_event+0x168>
     684:	000033cb 	.word	0x000033cb

00000688 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     68c:	468b      	mov	fp, r1
     68e:	4692      	mov	sl, r2
     690:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     692:	2500      	movs	r5, #0
{
     694:	b091      	sub	sp, #68	; 0x44
     696:	9002      	str	r0, [sp, #8]
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     698:	f89a 0000 	ldrb.w	r0, [sl]
     69c:	b908      	cbnz	r0, 6a2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     69e:	4628      	mov	r0, r5
     6a0:	e35f      	b.n	d62 <CONFIG_ISR_STACK_SIZE+0x562>
		if (*fp != '%') {
     6a2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     6a4:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     6a8:	d007      	beq.n	6ba <cbvprintf+0x32>
			OUTC('%');
     6aa:	4659      	mov	r1, fp
     6ac:	9b02      	ldr	r3, [sp, #8]
     6ae:	4798      	blx	r3
     6b0:	2800      	cmp	r0, #0
     6b2:	f2c0 8356 	blt.w	d62 <CONFIG_ISR_STACK_SIZE+0x562>
     6b6:	3501      	adds	r5, #1
			break;
     6b8:	e212      	b.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
		} state = {
     6ba:	2218      	movs	r2, #24
     6bc:	2100      	movs	r1, #0
     6be:	a80a      	add	r0, sp, #40	; 0x28
     6c0:	f003 f896 	bl	37f0 <memset>
	if (*sp == '%') {
     6c4:	f89a 3001 	ldrb.w	r3, [sl, #1]
     6c8:	2b25      	cmp	r3, #37	; 0x25
     6ca:	d078      	beq.n	7be <cbvprintf+0x136>
     6cc:	2200      	movs	r2, #0
     6ce:	4610      	mov	r0, r2
     6d0:	4696      	mov	lr, r2
     6d2:	4694      	mov	ip, r2
     6d4:	4616      	mov	r6, r2
     6d6:	4639      	mov	r1, r7
		switch (*sp) {
     6d8:	f817 3b01 	ldrb.w	r3, [r7], #1
     6dc:	2b2b      	cmp	r3, #43	; 0x2b
     6de:	f000 809d 	beq.w	81c <CONFIG_ISR_STACK_SIZE+0x1c>
     6e2:	f200 8094 	bhi.w	80e <CONFIG_ISR_STACK_SIZE+0xe>
     6e6:	2b20      	cmp	r3, #32
     6e8:	f000 809b 	beq.w	822 <CONFIG_ISR_STACK_SIZE+0x22>
     6ec:	2b23      	cmp	r3, #35	; 0x23
     6ee:	f000 809b 	beq.w	828 <CONFIG_ISR_STACK_SIZE+0x28>
     6f2:	b12e      	cbz	r6, 700 <cbvprintf+0x78>
     6f4:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     6f8:	f046 0604 	orr.w	r6, r6, #4
     6fc:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     700:	f1bc 0f00 	cmp.w	ip, #0
     704:	d005      	beq.n	712 <cbvprintf+0x8a>
     706:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     70a:	f046 0608 	orr.w	r6, r6, #8
     70e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     712:	f1be 0f00 	cmp.w	lr, #0
     716:	d005      	beq.n	724 <cbvprintf+0x9c>
     718:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     71c:	f046 0610 	orr.w	r6, r6, #16
     720:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     724:	b128      	cbz	r0, 732 <cbvprintf+0xaa>
     726:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     72a:	f040 0020 	orr.w	r0, r0, #32
     72e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     732:	b12a      	cbz	r2, 740 <cbvprintf+0xb8>
     734:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     73c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     740:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     744:	f002 0044 	and.w	r0, r2, #68	; 0x44
     748:	2844      	cmp	r0, #68	; 0x44
     74a:	d103      	bne.n	754 <cbvprintf+0xcc>
		conv->flag_zero = false;
     74c:	f36f 1286 	bfc	r2, #6, #1
     750:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     754:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     758:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     75a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     75e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     762:	d17b      	bne.n	85c <CONFIG_ISR_STACK_SIZE+0x5c>
		conv->width_star = true;
     764:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
			++sp;
     768:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     76a:	f042 0201 	orr.w	r2, r2, #1
     76e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     772:	781a      	ldrb	r2, [r3, #0]
     774:	2a2e      	cmp	r2, #46	; 0x2e
     776:	bf0c      	ite	eq
     778:	2101      	moveq	r1, #1
     77a:	2100      	movne	r1, #0
     77c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     780:	f361 0241 	bfi	r2, r1, #1, #1
     784:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     788:	d174      	bne.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
	if (*sp == '*') {
     78a:	785a      	ldrb	r2, [r3, #1]
     78c:	2a2a      	cmp	r2, #42	; 0x2a
     78e:	d06a      	beq.n	866 <CONFIG_ISR_STACK_SIZE+0x66>
	size_t val = 0;
     790:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     792:	260a      	movs	r6, #10
	++sp;
     794:	3301      	adds	r3, #1
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     796:	4618      	mov	r0, r3
     798:	f810 2b01 	ldrb.w	r2, [r0], #1
     79c:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7a0:	2f09      	cmp	r7, #9
     7a2:	f240 808e 	bls.w	8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
	conv->unsupported |= ((conv->prec_value < 0)
     7a6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     7aa:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     7ac:	f3c2 0040 	ubfx	r0, r2, #1, #1
     7b0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     7b4:	f361 0241 	bfi	r2, r1, #1, #1
     7b8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     7bc:	e05a      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
		conv->specifier = *sp++;
     7be:	f10a 0702 	add.w	r7, sl, #2
     7c2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     7c6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     7ca:	07d9      	lsls	r1, r3, #31
     7cc:	f140 8149 	bpl.w	a62 <CONFIG_ISR_STACK_SIZE+0x262>
			width = va_arg(ap, int);
     7d0:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     7d4:	f1b9 0f00 	cmp.w	r9, #0
     7d8:	da07      	bge.n	7ea <cbvprintf+0x162>
				conv->flag_dash = true;
     7da:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				width = -width;
     7de:	f1c9 0900 	rsb	r9, r9, #0
				conv->flag_dash = true;
     7e2:	f042 0204 	orr.w	r2, r2, #4
     7e6:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
		if (conv->prec_star) {
     7ea:	075a      	lsls	r2, r3, #29
     7ec:	f140 8142 	bpl.w	a74 <CONFIG_ISR_STACK_SIZE+0x274>
			int arg = va_arg(ap, int);
     7f0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     7f4:	f1b8 0f00 	cmp.w	r8, #0
     7f8:	f280 8141 	bge.w	a7e <CONFIG_ISR_STACK_SIZE+0x27e>
				conv->prec_present = false;
     7fc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     800:	f36f 0341 	bfc	r3, #1, #1
     804:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     808:	f04f 38ff 	mov.w	r8, #4294967295
     80c:	e137      	b.n	a7e <CONFIG_ISR_STACK_SIZE+0x27e>
		switch (*sp) {
     80e:	2b2d      	cmp	r3, #45	; 0x2d
     810:	d00c      	beq.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
     812:	2b30      	cmp	r3, #48	; 0x30
     814:	f47f af6d 	bne.w	6f2 <cbvprintf+0x6a>
			conv->flag_zero = true;
     818:	2201      	movs	r2, #1
	} while (loop);
     81a:	e75c      	b.n	6d6 <cbvprintf+0x4e>
			conv->flag_plus = true;
     81c:	f04f 0c01 	mov.w	ip, #1
     820:	e759      	b.n	6d6 <cbvprintf+0x4e>
			conv->flag_space = true;
     822:	f04f 0e01 	mov.w	lr, #1
     826:	e756      	b.n	6d6 <cbvprintf+0x4e>
			conv->flag_hash = true;
     828:	2001      	movs	r0, #1
     82a:	e754      	b.n	6d6 <cbvprintf+0x4e>
		switch (*sp) {
     82c:	2601      	movs	r6, #1
     82e:	e752      	b.n	6d6 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     830:	4633      	mov	r3, r6
     832:	fb0c 0202 	mla	r2, ip, r2, r0
     836:	3a30      	subs	r2, #48	; 0x30
     838:	461e      	mov	r6, r3
     83a:	f816 0b01 	ldrb.w	r0, [r6], #1
     83e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     842:	2f09      	cmp	r7, #9
     844:	d9f4      	bls.n	830 <CONFIG_ISR_STACK_SIZE+0x30>
	if (sp != wp) {
     846:	4299      	cmp	r1, r3
     848:	d093      	beq.n	772 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     84a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     84e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     850:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     852:	f362 0141 	bfi	r1, r2, #1, #1
     856:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     85a:	e78a      	b.n	772 <cbvprintf+0xea>
     85c:	460b      	mov	r3, r1
	size_t val = 0;
     85e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     860:	f04f 0c0a 	mov.w	ip, #10
     864:	e7e8      	b.n	838 <CONFIG_ISR_STACK_SIZE+0x38>
		conv->prec_star = true;
     866:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     86a:	3302      	adds	r3, #2
		conv->prec_star = true;
     86c:	f042 0204 	orr.w	r2, r2, #4
     870:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	switch (*sp) {
     874:	461f      	mov	r7, r3
     876:	f817 2b01 	ldrb.w	r2, [r7], #1
     87a:	2a6c      	cmp	r2, #108	; 0x6c
     87c:	d041      	beq.n	902 <CONFIG_ISR_STACK_SIZE+0x102>
     87e:	d825      	bhi.n	8cc <CONFIG_ISR_STACK_SIZE+0xcc>
     880:	2a68      	cmp	r2, #104	; 0x68
     882:	d02b      	beq.n	8dc <CONFIG_ISR_STACK_SIZE+0xdc>
     884:	2a6a      	cmp	r2, #106	; 0x6a
     886:	d046      	beq.n	916 <CONFIG_ISR_STACK_SIZE+0x116>
     888:	2a4c      	cmp	r2, #76	; 0x4c
     88a:	d04c      	beq.n	926 <CONFIG_ISR_STACK_SIZE+0x126>
     88c:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     88e:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     892:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	switch (conv->specifier) {
     896:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
     898:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     89c:	f200 80d9 	bhi.w	a52 <CONFIG_ISR_STACK_SIZE+0x252>
     8a0:	2a57      	cmp	r2, #87	; 0x57
     8a2:	d84d      	bhi.n	940 <CONFIG_ISR_STACK_SIZE+0x140>
     8a4:	2a41      	cmp	r2, #65	; 0x41
     8a6:	d003      	beq.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
     8a8:	3a45      	subs	r2, #69	; 0x45
     8aa:	2a02      	cmp	r2, #2
     8ac:	f200 80d1 	bhi.w	a52 <CONFIG_ISR_STACK_SIZE+0x252>
		conv->specifier_cat = SPECIFIER_FP;
     8b0:	2204      	movs	r2, #4
     8b2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     8b6:	f362 0302 	bfi	r3, r2, #0, #3
     8ba:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     8be:	2301      	movs	r3, #1
			break;
     8c0:	e09e      	b.n	a00 <CONFIG_ISR_STACK_SIZE+0x200>
		val = 10U * val + *sp++ - '0';
     8c2:	fb06 2101 	mla	r1, r6, r1, r2
     8c6:	4603      	mov	r3, r0
     8c8:	3930      	subs	r1, #48	; 0x30
     8ca:	e764      	b.n	796 <cbvprintf+0x10e>
	switch (*sp) {
     8cc:	2a74      	cmp	r2, #116	; 0x74
     8ce:	d026      	beq.n	91e <CONFIG_ISR_STACK_SIZE+0x11e>
     8d0:	2a7a      	cmp	r2, #122	; 0x7a
     8d2:	d1db      	bne.n	88c <CONFIG_ISR_STACK_SIZE+0x8c>
		conv->length_mod = LENGTH_Z;
     8d4:	2206      	movs	r2, #6
     8d6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     8da:	e00d      	b.n	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
		if (*++sp == 'h') {
     8dc:	785a      	ldrb	r2, [r3, #1]
     8de:	2a68      	cmp	r2, #104	; 0x68
     8e0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8e4:	d106      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
			conv->length_mod = LENGTH_HH;
     8e6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     8e8:	f361 02c6 	bfi	r2, r1, #3, #4
     8ec:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     8f0:	1c9f      	adds	r7, r3, #2
     8f2:	e7cc      	b.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
			conv->length_mod = LENGTH_H;
     8f4:	4613      	mov	r3, r2
     8f6:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     8f8:	f362 03c6 	bfi	r3, r2, #3, #4
     8fc:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     900:	e7c5      	b.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
		if (*++sp == 'l') {
     902:	785a      	ldrb	r2, [r3, #1]
     904:	2a6c      	cmp	r2, #108	; 0x6c
     906:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     90a:	d101      	bne.n	910 <CONFIG_ISR_STACK_SIZE+0x110>
			conv->length_mod = LENGTH_LL;
     90c:	2104      	movs	r1, #4
     90e:	e7eb      	b.n	8e8 <CONFIG_ISR_STACK_SIZE+0xe8>
			conv->length_mod = LENGTH_L;
     910:	4613      	mov	r3, r2
     912:	2203      	movs	r2, #3
     914:	e7f0      	b.n	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
		conv->length_mod = LENGTH_J;
     916:	2205      	movs	r2, #5
     918:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     91c:	e7ec      	b.n	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
		conv->length_mod = LENGTH_T;
     91e:	2207      	movs	r2, #7
     920:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     924:	e7e8      	b.n	8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
		conv->unsupported = true;
     926:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     92a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     92e:	f023 0302 	bic.w	r3, r3, #2
     932:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     936:	f043 0302 	orr.w	r3, r3, #2
     93a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     93e:	e7a6      	b.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
     940:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     944:	2920      	cmp	r1, #32
     946:	f200 8084 	bhi.w	a52 <CONFIG_ISR_STACK_SIZE+0x252>
     94a:	a001      	add	r0, pc, #4	; (adr r0, 950 <CONFIG_ISR_STACK_SIZE+0x150>)
     94c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     950:	00000a15 	.word	0x00000a15
     954:	00000a53 	.word	0x00000a53
     958:	00000a53 	.word	0x00000a53
     95c:	00000a53 	.word	0x00000a53
     960:	00000a53 	.word	0x00000a53
     964:	00000a53 	.word	0x00000a53
     968:	00000a53 	.word	0x00000a53
     96c:	00000a53 	.word	0x00000a53
     970:	00000a53 	.word	0x00000a53
     974:	000008b1 	.word	0x000008b1
     978:	00000a53 	.word	0x00000a53
     97c:	00000a15 	.word	0x00000a15
     980:	000009d5 	.word	0x000009d5
     984:	000008b1 	.word	0x000008b1
     988:	000008b1 	.word	0x000008b1
     98c:	000008b1 	.word	0x000008b1
     990:	00000a53 	.word	0x00000a53
     994:	000009d5 	.word	0x000009d5
     998:	00000a53 	.word	0x00000a53
     99c:	00000a53 	.word	0x00000a53
     9a0:	00000a53 	.word	0x00000a53
     9a4:	00000a53 	.word	0x00000a53
     9a8:	00000a1d 	.word	0x00000a1d
     9ac:	00000a15 	.word	0x00000a15
     9b0:	00000a39 	.word	0x00000a39
     9b4:	00000a53 	.word	0x00000a53
     9b8:	00000a53 	.word	0x00000a53
     9bc:	00000a39 	.word	0x00000a39
     9c0:	00000a53 	.word	0x00000a53
     9c4:	00000a15 	.word	0x00000a15
     9c8:	00000a53 	.word	0x00000a53
     9cc:	00000a53 	.word	0x00000a53
     9d0:	00000a15 	.word	0x00000a15
		conv->specifier_cat = SPECIFIER_SINT;
     9d4:	2001      	movs	r0, #1
     9d6:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     9da:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     9de:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     9e2:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     9e4:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     9e8:	bf02      	ittt	eq
     9ea:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     9ee:	f041 0101 	orreq.w	r1, r1, #1
     9f2:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     9f6:	2a63      	cmp	r2, #99	; 0x63
     9f8:	d131      	bne.n	a5e <CONFIG_ISR_STACK_SIZE+0x25e>
			unsupported = (conv->length_mod != LENGTH_NONE);
     9fa:	3b00      	subs	r3, #0
     9fc:	bf18      	it	ne
     9fe:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     a00:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     a04:	f3c2 0140 	ubfx	r1, r2, #1, #1
     a08:	430b      	orrs	r3, r1
     a0a:	f363 0241 	bfi	r2, r3, #1, #1
     a0e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     a12:	e6d8      	b.n	7c6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
     a14:	2002      	movs	r0, #2
     a16:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     a1a:	e7de      	b.n	9da <CONFIG_ISR_STACK_SIZE+0x1da>
		conv->specifier_cat = SPECIFIER_PTR;
     a1c:	2103      	movs	r1, #3
     a1e:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     a22:	f003 0378 	and.w	r3, r3, #120	; 0x78
     a26:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     a2a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a2e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     a30:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     a34:	4143      	adcs	r3, r0
     a36:	e7e3      	b.n	a00 <CONFIG_ISR_STACK_SIZE+0x200>
		conv->specifier_cat = SPECIFIER_PTR;
     a38:	2103      	movs	r1, #3
     a3a:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     a3e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a42:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
     a46:	bf14      	ite	ne
     a48:	2301      	movne	r3, #1
     a4a:	2300      	moveq	r3, #0
		conv->specifier_cat = SPECIFIER_PTR;
     a4c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     a50:	e7d6      	b.n	a00 <CONFIG_ISR_STACK_SIZE+0x200>
		conv->invalid = true;
     a52:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     a56:	f043 0301 	orr.w	r3, r3, #1
     a5a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     a5e:	2300      	movs	r3, #0
     a60:	e7ce      	b.n	a00 <CONFIG_ISR_STACK_SIZE+0x200>
		} else if (conv->width_present) {
     a62:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     a66:	2a00      	cmp	r2, #0
		int width = -1;
     a68:	bfac      	ite	ge
     a6a:	f04f 39ff 	movge.w	r9, #4294967295
			width = conv->width_value;
     a6e:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
     a72:	e6ba      	b.n	7ea <cbvprintf+0x162>
		} else if (conv->prec_present) {
     a74:	079b      	lsls	r3, r3, #30
     a76:	f57f aec7 	bpl.w	808 <CONFIG_ISR_STACK_SIZE+0x8>
			precision = conv->prec_value;
     a7a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		conv->pad0_value = 0;
     a7e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     a80:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     a84:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
			= (enum length_mod_enum)conv->length_mod;
     a88:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		enum specifier_cat_enum specifier_cat
     a8c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     a90:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     a92:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     a96:	d138      	bne.n	b0a <CONFIG_ISR_STACK_SIZE+0x30a>
			switch (length_mod) {
     a98:	1ecb      	subs	r3, r1, #3
     a9a:	2b04      	cmp	r3, #4
     a9c:	d822      	bhi.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
     a9e:	e8df f003 	tbb	[pc, r3]
     aa2:	0903      	.short	0x0903
     aa4:	2109      	.short	0x2109
     aa6:	21          	.byte	0x21
     aa7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     aa8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     aac:	17da      	asrs	r2, r3, #31
     aae:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     ab2:	e006      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
					(sint_value_type)va_arg(ap, intmax_t);
     ab4:	3407      	adds	r4, #7
     ab6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     aba:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     abe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     ac2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     ac6:	f013 0603 	ands.w	r6, r3, #3
     aca:	d056      	beq.n	b7a <CONFIG_ISR_STACK_SIZE+0x37a>
			OUTS(sp, fp);
     acc:	463b      	mov	r3, r7
     ace:	4652      	mov	r2, sl
     ad0:	4659      	mov	r1, fp
     ad2:	9802      	ldr	r0, [sp, #8]
     ad4:	f002 fd42 	bl	355c <outs>
     ad8:	2800      	cmp	r0, #0
     ada:	f2c0 8142 	blt.w	d62 <CONFIG_ISR_STACK_SIZE+0x562>
     ade:	4405      	add	r5, r0
			continue;
     ae0:	46ba      	mov	sl, r7
     ae2:	e5d9      	b.n	698 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     ae4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     ae8:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     aea:	ea4f 72e3 	mov.w	r2, r3, asr #31
     aee:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     af2:	d105      	bne.n	b00 <CONFIG_ISR_STACK_SIZE+0x300>
				value->uint = (unsigned char)value->uint;
     af4:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     af8:	930a      	str	r3, [sp, #40]	; 0x28
     afa:	2300      	movs	r3, #0
     afc:	930b      	str	r3, [sp, #44]	; 0x2c
     afe:	e7e0      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
			} else if (length_mod == LENGTH_H) {
     b00:	2902      	cmp	r1, #2
     b02:	d1de      	bne.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
				value->sint = (short)value->sint;
     b04:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     b08:	e7d0      	b.n	aac <CONFIG_ISR_STACK_SIZE+0x2ac>
		} else if (specifier_cat == SPECIFIER_UINT) {
     b0a:	2b02      	cmp	r3, #2
     b0c:	d123      	bne.n	b56 <CONFIG_ISR_STACK_SIZE+0x356>
			switch (length_mod) {
     b0e:	1ecb      	subs	r3, r1, #3
     b10:	2b04      	cmp	r3, #4
     b12:	d813      	bhi.n	b3c <CONFIG_ISR_STACK_SIZE+0x33c>
     b14:	e8df f003 	tbb	[pc, r3]
     b18:	120a0a03 	.word	0x120a0a03
     b1c:	12          	.byte	0x12
     b1d:	00          	.byte	0x00
				if ((!WCHAR_IS_SIGNED)
     b1e:	2300      	movs	r3, #0
					value->uint = (wchar_t)va_arg(ap,
     b20:	6822      	ldr	r2, [r4, #0]
				value->sint = va_arg(ap, int);
     b22:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     b24:	920a      	str	r2, [sp, #40]	; 0x28
     b26:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     b28:	4604      	mov	r4, r0
     b2a:	e7ca      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
					(uint_value_type)va_arg(ap,
     b2c:	1de0      	adds	r0, r4, #7
     b2e:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     b32:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     b36:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     b3a:	e7f5      	b.n	b28 <CONFIG_ISR_STACK_SIZE+0x328>
					(uint_value_type)va_arg(ap, size_t);
     b3c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     b40:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     b42:	930a      	str	r3, [sp, #40]	; 0x28
     b44:	f04f 0300 	mov.w	r3, #0
     b48:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     b4a:	d0d3      	beq.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
			} else if (length_mod == LENGTH_H) {
     b4c:	2902      	cmp	r1, #2
     b4e:	d1b8      	bne.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
				value->uint = (unsigned short)value->uint;
     b50:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     b54:	e7d0      	b.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
		} else if (specifier_cat == SPECIFIER_FP) {
     b56:	2b04      	cmp	r3, #4
     b58:	d109      	bne.n	b6e <CONFIG_ISR_STACK_SIZE+0x36e>
					(sint_value_type)va_arg(ap, long long);
     b5a:	1de3      	adds	r3, r4, #7
     b5c:	f023 0307 	bic.w	r3, r3, #7
     b60:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     b64:	e9d3 2300 	ldrd	r2, r3, [r3]
     b68:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     b6c:	e7a9      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
		} else if (specifier_cat == SPECIFIER_PTR) {
     b6e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     b70:	bf04      	itt	eq
     b72:	f854 3b04 	ldreq.w	r3, [r4], #4
     b76:	930a      	streq	r3, [sp, #40]	; 0x28
     b78:	e7a3      	b.n	ac2 <CONFIG_ISR_STACK_SIZE+0x2c2>
		switch (conv->specifier) {
     b7a:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     b7e:	2878      	cmp	r0, #120	; 0x78
     b80:	d8ae      	bhi.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
     b82:	2862      	cmp	r0, #98	; 0x62
     b84:	d822      	bhi.n	bcc <CONFIG_ISR_STACK_SIZE+0x3cc>
     b86:	2825      	cmp	r0, #37	; 0x25
     b88:	f43f ad8f 	beq.w	6aa <cbvprintf+0x22>
     b8c:	2858      	cmp	r0, #88	; 0x58
     b8e:	d1a7      	bne.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
			bps = encode_uint(value->uint, conv, buf, bpe);
     b90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     b94:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     b98:	9300      	str	r3, [sp, #0]
     b9a:	aa0c      	add	r2, sp, #48	; 0x30
     b9c:	ab04      	add	r3, sp, #16
     b9e:	f002 fc97 	bl	34d0 <encode_uint>
     ba2:	4682      	mov	sl, r0
			if (precision >= 0) {
     ba4:	f1b8 0f00 	cmp.w	r8, #0
     ba8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     bac:	db0c      	blt.n	bc8 <CONFIG_ISR_STACK_SIZE+0x3c8>
				conv->flag_zero = false;
     bae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     bb2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     bb6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     bba:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     bbc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     bc0:	d902      	bls.n	bc8 <CONFIG_ISR_STACK_SIZE+0x3c8>
					conv->pad0_value = precision - (int)len;
     bc2:	eba8 0303 	sub.w	r3, r8, r3
     bc6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     bc8:	4680      	mov	r8, r0
     bca:	e03d      	b.n	c48 <CONFIG_ISR_STACK_SIZE+0x448>
     bcc:	3863      	subs	r0, #99	; 0x63
     bce:	2815      	cmp	r0, #21
     bd0:	d886      	bhi.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
     bd2:	a201      	add	r2, pc, #4	; (adr r2, bd8 <CONFIG_ISR_STACK_SIZE+0x3d8>)
     bd4:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     bd8:	00000c59 	.word	0x00000c59
     bdc:	00000cbd 	.word	0x00000cbd
     be0:	00000ae1 	.word	0x00000ae1
     be4:	00000ae1 	.word	0x00000ae1
     be8:	00000ae1 	.word	0x00000ae1
     bec:	00000ae1 	.word	0x00000ae1
     bf0:	00000cbd 	.word	0x00000cbd
     bf4:	00000ae1 	.word	0x00000ae1
     bf8:	00000ae1 	.word	0x00000ae1
     bfc:	00000ae1 	.word	0x00000ae1
     c00:	00000ae1 	.word	0x00000ae1
     c04:	00000d17 	.word	0x00000d17
     c08:	00000ce5 	.word	0x00000ce5
     c0c:	00000ce9 	.word	0x00000ce9
     c10:	00000ae1 	.word	0x00000ae1
     c14:	00000ae1 	.word	0x00000ae1
     c18:	00000c31 	.word	0x00000c31
     c1c:	00000ae1 	.word	0x00000ae1
     c20:	00000ce5 	.word	0x00000ce5
     c24:	00000ae1 	.word	0x00000ae1
     c28:	00000ae1 	.word	0x00000ae1
     c2c:	00000ce5 	.word	0x00000ce5
			if (precision >= 0) {
     c30:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     c34:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     c38:	db0a      	blt.n	c50 <CONFIG_ISR_STACK_SIZE+0x450>
				len = strnlen(bps, precision);
     c3a:	4641      	mov	r1, r8
     c3c:	4650      	mov	r0, sl
     c3e:	f002 fd97 	bl	3770 <strnlen>
		char sign = 0;
     c42:	2600      	movs	r6, #0
			bpe = bps + len;
     c44:	eb0a 0800 	add.w	r8, sl, r0
		if (bps == NULL) {
     c48:	f1ba 0f00 	cmp.w	sl, #0
     c4c:	d10c      	bne.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
     c4e:	e747      	b.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
				len = strlen(bps);
     c50:	4650      	mov	r0, sl
     c52:	f002 fd86 	bl	3762 <strlen>
     c56:	e7f4      	b.n	c42 <CONFIG_ISR_STACK_SIZE+0x442>
			break;
     c58:	2600      	movs	r6, #0
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			bps = buf;
     c5c:	f10d 0a10 	add.w	sl, sp, #16
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     c60:	f88d 3010 	strb.w	r3, [sp, #16]
			bpe = buf + 1;
     c64:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     c68:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     c6c:	b106      	cbz	r6, c70 <CONFIG_ISR_STACK_SIZE+0x470>
			nj_len += 1U;
     c6e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     c70:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     c74:	06d0      	lsls	r0, r2, #27
     c76:	d568      	bpl.n	d4a <CONFIG_ISR_STACK_SIZE+0x54a>
			nj_len += 2U;
     c78:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     c7a:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     c7c:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     c7e:	bf48      	it	mi
     c80:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     c82:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     c84:	bf48      	it	mi
     c86:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     c88:	f1b9 0f00 	cmp.w	r9, #0
     c8c:	dd76      	ble.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
			if (!conv->flag_dash) {
     c8e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     c92:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     c96:	f3c2 0380 	ubfx	r3, r2, #2, #1
     c9a:	9303      	str	r3, [sp, #12]
     c9c:	0753      	lsls	r3, r2, #29
     c9e:	d46d      	bmi.n	d7c <CONFIG_ISR_STACK_SIZE+0x57c>
				if (conv->flag_zero) {
     ca0:	0650      	lsls	r0, r2, #25
     ca2:	d561      	bpl.n	d68 <CONFIG_ISR_STACK_SIZE+0x568>
					if (sign != 0) {
     ca4:	b146      	cbz	r6, cb8 <CONFIG_ISR_STACK_SIZE+0x4b8>
						OUTC(sign);
     ca6:	4659      	mov	r1, fp
     ca8:	4630      	mov	r0, r6
     caa:	9b02      	ldr	r3, [sp, #8]
     cac:	4798      	blx	r3
     cae:	2800      	cmp	r0, #0
     cb0:	db57      	blt.n	d62 <CONFIG_ISR_STACK_SIZE+0x562>
						sign = 0;
     cb2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     cb4:	3501      	adds	r5, #1
						sign = 0;
     cb6:	461e      	mov	r6, r3
					pad = '0';
     cb8:	2330      	movs	r3, #48	; 0x30
     cba:	e056      	b.n	d6a <CONFIG_ISR_STACK_SIZE+0x56a>
			if (conv->flag_plus) {
     cbc:	071e      	lsls	r6, r3, #28
     cbe:	d40f      	bmi.n	ce0 <CONFIG_ISR_STACK_SIZE+0x4e0>
				sign = ' ';
     cc0:	f013 0610 	ands.w	r6, r3, #16
     cc4:	bf18      	it	ne
     cc6:	2620      	movne	r6, #32
			sint = value->sint;
     cc8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     ccc:	2b00      	cmp	r3, #0
     cce:	f6bf af5f 	bge.w	b90 <CONFIG_ISR_STACK_SIZE+0x390>
				value->uint = (uint_value_type)-sint;
     cd2:	4252      	negs	r2, r2
     cd4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
				sign = '-';
     cd8:	262d      	movs	r6, #45	; 0x2d
				value->uint = (uint_value_type)-sint;
     cda:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     cde:	e757      	b.n	b90 <CONFIG_ISR_STACK_SIZE+0x390>
				sign = '+';
     ce0:	262b      	movs	r6, #43	; 0x2b
     ce2:	e7f1      	b.n	cc8 <CONFIG_ISR_STACK_SIZE+0x4c8>
		switch (conv->specifier) {
     ce4:	2600      	movs	r6, #0
     ce6:	e753      	b.n	b90 <CONFIG_ISR_STACK_SIZE+0x390>
			if (value->ptr != NULL) {
     ce8:	980a      	ldr	r0, [sp, #40]	; 0x28
     cea:	b340      	cbz	r0, d3e <CONFIG_ISR_STACK_SIZE+0x53e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     cec:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     cf0:	9300      	str	r3, [sp, #0]
     cf2:	2100      	movs	r1, #0
     cf4:	ab04      	add	r3, sp, #16
     cf6:	aa0c      	add	r2, sp, #48	; 0x30
     cf8:	f002 fbea 	bl	34d0 <encode_uint>
				conv->altform_0c = true;
     cfc:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d00:	4682      	mov	sl, r0
				conv->altform_0c = true;
     d02:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     d06:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     d0a:	f043 0310 	orr.w	r3, r3, #16
		char sign = 0;
     d0e:	2600      	movs	r6, #0
				conv->altform_0c = true;
     d10:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
				goto prec_int_pad0;
     d14:	e746      	b.n	ba4 <CONFIG_ISR_STACK_SIZE+0x3a4>
				store_count(conv, value->ptr, count);
     d16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     d18:	2907      	cmp	r1, #7
     d1a:	f63f aee1 	bhi.w	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
     d1e:	e8df f001 	tbb	[pc, r1]
     d22:	040c      	.short	0x040c
     d24:	08080c06 	.word	0x08080c06
     d28:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     d2a:	701d      	strb	r5, [r3, #0]
		break;
     d2c:	e6d8      	b.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
		*(short *)dp = (short)count;
     d2e:	801d      	strh	r5, [r3, #0]
		break;
     d30:	e6d6      	b.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
		*(intmax_t *)dp = (intmax_t)count;
     d32:	17ea      	asrs	r2, r5, #31
     d34:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     d38:	e6d2      	b.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d3a:	601d      	str	r5, [r3, #0]
		break;
     d3c:	e6d0      	b.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
			bps = "(nil)";
     d3e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; e08 <CONFIG_ISR_STACK_SIZE+0x608>
     d42:	4606      	mov	r6, r0
			bpe = bps + 5;
     d44:	f10a 0805 	add.w	r8, sl, #5
     d48:	e78e      	b.n	c68 <CONFIG_ISR_STACK_SIZE+0x468>
		} else if (conv->altform_0) {
     d4a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     d4c:	bf48      	it	mi
     d4e:	3301      	addmi	r3, #1
     d50:	e793      	b.n	c7a <CONFIG_ISR_STACK_SIZE+0x47a>
					OUTC(pad);
     d52:	4618      	mov	r0, r3
     d54:	9303      	str	r3, [sp, #12]
     d56:	4659      	mov	r1, fp
     d58:	9b02      	ldr	r3, [sp, #8]
     d5a:	4798      	blx	r3
     d5c:	2800      	cmp	r0, #0
     d5e:	9b03      	ldr	r3, [sp, #12]
     d60:	da04      	bge.n	d6c <CONFIG_ISR_STACK_SIZE+0x56c>
#undef OUTS
#undef OUTC
}
     d62:	b011      	add	sp, #68	; 0x44
     d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     d68:	2320      	movs	r3, #32
     d6a:	444d      	add	r5, r9
     d6c:	464a      	mov	r2, r9
				while (width-- > 0) {
     d6e:	2a00      	cmp	r2, #0
     d70:	eba5 0109 	sub.w	r1, r5, r9
     d74:	f109 39ff 	add.w	r9, r9, #4294967295
     d78:	dceb      	bgt.n	d52 <CONFIG_ISR_STACK_SIZE+0x552>
     d7a:	460d      	mov	r5, r1
		if (sign != 0) {
     d7c:	b136      	cbz	r6, d8c <CONFIG_ISR_STACK_SIZE+0x58c>
			OUTC(sign);
     d7e:	4659      	mov	r1, fp
     d80:	4630      	mov	r0, r6
     d82:	9b02      	ldr	r3, [sp, #8]
     d84:	4798      	blx	r3
     d86:	2800      	cmp	r0, #0
     d88:	dbeb      	blt.n	d62 <CONFIG_ISR_STACK_SIZE+0x562>
     d8a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     d8c:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     d90:	06d9      	lsls	r1, r3, #27
     d92:	d401      	bmi.n	d98 <CONFIG_ISR_STACK_SIZE+0x598>
     d94:	071a      	lsls	r2, r3, #28
     d96:	d506      	bpl.n	da6 <CONFIG_ISR_STACK_SIZE+0x5a6>
				OUTC('0');
     d98:	4659      	mov	r1, fp
     d9a:	2030      	movs	r0, #48	; 0x30
     d9c:	9b02      	ldr	r3, [sp, #8]
     d9e:	4798      	blx	r3
     da0:	2800      	cmp	r0, #0
     da2:	dbde      	blt.n	d62 <CONFIG_ISR_STACK_SIZE+0x562>
     da4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     da6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     daa:	06db      	lsls	r3, r3, #27
     dac:	d507      	bpl.n	dbe <CONFIG_ISR_STACK_SIZE+0x5be>
				OUTC(conv->specifier);
     dae:	4659      	mov	r1, fp
     db0:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     db4:	9b02      	ldr	r3, [sp, #8]
     db6:	4798      	blx	r3
     db8:	2800      	cmp	r0, #0
     dba:	dbd2      	blt.n	d62 <CONFIG_ISR_STACK_SIZE+0x562>
     dbc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     dbe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     dc0:	442e      	add	r6, r5
     dc2:	1b73      	subs	r3, r6, r5
     dc4:	2b00      	cmp	r3, #0
     dc6:	dc16      	bgt.n	df6 <CONFIG_ISR_STACK_SIZE+0x5f6>
			OUTS(bps, bpe);
     dc8:	4643      	mov	r3, r8
     dca:	4652      	mov	r2, sl
     dcc:	4659      	mov	r1, fp
     dce:	9802      	ldr	r0, [sp, #8]
     dd0:	f002 fbc4 	bl	355c <outs>
     dd4:	2800      	cmp	r0, #0
     dd6:	dbc4      	blt.n	d62 <CONFIG_ISR_STACK_SIZE+0x562>
     dd8:	4405      	add	r5, r0
		while (width > 0) {
     dda:	44a9      	add	r9, r5
     ddc:	eba9 0305 	sub.w	r3, r9, r5
     de0:	2b00      	cmp	r3, #0
     de2:	f77f ae7d 	ble.w	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
			OUTC(' ');
     de6:	4659      	mov	r1, fp
     de8:	2020      	movs	r0, #32
     dea:	9b02      	ldr	r3, [sp, #8]
     dec:	4798      	blx	r3
     dee:	2800      	cmp	r0, #0
     df0:	dbb7      	blt.n	d62 <CONFIG_ISR_STACK_SIZE+0x562>
     df2:	3501      	adds	r5, #1
			--width;
     df4:	e7f2      	b.n	ddc <CONFIG_ISR_STACK_SIZE+0x5dc>
				OUTC('0');
     df6:	4659      	mov	r1, fp
     df8:	2030      	movs	r0, #48	; 0x30
     dfa:	9b02      	ldr	r3, [sp, #8]
     dfc:	4798      	blx	r3
     dfe:	2800      	cmp	r0, #0
     e00:	dbaf      	blt.n	d62 <CONFIG_ISR_STACK_SIZE+0x562>
     e02:	3501      	adds	r5, #1
     e04:	e7dd      	b.n	dc2 <CONFIG_ISR_STACK_SIZE+0x5c2>
     e06:	bf00      	nop
     e08:	000041b3 	.word	0x000041b3

00000e0c <nrf_gpio_pin_mcu_select.constprop.0>:

#if defined(GPIO_PIN_CNF_MCUSEL_Msk)
NRF_STATIC_INLINE void nrf_gpio_pin_mcu_select(uint32_t pin_number, nrf_gpio_pin_mcusel_t mcu)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_MCUSEL_Msk;
     e0c:	4b05      	ldr	r3, [pc, #20]	; (e24 <nrf_gpio_pin_mcu_select.constprop.0+0x18>)
     e0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
     e12:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
     e16:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
    reg->PIN_CNF[pin_number] = cnf | (mcu << GPIO_PIN_CNF_MCUSEL_Pos);
     e1a:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
     e1e:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
     e22:	4770      	bx	lr
     e24:	50842500 	.word	0x50842500

00000e28 <nordicsemi_nrf53_init>:

#define LOG_LEVEL CONFIG_SOC_LOG_LEVEL
LOG_MODULE_REGISTER(soc);

static int nordicsemi_nrf53_init(const struct device *arg)
{
     e28:	b510      	push	{r4, lr}
     e2a:	f04f 0320 	mov.w	r3, #32
     e2e:	f3ef 8411 	mrs	r4, BASEPRI
     e32:	f383 8811 	msr	BASEPRI, r3
     e36:	f3bf 8f6f 	isb	sy

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_cache_enable(NRF_CACHE_Type * p_reg)
{
    p_reg->ENABLE = CACHE_ENABLE_ENABLE_Enabled;
     e3a:	2201      	movs	r2, #1
}

NRF_STATIC_INLINE void nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS_Type *     p_reg,
                                                    nrf_oscillators_lfxo_cap_t cap)
{
    p_reg->XOSC32KI.INTCAP = (uint32_t)cap;
     e3c:	490b      	ldr	r1, [pc, #44]	; (e6c <nordicsemi_nrf53_init+0x44>)
     e3e:	4b0c      	ldr	r3, [pc, #48]	; (e70 <nordicsemi_nrf53_init+0x48>)
#if defined(CONFIG_SOC_NRF5340_CPUAPP) && \
	!defined(CONFIG_TRUSTED_EXECUTION_NONSECURE) && \
	defined(CONFIG_SOC_ENABLE_LFXO)
	nrf_oscillators_lfxo_cap_set(NRF_OSCILLATORS,
				     NRF_OSCILLATORS_LFXO_CAP_6PF);
	nrf_gpio_pin_mcu_select(PIN_XL1, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
     e40:	2000      	movs	r0, #0
     e42:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
     e46:	f8c1 26d0 	str.w	r2, [r1, #1744]	; 0x6d0
     e4a:	f7ff ffdf 	bl	e0c <nrf_gpio_pin_mcu_select.constprop.0>
	nrf_gpio_pin_mcu_select(PIN_XL2, NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
     e4e:	4610      	mov	r0, r2
     e50:	f7ff ffdc 	bl	e0c <nrf_gpio_pin_mcu_select.constprop.0>
NRF_STATIC_INLINE void nrf_regulators_dcdcen_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
#if defined(REGULATORS_DCDCEN_DCDCEN_Msk)
    p_reg->DCDCEN = (enable ? REGULATORS_DCDCEN_DCDCEN_Msk : 0);
#else
    p_reg->VREGMAIN.DCDCEN = (enable ? REGULATORS_VREGMAIN_DCDCEN_DCDCEN_Msk : 0);
     e54:	f8c1 2704 	str.w	r2, [r1, #1796]	; 0x704
#endif

#if NRF_REGULATORS_HAS_DCDCEN_RADIO
NRF_STATIC_INLINE void nrf_regulators_dcdcen_radio_set(NRF_REGULATORS_Type * p_reg, bool enable)
{
    p_reg->VREGRADIO.DCDCEN = (enable) ? REGULATORS_VREGRADIO_DCDCEN_DCDCEN_Enabled :
     e58:	f8c1 2904 	str.w	r2, [r1, #2308]	; 0x904
    p_reg->VREGH.DCDCEN = (enable) ? REGULATORS_VREGH_DCDCEN_DCDCEN_Enabled :
     e5c:	f8c1 2b00 	str.w	r2, [r1, #2816]	; 0xb00
	__asm__ volatile(
     e60:	f384 8811 	msr	BASEPRI, r4
     e64:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
     e68:	2000      	movs	r0, #0
     e6a:	bd10      	pop	{r4, pc}
     e6c:	50004000 	.word	0x50004000
     e70:	50001000 	.word	0x50001000

00000e74 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
     e74:	b148      	cbz	r0, e8a <arch_busy_wait+0x16>

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
     e76:	4b05      	ldr	r3, [pc, #20]	; (e8c <arch_busy_wait+0x18>)
     e78:	681a      	ldr	r2, [r3, #0]
     e7a:	4b05      	ldr	r3, [pc, #20]	; (e90 <arch_busy_wait+0x1c>)
     e7c:	fbb2 f2f3 	udiv	r2, r2, r3
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
     e80:	4b04      	ldr	r3, [pc, #16]	; (e94 <arch_busy_wait+0x20>)
    delay_cycles(cycles);
     e82:	4350      	muls	r0, r2
     e84:	f043 0301 	orr.w	r3, r3, #1
     e88:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
     e8a:	4770      	bx	lr
     e8c:	20000020 	.word	0x20000020
     e90:	000f4240 	.word	0x000f4240
     e94:	000040b0 	.word	0x000040b0

00000e98 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
     e98:	b082      	sub	sp, #8
     e9a:	ab02      	add	r3, sp, #8
     e9c:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
     ea0:	f89d 3000 	ldrb.w	r3, [sp]
     ea4:	2b06      	cmp	r3, #6
     ea6:	d107      	bne.n	eb8 <pm_power_state_set+0x20>
    p_reg->SYSTEMOFF = REGULATORS_SYSTEMOFF_SYSTEMOFF_Msk;
     ea8:	2201      	movs	r2, #1
     eaa:	4b04      	ldr	r3, [pc, #16]	; (ebc <pm_power_state_set+0x24>)
     eac:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     eb0:	f3bf 8f4f 	dsb	sy
        __WFE();
     eb4:	bf20      	wfe
    while (true)
     eb6:	e7fd      	b.n	eb4 <pm_power_state_set+0x1c>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
     eb8:	b002      	add	sp, #8
     eba:	4770      	bx	lr
     ebc:	50004000 	.word	0x50004000

00000ec0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ec2:	4605      	mov	r5, r0
	__asm__ volatile(
     ec4:	f04f 0320 	mov.w	r3, #32
     ec8:	f3ef 8611 	mrs	r6, BASEPRI
     ecc:	f383 8811 	msr	BASEPRI, r3
     ed0:	f3bf 8f6f 	isb	sy
	return list->head;
     ed4:	4b09      	ldr	r3, [pc, #36]	; (efc <pm_state_notify+0x3c>)
     ed6:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     ed8:	b15c      	cbz	r4, ef2 <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
     eda:	4f09      	ldr	r7, [pc, #36]	; (f00 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
     edc:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     ee0:	2d00      	cmp	r5, #0
     ee2:	bf08      	it	eq
     ee4:	4613      	moveq	r3, r2
		if (callback) {
     ee6:	b10b      	cbz	r3, eec <pm_state_notify+0x2c>
			callback(z_power_state.state);
     ee8:	7838      	ldrb	r0, [r7, #0]
     eea:	4798      	blx	r3
	return node->next;
     eec:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     eee:	2c00      	cmp	r4, #0
     ef0:	d1f4      	bne.n	edc <pm_state_notify+0x1c>
	__asm__ volatile(
     ef2:	f386 8811 	msr	BASEPRI, r6
     ef6:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     efa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     efc:	200001b0 	.word	0x200001b0
     f00:	200001b8 	.word	0x200001b8

00000f04 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
     f04:	b573      	push	{r0, r1, r4, r5, r6, lr}
	z_power_state = pm_policy_next_state(ticks);
     f06:	466d      	mov	r5, sp
     f08:	4c10      	ldr	r4, [pc, #64]	; (f4c <pm_system_suspend+0x48>)
{
     f0a:	4601      	mov	r1, r0
	z_power_state = pm_policy_next_state(ticks);
     f0c:	4628      	mov	r0, r5
     f0e:	f002 fb49 	bl	35a4 <pm_policy_next_state>
     f12:	e895 0003 	ldmia.w	r5, {r0, r1}
     f16:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
     f1a:	7820      	ldrb	r0, [r4, #0]
     f1c:	b1a0      	cbz	r0, f48 <pm_system_suspend+0x44>
		LOG_DBG("No PM operations done.");
		return z_power_state.state;
	}
	post_ops_done = 0;
     f1e:	2300      	movs	r3, #0
     f20:	4e0b      	ldr	r6, [pc, #44]	; (f50 <pm_system_suspend+0x4c>)
		break;
	}
#endif
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
     f22:	2001      	movs	r0, #1
	post_ops_done = 0;
     f24:	6033      	str	r3, [r6, #0]
	pm_state_notify(true);
     f26:	f7ff ffcb 	bl	ec0 <pm_state_notify>
	pm_power_state_set(z_power_state);
     f2a:	e9d4 0100 	ldrd	r0, r1, [r4]
     f2e:	f7ff ffb3 	bl	e98 <pm_power_state_set>
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);

	if (!post_ops_done) {
     f32:	6830      	ldr	r0, [r6, #0]
     f34:	b938      	cbnz	r0, f46 <pm_system_suspend+0x42>
		post_ops_done = 1;
     f36:	2301      	movs	r3, #1
     f38:	6033      	str	r3, [r6, #0]
		pm_state_notify(false);
     f3a:	f7ff ffc1 	bl	ec0 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
     f3e:	e9d4 0100 	ldrd	r0, r1, [r4]
     f42:	f002 fb24 	bl	358e <pm_power_state_exit_post_ops>
	}

	return z_power_state.state;
     f46:	7820      	ldrb	r0, [r4, #0]
}
     f48:	b002      	add	sp, #8
     f4a:	bd70      	pop	{r4, r5, r6, pc}
     f4c:	200001b8 	.word	0x200001b8
     f50:	20000004 	.word	0x20000004

00000f54 <pm_system_resume>:

void pm_system_resume(void)
{
     f54:	b508      	push	{r3, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
     f56:	4b06      	ldr	r3, [pc, #24]	; (f70 <pm_system_resume+0x1c>)
     f58:	6818      	ldr	r0, [r3, #0]
     f5a:	b940      	cbnz	r0, f6e <pm_system_resume+0x1a>
		post_ops_done = 1;
     f5c:	2201      	movs	r2, #1
     f5e:	601a      	str	r2, [r3, #0]
		pm_state_notify(false);
     f60:	f7ff ffae 	bl	ec0 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
     f64:	4b03      	ldr	r3, [pc, #12]	; (f74 <pm_system_resume+0x20>)
     f66:	e893 0003 	ldmia.w	r3, {r0, r1}
     f6a:	f002 fb10 	bl	358e <pm_power_state_exit_post_ops>
	}
}
     f6e:	bd08      	pop	{r3, pc}
     f70:	20000004 	.word	0x20000004
     f74:	200001b8 	.word	0x200001b8

00000f78 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
     f78:	b510      	push	{r4, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     f7a:	4807      	ldr	r0, [pc, #28]	; (f98 <uart_console_init+0x20>)
     f7c:	f001 fb9e 	bl	26bc <z_impl_device_get_binding>
	__stdout_hook_install(console_out);
     f80:	4c06      	ldr	r4, [pc, #24]	; (f9c <uart_console_init+0x24>)

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
     f82:	4b07      	ldr	r3, [pc, #28]	; (fa0 <uart_console_init+0x28>)
     f84:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
     f86:	4620      	mov	r0, r4
     f88:	f000 fe56 	bl	1c38 <__stdout_hook_install>
	__printk_hook_install(console_out);
     f8c:	4620      	mov	r0, r4
     f8e:	f7ff fa87 	bl	4a0 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
     f92:	2000      	movs	r0, #0
     f94:	bd10      	pop	{r4, pc}
     f96:	bf00      	nop
     f98:	000041b9 	.word	0x000041b9
     f9c:	00000fa5 	.word	0x00000fa5
     fa0:	200001c0 	.word	0x200001c0

00000fa4 <console_out>:
	if ('\n' == c) {
     fa4:	280a      	cmp	r0, #10
{
     fa6:	b538      	push	{r3, r4, r5, lr}
     fa8:	4604      	mov	r4, r0
     faa:	4d07      	ldr	r5, [pc, #28]	; (fc8 <console_out+0x24>)
	if ('\n' == c) {
     fac:	d104      	bne.n	fb8 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
     fae:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
     fb0:	6883      	ldr	r3, [r0, #8]
     fb2:	210d      	movs	r1, #13
     fb4:	685b      	ldr	r3, [r3, #4]
     fb6:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
     fb8:	6828      	ldr	r0, [r5, #0]
     fba:	6883      	ldr	r3, [r0, #8]
     fbc:	b2e1      	uxtb	r1, r4
     fbe:	685b      	ldr	r3, [r3, #4]
     fc0:	4798      	blx	r3
}
     fc2:	4620      	mov	r0, r4
     fc4:	bd38      	pop	{r3, r4, r5, pc}
     fc6:	bf00      	nop
     fc8:	200001c0 	.word	0x200001c0

00000fcc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
     fcc:	4b08      	ldr	r3, [pc, #32]	; (ff0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
     fce:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
     fd0:	1ac3      	subs	r3, r0, r3
{
     fd2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
     fd4:	4907      	ldr	r1, [pc, #28]	; (ff4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
     fd6:	109b      	asrs	r3, r3, #2
{
     fd8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
     fda:	4359      	muls	r1, r3
     fdc:	2240      	movs	r2, #64	; 0x40
     fde:	4806      	ldr	r0, [pc, #24]	; (ff8 <onoff_stop+0x2c>)
     fe0:	f002 fb00 	bl	35e4 <stop>
	notify(mgr, res);
     fe4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
     fe6:	4601      	mov	r1, r0
	notify(mgr, res);
     fe8:	4620      	mov	r0, r4
}
     fea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
     fee:	4718      	bx	r3
     ff0:	200001d8 	.word	0x200001d8
     ff4:	b6db6db7 	.word	0xb6db6db7
     ff8:	2000002c 	.word	0x2000002c

00000ffc <onoff_start>:
static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
     ffc:	2340      	movs	r3, #64	; 0x40
{
     ffe:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    1000:	4c0b      	ldr	r4, [pc, #44]	; (1030 <onoff_start+0x34>)
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1002:	9300      	str	r3, [sp, #0]
	size_t offset = (size_t)(mgr - data->mgr);
    1004:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1006:	460b      	mov	r3, r1
{
    1008:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    100a:	490a      	ldr	r1, [pc, #40]	; (1034 <onoff_start+0x38>)
	size_t offset = (size_t)(mgr - data->mgr);
    100c:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    100e:	4361      	muls	r1, r4
{
    1010:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    1012:	4a09      	ldr	r2, [pc, #36]	; (1038 <onoff_start+0x3c>)
    1014:	4809      	ldr	r0, [pc, #36]	; (103c <onoff_start+0x40>)
    1016:	f002 fb11 	bl	363c <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    101a:	1e01      	subs	r1, r0, #0
    101c:	da05      	bge.n	102a <onoff_start+0x2e>
		notify(mgr, err);
    101e:	4630      	mov	r0, r6
    1020:	462b      	mov	r3, r5
	}
}
    1022:	b002      	add	sp, #8
    1024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1028:	4718      	bx	r3
}
    102a:	b002      	add	sp, #8
    102c:	bd70      	pop	{r4, r5, r6, pc}
    102e:	bf00      	nop
    1030:	200001d8 	.word	0x200001d8
    1034:	b6db6db7 	.word	0xb6db6db7
    1038:	000036ad 	.word	0x000036ad
    103c:	2000002c 	.word	0x2000002c

00001040 <clk_init>:
		break;
	}
}

static int clk_init(const struct device *dev)
{
    1040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1044:	2200      	movs	r2, #0
    1046:	2101      	movs	r1, #1
{
    1048:	4606      	mov	r6, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    104a:	2005      	movs	r0, #5
    104c:	f000 faa0 	bl	1590 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    1050:	2005      	movs	r0, #5
    1052:	f000 fa7f 	bl	1554 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    1056:	4811      	ldr	r0, [pc, #68]	; (109c <clk_init+0x5c>)
    1058:	f001 fa34 	bl	24c4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    105c:	4b10      	ldr	r3, [pc, #64]	; (10a0 <clk_init+0x60>)
    105e:	4298      	cmp	r0, r3
    1060:	d119      	bne.n	1096 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    1062:	f002 fce8 	bl	3a36 <nrfx_clock_enable>
    1066:	2400      	movs	r4, #0
	return &data->mgr[type];
    1068:	f04f 081c 	mov.w	r8, #28
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    106c:	270c      	movs	r7, #12
		err = onoff_manager_init(get_onoff_manager(dev, i),
    106e:	f8df 9034 	ldr.w	r9, [pc, #52]	; 10a4 <clk_init+0x64>
	struct nrf_clock_control_data *data = dev->data;
    1072:	6935      	ldr	r5, [r6, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1074:	4649      	mov	r1, r9
    1076:	fb08 5004 	mla	r0, r8, r4, r5
    107a:	f002 f9c3 	bl	3404 <onoff_manager_init>
		if (err < 0) {
    107e:	2800      	cmp	r0, #0
    1080:	db07      	blt.n	1092 <clk_init+0x52>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1082:	2301      	movs	r3, #1
    1084:	fb07 5504 	mla	r5, r7, r4, r5
	for (enum clock_control_nrf_type i = 0;
    1088:	441c      	add	r4, r3
    108a:	2c04      	cmp	r4, #4
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    108c:	67ab      	str	r3, [r5, #120]	; 0x78
	for (enum clock_control_nrf_type i = 0;
    108e:	d1f0      	bne.n	1072 <clk_init+0x32>
	}

	return 0;
    1090:	2000      	movs	r0, #0
}
    1092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    1096:	f06f 0004 	mvn.w	r0, #4
    109a:	e7fa      	b.n	1092 <clk_init+0x52>
    109c:	000010dd 	.word	0x000010dd
    10a0:	0bad0000 	.word	0x0bad0000
    10a4:	000040ec 	.word	0x000040ec

000010a8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    10a8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    10aa:	230c      	movs	r3, #12
	sub_data->cb = NULL;
    10ac:	2200      	movs	r2, #0
	clock_control_cb_t callback = sub_data->cb;
    10ae:	434b      	muls	r3, r1
    10b0:	4808      	ldr	r0, [pc, #32]	; (10d4 <clkstarted_handle.constprop.0+0x2c>)
static void clkstarted_handle(const struct device *dev,
    10b2:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    10b4:	18c4      	adds	r4, r0, r3
	set_on_state(&sub_data->flags);
    10b6:	3378      	adds	r3, #120	; 0x78
	void *user_data = sub_data->user_data;
    10b8:	e9d4 561c 	ldrd	r5, r6, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    10bc:	4418      	add	r0, r3
	sub_data->cb = NULL;
    10be:	6722      	str	r2, [r4, #112]	; 0x70
	set_on_state(&sub_data->flags);
    10c0:	f002 fa7d 	bl	35be <set_on_state>
	if (callback) {
    10c4:	b12d      	cbz	r5, 10d2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    10c6:	4632      	mov	r2, r6
    10c8:	462b      	mov	r3, r5
}
    10ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    10ce:	4802      	ldr	r0, [pc, #8]	; (10d8 <clkstarted_handle.constprop.0+0x30>)
    10d0:	4718      	bx	r3
}
    10d2:	bd70      	pop	{r4, r5, r6, pc}
    10d4:	200001d8 	.word	0x200001d8
    10d8:	2000002c 	.word	0x2000002c

000010dc <clock_event_handler>:
	switch (event) {
    10dc:	2805      	cmp	r0, #5
    10de:	d811      	bhi.n	1104 <clock_event_handler+0x28>
    10e0:	e8df f000 	tbb	[pc, r0]
    10e4:	10100e03 	.word	0x10100e03
    10e8:	0a0c      	.short	0x0a0c
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    10ea:	4b07      	ldr	r3, [pc, #28]	; (1108 <clock_event_handler+0x2c>)
    10ec:	6f98      	ldr	r0, [r3, #120]	; 0x78
    10ee:	f010 0007 	ands.w	r0, r0, #7
    10f2:	d107      	bne.n	1104 <clock_event_handler+0x28>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    10f4:	f7ff bfd8 	b.w	10a8 <clkstarted_handle.constprop.0>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK192M);
    10f8:	2002      	movs	r0, #2
    10fa:	e7fb      	b.n	10f4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLKAUDIO);
    10fc:	2003      	movs	r0, #3
    10fe:	e7f9      	b.n	10f4 <clock_event_handler+0x18>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    1100:	2001      	movs	r0, #1
    1102:	e7f7      	b.n	10f4 <clock_event_handler+0x18>
}
    1104:	4770      	bx	lr
    1106:	bf00      	nop
    1108:	200001d8 	.word	0x200001d8

0000110c <generic_hfclk_start>:
{
    110c:	b508      	push	{r3, lr}
	__asm__ volatile(
    110e:	f04f 0320 	mov.w	r3, #32
    1112:	f3ef 8111 	mrs	r1, BASEPRI
    1116:	f383 8811 	msr	BASEPRI, r3
    111a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    111e:	4a12      	ldr	r2, [pc, #72]	; (1168 <generic_hfclk_start+0x5c>)
    1120:	6813      	ldr	r3, [r2, #0]
    1122:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    1126:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    112a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    112c:	d00c      	beq.n	1148 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    112e:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    1132:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    1136:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    113a:	f013 0301 	ands.w	r3, r3, #1
    113e:	d003      	beq.n	1148 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    1140:	480a      	ldr	r0, [pc, #40]	; (116c <generic_hfclk_start+0x60>)
    1142:	f002 fa3c 	bl	35be <set_on_state>
			already_started = true;
    1146:	2301      	movs	r3, #1
	__asm__ volatile(
    1148:	f381 8811 	msr	BASEPRI, r1
    114c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1150:	b123      	cbz	r3, 115c <generic_hfclk_start+0x50>
}
    1152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1156:	2000      	movs	r0, #0
    1158:	f7ff bfa6 	b.w	10a8 <clkstarted_handle.constprop.0>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    115c:	2001      	movs	r0, #1
}
    115e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    1162:	f002 bc78 	b.w	3a56 <nrfx_clock_start>
    1166:	bf00      	nop
    1168:	20000278 	.word	0x20000278
    116c:	20000250 	.word	0x20000250

00001170 <api_blocking_start>:
{
    1170:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1172:	2200      	movs	r2, #0
    1174:	2301      	movs	r3, #1
    1176:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    117a:	466b      	mov	r3, sp
    117c:	4a08      	ldr	r2, [pc, #32]	; (11a0 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    117e:	f8cd d000 	str.w	sp, [sp]
    1182:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1186:	f002 fa8a 	bl	369e <api_start>
	if (err < 0) {
    118a:	2800      	cmp	r0, #0
    118c:	db05      	blt.n	119a <api_blocking_start+0x2a>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    118e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1192:	2300      	movs	r3, #0
    1194:	4668      	mov	r0, sp
    1196:	f001 fe99 	bl	2ecc <z_impl_k_sem_take>
}
    119a:	b005      	add	sp, #20
    119c:	f85d fb04 	ldr.w	pc, [sp], #4
    11a0:	000036e3 	.word	0x000036e3

000011a4 <generic_hfclk_stop>:
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    11a4:	4b07      	ldr	r3, [pc, #28]	; (11c4 <generic_hfclk_stop+0x20>)
    11a6:	e8d3 2fef 	ldaex	r2, [r3]
    11aa:	f022 0102 	bic.w	r1, r2, #2
    11ae:	e8c3 1fe0 	stlex	r0, r1, [r3]
    11b2:	2800      	cmp	r0, #0
    11b4:	d1f7      	bne.n	11a6 <generic_hfclk_stop+0x2>
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    11b6:	07d3      	lsls	r3, r2, #31
    11b8:	d402      	bmi.n	11c0 <generic_hfclk_stop+0x1c>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    11ba:	2001      	movs	r0, #1
    11bc:	f002 bc9a 	b.w	3af4 <nrfx_clock_stop>
}
    11c0:	4770      	bx	lr
    11c2:	bf00      	nop
    11c4:	20000278 	.word	0x20000278

000011c8 <z_nrf_clock_control_lf_on>:
{
    11c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    11cc:	2201      	movs	r2, #1
    11ce:	4607      	mov	r7, r0
    11d0:	4937      	ldr	r1, [pc, #220]	; (12b0 <z_nrf_clock_control_lf_on+0xe8>)
    11d2:	e8d1 3fef 	ldaex	r3, [r1]
    11d6:	e8c1 2fe0 	stlex	r0, r2, [r1]
    11da:	2800      	cmp	r0, #0
    11dc:	d1f9      	bne.n	11d2 <z_nrf_clock_control_lf_on+0xa>
	if (atomic_set(&on, 1) == 0) {
    11de:	b933      	cbnz	r3, 11ee <z_nrf_clock_control_lf_on+0x26>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    11e0:	4934      	ldr	r1, [pc, #208]	; (12b4 <z_nrf_clock_control_lf_on+0xec>)
		err = onoff_request(mgr, &cli);
    11e2:	4835      	ldr	r0, [pc, #212]	; (12b8 <z_nrf_clock_control_lf_on+0xf0>)
    11e4:	604b      	str	r3, [r1, #4]
    11e6:	60cb      	str	r3, [r1, #12]
    11e8:	608a      	str	r2, [r1, #8]
    11ea:	f002 f91e 	bl	342a <onoff_request>
	switch (start_mode) {
    11ee:	1e7b      	subs	r3, r7, #1
    11f0:	2b01      	cmp	r3, #1
    11f2:	d82f      	bhi.n	1254 <z_nrf_clock_control_lf_on+0x8c>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    11f4:	2f01      	cmp	r7, #1
    11f6:	d107      	bne.n	1208 <z_nrf_clock_control_lf_on+0x40>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    11f8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    11fc:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1200:	f003 0303 	and.w	r3, r3, #3
    1204:	2b02      	cmp	r3, #2
    1206:	d025      	beq.n	1254 <z_nrf_clock_control_lf_on+0x8c>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1208:	f002 fdb3 	bl	3d72 <k_is_in_isr>
    120c:	4604      	mov	r4, r0
    120e:	b918      	cbnz	r0, 1218 <z_nrf_clock_control_lf_on+0x50>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1210:	4b2a      	ldr	r3, [pc, #168]	; (12bc <z_nrf_clock_control_lf_on+0xf4>)
	int key = isr_mode ? irq_lock() : 0;
    1212:	781b      	ldrb	r3, [r3, #0]
    1214:	2b00      	cmp	r3, #0
    1216:	d144      	bne.n	12a2 <z_nrf_clock_control_lf_on+0xda>
	__asm__ volatile(
    1218:	f04f 0320 	mov.w	r3, #32
    121c:	f3ef 8611 	mrs	r6, BASEPRI
    1220:	f383 8811 	msr	BASEPRI, r3
    1224:	f3bf 8f6f 	isb	sy
    1228:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    122a:	f04f 2550 	mov.w	r5, #1342197760	; 0x50005000
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    122e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 12c0 <z_nrf_clock_control_lf_on+0xf8>
    1232:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1236:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    123a:	03d2      	lsls	r2, r2, #15
    123c:	d50c      	bpl.n	1258 <z_nrf_clock_control_lf_on+0x90>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    123e:	f003 0303 	and.w	r3, r3, #3
    1242:	2b02      	cmp	r3, #2
    1244:	d001      	beq.n	124a <z_nrf_clock_control_lf_on+0x82>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1246:	2f01      	cmp	r7, #1
    1248:	d106      	bne.n	1258 <z_nrf_clock_control_lf_on+0x90>
	if (isr_mode) {
    124a:	b324      	cbz	r4, 1296 <z_nrf_clock_control_lf_on+0xce>
	__asm__ volatile(
    124c:	f386 8811 	msr	BASEPRI, r6
    1250:	f3bf 8f6f 	isb	sy
}
    1254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    1258:	b1c4      	cbz	r4, 128c <z_nrf_clock_control_lf_on+0xc4>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    125a:	4630      	mov	r0, r6
    125c:	f000 f9f8 	bl	1650 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1260:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1264:	b2db      	uxtb	r3, r3
    1266:	2b01      	cmp	r3, #1
    1268:	d1e3      	bne.n	1232 <z_nrf_clock_control_lf_on+0x6a>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    126a:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    126e:	2a00      	cmp	r2, #0
    1270:	d0df      	beq.n	1232 <z_nrf_clock_control_lf_on+0x6a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1272:	2200      	movs	r2, #0
    1274:	f8c5 2104 	str.w	r2, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1278:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    127c:	2202      	movs	r2, #2
    127e:	f8c5 2518 	str.w	r2, [r5, #1304]	; 0x518
    1282:	2220      	movs	r2, #32
    1284:	f8c8 2180 	str.w	r2, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1288:	60ab      	str	r3, [r5, #8]
}
    128a:	e7d2      	b.n	1232 <z_nrf_clock_control_lf_on+0x6a>
	return z_impl_k_sleep(timeout);
    128c:	2100      	movs	r1, #0
    128e:	2021      	movs	r0, #33	; 0x21
    1290:	f001 fd8a 	bl	2da8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1294:	e7e4      	b.n	1260 <z_nrf_clock_control_lf_on+0x98>
    p_reg->INTENSET = mask;
    1296:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    129a:	2202      	movs	r2, #2
    129c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    12a0:	e7d8      	b.n	1254 <z_nrf_clock_control_lf_on+0x8c>
    p_reg->INTENCLR = mask;
    12a2:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    12a6:	2202      	movs	r2, #2
	int key = isr_mode ? irq_lock() : 0;
    12a8:	4606      	mov	r6, r0
    12aa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    12ae:	e7bc      	b.n	122a <z_nrf_clock_control_lf_on+0x62>
    12b0:	2000027c 	.word	0x2000027c
    12b4:	200001c8 	.word	0x200001c8
    12b8:	200001f4 	.word	0x200001f4
    12bc:	2000039a 	.word	0x2000039a
    12c0:	e000e100 	.word	0xe000e100

000012c4 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    12c4:	4a04      	ldr	r2, [pc, #16]	; (12d8 <sys_clock_timeout_handler+0x14>)
    12c6:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    12c8:	1ac8      	subs	r0, r1, r3
    12ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    12ce:	4403      	add	r3, r0
    12d0:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    12d2:	f001 bfa5 	b.w	3220 <z_clock_announce>
    12d6:	bf00      	nop
    12d8:	20000290 	.word	0x20000290

000012dc <set_absolute_alarm>:
{
    12dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    12e0:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    12e4:	f04f 0900 	mov.w	r9, #0
    12e8:	0086      	lsls	r6, r0, #2
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    12ea:	f100 0450 	add.w	r4, r0, #80	; 0x50
    12ee:	f106 2650 	add.w	r6, r6, #1342197760	; 0x50005000
    12f2:	00a4      	lsls	r4, r4, #2
    12f4:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
    12f8:	b2a4      	uxth	r4, r4
    12fa:	f104 2450 	add.w	r4, r4, #1342197760	; 0x50005000
    return p_reg->CC[ch];
    12fe:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    1302:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1370 <set_absolute_alarm+0x94>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    1306:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    130a:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    130e:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    1310:	f8d8 a504 	ldr.w	sl, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    1314:	eba3 030a 	sub.w	r3, r3, sl
    1318:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    131c:	f02a 427f 	bic.w	r2, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    1320:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    1322:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    1326:	d102      	bne.n	132e <set_absolute_alarm+0x52>
	z_impl_k_busy_wait(usec_to_wait);
    1328:	2013      	movs	r0, #19
    132a:	f002 fd28 	bl	3d7e <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    132e:	f10a 0202 	add.w	r2, sl, #2
	return (a - b) & COUNTER_MAX;
    1332:	1aab      	subs	r3, r5, r2
    1334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    1338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    133c:	bf88      	it	hi
    133e:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1340:	f8c4 9000 	str.w	r9, [r4]
    1344:	6823      	ldr	r3, [r4, #0]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    1346:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    134a:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
    p_reg->CC[ch] = cc_val;
    134e:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    1352:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    1356:	459a      	cmp	sl, r3
    1358:	d006      	beq.n	1368 <set_absolute_alarm+0x8c>
	return (a - b) & COUNTER_MAX;
    135a:	1aeb      	subs	r3, r5, r3
    135c:	3b02      	subs	r3, #2
    135e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    1362:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    1366:	d801      	bhi.n	136c <set_absolute_alarm+0x90>
}
    1368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		prev_cc = cc_val;
    136c:	462b      	mov	r3, r5
    136e:	e7cf      	b.n	1310 <set_absolute_alarm+0x34>
    1370:	50015000 	.word	0x50015000

00001374 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    1374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    1376:	2500      	movs	r5, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1378:	462f      	mov	r7, r5
    137a:	4c10      	ldr	r4, [pc, #64]	; (13bc <rtc_nrf_isr+0x48>)
    137c:	6826      	ldr	r6, [r4, #0]
    return p_reg->INTENSET & mask;
    137e:	4b10      	ldr	r3, [pc, #64]	; (13c0 <rtc_nrf_isr+0x4c>)
    1380:	b105      	cbz	r5, 1384 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    1382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1384:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    1388:	03d2      	lsls	r2, r2, #15
    138a:	d5fa      	bpl.n	1382 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    138c:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    1390:	2a00      	cmp	r2, #0
    1392:	d0f6      	beq.n	1382 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    1394:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
    1398:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    139c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    13a0:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    13a4:	2501      	movs	r5, #1
    return p_reg->CC[ch];
    13a6:	f8d3 1540 	ldr.w	r1, [r3, #1344]	; 0x540
			if (handler) {
    13aa:	b126      	cbz	r6, 13b6 <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    13ac:	2000      	movs	r0, #0
    13ae:	6862      	ldr	r2, [r4, #4]
    13b0:	6027      	str	r7, [r4, #0]
    13b2:	47b0      	blx	r6
    13b4:	e7e2      	b.n	137c <rtc_nrf_isr+0x8>
    13b6:	6026      	str	r6, [r4, #0]
}
    13b8:	e7e3      	b.n	1382 <rtc_nrf_isr+0xe>
    13ba:	bf00      	nop
    13bc:	20000284 	.word	0x20000284
    13c0:	50015000 	.word	0x50015000

000013c4 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    13c4:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    13c6:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    13c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    13cc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    p_reg->PRESCALER = val;
    13d0:	4c0c      	ldr	r4, [pc, #48]	; (1404 <z_clock_driver_init+0x40>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    13d2:	2101      	movs	r1, #1
    13d4:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    13d8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    13dc:	4b0a      	ldr	r3, [pc, #40]	; (1408 <z_clock_driver_init+0x44>)
    13de:	2015      	movs	r0, #21
    13e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    13e4:	462a      	mov	r2, r5
    13e6:	f000 f8d3 	bl	1590 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    13ea:	2015      	movs	r0, #21
    13ec:	f000 f8b2 	bl	1554 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    13f0:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    13f2:	4a06      	ldr	r2, [pc, #24]	; (140c <z_clock_driver_init+0x48>)
    13f4:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    13f6:	2002      	movs	r0, #2
    13f8:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    13fa:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    13fc:	f7ff fee4 	bl	11c8 <z_nrf_clock_control_lf_on>

	return 0;
}
    1400:	4628      	mov	r0, r5
    1402:	bd38      	pop	{r3, r4, r5, pc}
    1404:	50015000 	.word	0x50015000
    1408:	e000e100 	.word	0xe000e100
    140c:	2000028c 	.word	0x2000028c

00001410 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    1410:	4a13      	ldr	r2, [pc, #76]	; (1460 <z_clock_set_timeout+0x50>)
    1412:	f1b0 3fff 	cmp.w	r0, #4294967295
    1416:	bf14      	ite	ne
    1418:	4603      	movne	r3, r0
    141a:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    141c:	3b01      	subs	r3, #1
    141e:	2b00      	cmp	r3, #0
    1420:	dd1c      	ble.n	145c <z_clock_set_timeout+0x4c>
    1422:	4293      	cmp	r3, r2
    1424:	bfa8      	it	ge
    1426:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    1428:	4a0e      	ldr	r2, [pc, #56]	; (1464 <z_clock_set_timeout+0x54>)
    142a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    142e:	4a0e      	ldr	r2, [pc, #56]	; (1468 <z_clock_set_timeout+0x58>)
    1430:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    1432:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    1434:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    1438:	bf18      	it	ne
    143a:	2300      	movne	r3, #0
	return (a - b) & COUNTER_MAX;
    143c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1440:	3201      	adds	r2, #1
	cc_data[chan].callback = handler;
    1442:	480a      	ldr	r0, [pc, #40]	; (146c <z_clock_set_timeout+0x5c>)
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    1444:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    1446:	4a0a      	ldr	r2, [pc, #40]	; (1470 <z_clock_set_timeout+0x60>)
    1448:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    144a:	2000      	movs	r0, #0
    144c:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    144e:	4a04      	ldr	r2, [pc, #16]	; (1460 <z_clock_set_timeout+0x50>)
    1450:	4293      	cmp	r3, r2
    1452:	bf94      	ite	ls
    1454:	18c9      	addls	r1, r1, r3
    1456:	1889      	addhi	r1, r1, r2
    1458:	f7ff bf40 	b.w	12dc <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    145c:	2300      	movs	r3, #0
    145e:	e7e3      	b.n	1428 <z_clock_set_timeout+0x18>
    1460:	007fffff 	.word	0x007fffff
    1464:	50015000 	.word	0x50015000
    1468:	20000290 	.word	0x20000290
    146c:	000012c5 	.word	0x000012c5
    1470:	20000284 	.word	0x20000284

00001474 <z_clock_elapsed>:
	__asm__ volatile(
    1474:	f04f 0220 	mov.w	r2, #32
    1478:	f3ef 8311 	mrs	r3, BASEPRI
    147c:	f382 8811 	msr	BASEPRI, r2
    1480:	f3bf 8f6f 	isb	sy
    1484:	4a06      	ldr	r2, [pc, #24]	; (14a0 <z_clock_elapsed+0x2c>)
    1486:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    148a:	4a06      	ldr	r2, [pc, #24]	; (14a4 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    148c:	6812      	ldr	r2, [r2, #0]
    148e:	1a80      	subs	r0, r0, r2
    1490:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    1494:	f383 8811 	msr	BASEPRI, r3
    1498:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    149c:	4770      	bx	lr
    149e:	bf00      	nop
    14a0:	50015000 	.word	0x50015000
    14a4:	20000290 	.word	0x20000290

000014a8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    14a8:	4a09      	ldr	r2, [pc, #36]	; (14d0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    14aa:	490a      	ldr	r1, [pc, #40]	; (14d4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    14ac:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    14ae:	6809      	ldr	r1, [r1, #0]
	_current->arch.basepri = key;
    14b0:	6758      	str	r0, [r3, #116]	; 0x74
	_current->arch.swap_return_value = _k_neg_eagain;
    14b2:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    14b4:	4908      	ldr	r1, [pc, #32]	; (14d8 <arch_swap+0x30>)
    14b6:	684b      	ldr	r3, [r1, #4]
    14b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    14bc:	604b      	str	r3, [r1, #4]
    14be:	2300      	movs	r3, #0
    14c0:	f383 8811 	msr	BASEPRI, r3
    14c4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    14c8:	6893      	ldr	r3, [r2, #8]
}
    14ca:	6f98      	ldr	r0, [r3, #120]	; 0x78
    14cc:	4770      	bx	lr
    14ce:	bf00      	nop
    14d0:	20000358 	.word	0x20000358
    14d4:	00004198 	.word	0x00004198
    14d8:	e000ed00 	.word	0xe000ed00

000014dc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    14dc:	4913      	ldr	r1, [pc, #76]	; (152c <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    14de:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    14e0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    14e4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    14e6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    14ea:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    14ee:	2020      	movs	r0, #32
    msr BASEPRI, r0
    14f0:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    14f4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    14f8:	4f0d      	ldr	r7, [pc, #52]	; (1530 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    14fa:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    14fe:	6a4a      	ldr	r2, [r1, #36]	; 0x24

    str r2, [r1, #_kernel_offset_to_current]
    1500:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    1502:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1504:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1506:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1508:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    150a:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    150e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    1512:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    1516:	f38c 8809 	msr	PSP, ip
#endif

#ifdef CONFIG_BUILTIN_STACK_GUARD
    /* r2 contains k_thread */
    add r0, r2, #0
    151a:	f102 0000 	add.w	r0, r2, #0
    push {r2, lr}
    151e:	b504      	push	{r2, lr}
    bl configure_builtin_stack_guard
    1520:	f002 f8e8 	bl	36f4 <configure_builtin_stack_guard>
    pop {r2, lr}
    1524:	e8bd 4004 	ldmia.w	sp!, {r2, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    1528:	4770      	bx	lr
    152a:	0000      	.short	0x0000
    ldr r1, =_kernel
    152c:	20000358 	.word	0x20000358
    ldr v4, =_SCS_ICSR
    1530:	e000ed04 	.word	0xe000ed04

00001534 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    1534:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    1538:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    153a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    153e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    1542:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    1544:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    1548:	2902      	cmp	r1, #2
    beq _oops
    154a:	d0ff      	beq.n	154c <_oops>

0000154c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    154c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    154e:	f002 f8d7 	bl	3700 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    1552:	bd01      	pop	{r0, pc}

00001554 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1554:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    1556:	2b00      	cmp	r3, #0
    1558:	db08      	blt.n	156c <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    155a:	2201      	movs	r2, #1
    155c:	f000 001f 	and.w	r0, r0, #31
    1560:	fa02 f000 	lsl.w	r0, r2, r0
    1564:	4a02      	ldr	r2, [pc, #8]	; (1570 <arch_irq_enable+0x1c>)
    1566:	095b      	lsrs	r3, r3, #5
    1568:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    156c:	4770      	bx	lr
    156e:	bf00      	nop
    1570:	e000e100 	.word	0xe000e100

00001574 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1574:	4b05      	ldr	r3, [pc, #20]	; (158c <arch_irq_is_enabled+0x18>)
    1576:	0942      	lsrs	r2, r0, #5
    1578:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    157c:	2301      	movs	r3, #1
    157e:	f000 001f 	and.w	r0, r0, #31
    1582:	fa03 f000 	lsl.w	r0, r3, r0
}
    1586:	4010      	ands	r0, r2
    1588:	4770      	bx	lr
    158a:	bf00      	nop
    158c:	e000e100 	.word	0xe000e100

00001590 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    1590:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    1592:	2b00      	cmp	r3, #0
	prio += _IRQ_PRIO_OFFSET;
    1594:	f101 0101 	add.w	r1, r1, #1
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    1598:	bfac      	ite	ge
    159a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    159e:	4b06      	ldrlt	r3, [pc, #24]	; (15b8 <z_arm_irq_priority_set+0x28>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15a0:	ea4f 1141 	mov.w	r1, r1, lsl #5
    15a4:	b2c9      	uxtb	r1, r1
    15a6:	bfab      	itete	ge
    15a8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15ac:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15b0:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    15b4:	5419      	strblt	r1, [r3, r0]
}
    15b6:	4770      	bx	lr
    15b8:	e000ed14 	.word	0xe000ed14

000015bc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    15bc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    15c0:	9b00      	ldr	r3, [sp, #0]
	iframe->pc &= 0xfffffffe;
    15c2:	490b      	ldr	r1, [pc, #44]	; (15f0 <arch_new_thread+0x34>)
	iframe->a2 = (uint32_t)p1;
    15c4:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    15c8:	9b01      	ldr	r3, [sp, #4]
	iframe->pc &= 0xfffffffe;
    15ca:	f021 0101 	bic.w	r1, r1, #1
	iframe->a3 = (uint32_t)p2;
    15ce:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    15d2:	9b02      	ldr	r3, [sp, #8]
	iframe->pc &= 0xfffffffe;
    15d4:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->a4 = (uint32_t)p3;
    15d8:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    15dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    15e0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    15e4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    15e6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    15e8:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    15ea:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    15ec:	4770      	bx	lr
    15ee:	bf00      	nop
    15f0:	000034bd 	.word	0x000034bd

000015f4 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    15f4:	4604      	mov	r4, r0
    15f6:	b508      	push	{r3, lr}
    15f8:	460e      	mov	r6, r1
    15fa:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    15fc:	f000 f996 	bl	192c <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1600:	4b08      	ldr	r3, [pc, #32]	; (1624 <arch_switch_to_main_thread+0x30>)
    1602:	609c      	str	r4, [r3, #8]
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    1604:	6e63      	ldr	r3, [r4, #100]	; 0x64
    1606:	f383 880b 	msr	PSPLIM, r3

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    160a:	4628      	mov	r0, r5
    160c:	f386 8809 	msr	PSP, r6
    1610:	2100      	movs	r1, #0
    1612:	b663      	cpsie	if
    1614:	f381 8811 	msr	BASEPRI, r1
    1618:	f3bf 8f6f 	isb	sy
    161c:	2200      	movs	r2, #0
    161e:	2300      	movs	r3, #0
    1620:	f001 ff4c 	bl	34bc <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1624:	20000358 	.word	0x20000358

00001628 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1628:	4901      	ldr	r1, [pc, #4]	; (1630 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    162a:	2210      	movs	r2, #16
	str	r2, [r1]
    162c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    162e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    1630:	e000ed10 	.word	0xe000ed10

00001634 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1634:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1636:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1638:	f380 8811 	msr	BASEPRI, r0
	isb
    163c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    1640:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1644:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1646:	b662      	cpsie	i
	isb
    1648:	f3bf 8f6f 	isb	sy

	bx	lr
    164c:	4770      	bx	lr
    164e:	bf00      	nop

00001650 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    1650:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    1652:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1654:	f381 8811 	msr	BASEPRI, r1

	wfe
    1658:	bf20      	wfe

	msr	BASEPRI, r0
    165a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    165e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    1660:	4770      	bx	lr
    1662:	bf00      	nop

00001664 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1664:	bf30      	wfi
    b z_SysNmiOnReset
    1666:	f7ff bffd 	b.w	1664 <z_SysNmiOnReset>
    166a:	bf00      	nop

0000166c <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    166c:	4a0e      	ldr	r2, [pc, #56]	; (16a8 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    166e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    1670:	4b0e      	ldr	r3, [pc, #56]	; (16ac <z_arm_prep_c+0x40>)
    1672:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    1676:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1678:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    167c:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    1680:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    1684:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    1688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    168c:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    1690:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    1694:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    1698:	f001 f850 	bl	273c <z_bss_zero>
	z_data_copy();
    169c:	f001 fcd6 	bl	304c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    16a0:	f000 f926 	bl	18f0 <z_arm_interrupt_init>
	z_cstart();
    16a4:	f001 f86e 	bl	2784 <z_cstart>
    16a8:	00000000 	.word	0x00000000
    16ac:	e000ed00 	.word	0xe000ed00

000016b0 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    16b0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    16b2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    16b4:	4a0b      	ldr	r2, [pc, #44]	; (16e4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    16b6:	6a10      	ldr	r0, [r2, #32]
	cmp r0, #0
    16b8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    16ba:	bf1e      	ittt	ne
	movne	r1, #0
    16bc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    16be:	6211      	strne	r1, [r2, #32]
		blne	z_pm_save_idle_exit
    16c0:	f002 faae 	blne	3c20 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    16c4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    16c6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    16ca:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    16ce:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    16d2:	4905      	ldr	r1, [pc, #20]	; (16e8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    16d4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    16d6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    16d8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    16da:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    16de:	4903      	ldr	r1, [pc, #12]	; (16ec <_isr_wrapper+0x3c>)
	bx r1
    16e0:	4708      	bx	r1
    16e2:	0000      	.short	0x0000
	ldr r2, =_kernel
    16e4:	20000358 	.word	0x20000358
	ldr r1, =_sw_isr_table
    16e8:	00003e58 	.word	0x00003e58
	ldr r1, =z_arm_int_exit
    16ec:	000018d5 	.word	0x000018d5

000016f0 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    16f0:	f001 ff4b 	bl	358a <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    16f4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    16f6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    16fa:	4808      	ldr	r0, [pc, #32]	; (171c <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    16fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    1700:	1840      	adds	r0, r0, r1
    msr PSP, r0
    1702:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1706:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    170a:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    170c:	4308      	orrs	r0, r1
    msr CONTROL, r0
    170e:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    1712:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1716:	f7ff ffa9 	bl	166c <z_arm_prep_c>
    171a:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    171c:	200008e0 	.word	0x200008e0

00001720 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    1720:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    1724:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    1728:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    172a:	4672      	mov	r2, lr
	bl z_arm_fault
    172c:	f000 f856 	bl	17dc <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    1730:	bd01      	pop	{r0, pc}
    1732:	bf00      	nop

00001734 <usage_fault.constprop.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1734:	4b09      	ldr	r3, [pc, #36]	; (175c <usage_fault.constprop.0+0x28>)
    1736:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unaligned memory access");
	}
#if defined(CONFIG_ARMV8_M_MAINLINE)
	if ((SCB->CFSR & SCB_CFSR_STKOF_Msk) != 0) {
    173a:	6a98      	ldr	r0, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    173c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    173e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1742:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1744:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		reason = K_ERR_STACK_CHK_FAIL;
    1746:	f410 1080 	ands.w	r0, r0, #1048576	; 0x100000
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    174a:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    174e:	ea6f 4212 	mvn.w	r2, r2, lsr #16

	return reason;
}
    1752:	bf18      	it	ne
    1754:	2002      	movne	r0, #2
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1756:	629a      	str	r2, [r3, #40]	; 0x28
}
    1758:	4770      	bx	lr
    175a:	bf00      	nop
    175c:	e000ed00 	.word	0xe000ed00

00001760 <bus_fault.constprop.0>:
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1760:	4b0d      	ldr	r3, [pc, #52]	; (1798 <bus_fault.constprop.0+0x38>)
    1762:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1766:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1768:	0592      	lsls	r2, r2, #22
    176a:	d508      	bpl.n	177e <bus_fault.constprop.0+0x1e>
		STORE_xFAR(bfar, SCB->BFAR);
    176c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    176e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1770:	0412      	lsls	r2, r2, #16
    1772:	d504      	bpl.n	177e <bus_fault.constprop.0+0x1e>
			if (from_hard_fault) {
    1774:	b118      	cbz	r0, 177e <bus_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1776:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1778:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    177c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    177e:	2000      	movs	r0, #0
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    1780:	4b05      	ldr	r3, [pc, #20]	; (1798 <bus_fault.constprop.0+0x38>)
    1782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1786:	05d2      	lsls	r2, r2, #23
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    1788:	bf58      	it	pl
    178a:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    178c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    178e:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    1792:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    1794:	7008      	strb	r0, [r1, #0]
}
    1796:	4770      	bx	lr
    1798:	e000ed00 	.word	0xe000ed00

0000179c <mem_manage_fault.constprop.0>:
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    179c:	4b0e      	ldr	r3, [pc, #56]	; (17d8 <mem_manage_fault.constprop.0+0x3c>)
    179e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    17a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    17a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17a4:	0792      	lsls	r2, r2, #30
    17a6:	d508      	bpl.n	17ba <mem_manage_fault.constprop.0+0x1e>
		uint32_t temp = SCB->MMFAR;
    17a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    17aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17ac:	0612      	lsls	r2, r2, #24
    17ae:	d504      	bpl.n	17ba <mem_manage_fault.constprop.0+0x1e>
			if (from_hard_fault) {
    17b0:	b118      	cbz	r0, 17ba <mem_manage_fault.constprop.0+0x1e>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    17b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    17b8:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    17ba:	2000      	movs	r0, #0
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    17bc:	4b06      	ldr	r3, [pc, #24]	; (17d8 <mem_manage_fault.constprop.0+0x3c>)
    17be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    17c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    17c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17c4:	06d2      	lsls	r2, r2, #27
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    17c6:	bf58      	it	pl
    17c8:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    17ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    17cc:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    17d0:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    17d2:	7008      	strb	r0, [r1, #0]
}
    17d4:	4770      	bx	lr
    17d6:	bf00      	nop
    17d8:	e000ed00 	.word	0xe000ed00

000017dc <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    17dc:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17de:	4b36      	ldr	r3, [pc, #216]	; (18b8 <z_arm_fault+0xdc>)
{
    17e0:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17e2:	685b      	ldr	r3, [r3, #4]
    17e4:	2500      	movs	r5, #0
{
    17e6:	b08a      	sub	sp, #40	; 0x28
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    17e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    17ec:	f385 8811 	msr	BASEPRI, r5
    17f0:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    17f4:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    17f8:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    17fc:	d111      	bne.n	1822 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    17fe:	f002 010c 	and.w	r1, r2, #12
    1802:	2908      	cmp	r1, #8
    1804:	d00d      	beq.n	1822 <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1806:	0711      	lsls	r1, r2, #28
    1808:	d401      	bmi.n	180e <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    180a:	4606      	mov	r6, r0
			*nested_exc = true;
    180c:	2501      	movs	r5, #1
	*recoverable = false;
    180e:	2200      	movs	r2, #0
    1810:	3b03      	subs	r3, #3
    1812:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    1816:	2b03      	cmp	r3, #3
    1818:	d846      	bhi.n	18a8 <z_arm_fault+0xcc>
    181a:	e8df f003 	tbb	[pc, r3]
    181e:	3d04      	.short	0x3d04
    1820:	3a41      	.short	0x3a41
		return NULL;
    1822:	462e      	mov	r6, r5
    1824:	e7f3      	b.n	180e <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    1826:	4b24      	ldr	r3, [pc, #144]	; (18b8 <z_arm_fault+0xdc>)
    1828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    182a:	0792      	lsls	r2, r2, #30
    182c:	d43c      	bmi.n	18a8 <z_arm_fault+0xcc>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    182e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    1830:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    1834:	d008      	beq.n	1848 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
    1836:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    183a:	b1ea      	cbz	r2, 1878 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
    183c:	2001      	movs	r0, #1
    183e:	f10d 0107 	add.w	r1, sp, #7
		reason = mem_manage_fault(esf, 0, recoverable);
    1842:	f7ff ffab 	bl	179c <mem_manage_fault.constprop.0>
		reason = usage_fault(esf);
    1846:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    1848:	f89d 3007 	ldrb.w	r3, [sp, #7]
    184c:	b993      	cbnz	r3, 1874 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    184e:	2220      	movs	r2, #32
    1850:	4631      	mov	r1, r6
    1852:	a802      	add	r0, sp, #8
    1854:	f001 ffa1 	bl	379a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    1858:	9b09      	ldr	r3, [sp, #36]	; 0x24
    185a:	b33d      	cbz	r5, 18ac <z_arm_fault+0xd0>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    185c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1860:	b922      	cbnz	r2, 186c <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    1862:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    1866:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    186a:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    186c:	4620      	mov	r0, r4
    186e:	a902      	add	r1, sp, #8
    1870:	f001 ff44 	bl	36fc <z_arm_fatal_error>
}
    1874:	b00a      	add	sp, #40	; 0x28
    1876:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1878:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    187c:	b12a      	cbz	r2, 188a <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
    187e:	2001      	movs	r0, #1
    1880:	f10d 0107 	add.w	r1, sp, #7
		reason = bus_fault(esf, 0, recoverable);
    1884:	f7ff ff6c 	bl	1760 <bus_fault.constprop.0>
    1888:	e7dd      	b.n	1846 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    188a:	8d58      	ldrh	r0, [r3, #42]	; 0x2a
    188c:	b284      	uxth	r4, r0
    188e:	2c00      	cmp	r4, #0
    1890:	d0da      	beq.n	1848 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
    1892:	f7ff ff4f 	bl	1734 <usage_fault.constprop.0>
    1896:	e7d6      	b.n	1846 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    1898:	2000      	movs	r0, #0
    189a:	f10d 0107 	add.w	r1, sp, #7
    189e:	e7d0      	b.n	1842 <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    18a0:	2000      	movs	r0, #0
    18a2:	f10d 0107 	add.w	r1, sp, #7
    18a6:	e7ed      	b.n	1884 <z_arm_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    18a8:	2400      	movs	r4, #0
    18aa:	e7cd      	b.n	1848 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    18ac:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    18b0:	f023 0301 	bic.w	r3, r3, #1
    18b4:	e7d9      	b.n	186a <z_arm_fault+0x8e>
    18b6:	bf00      	nop
    18b8:	e000ed00 	.word	0xe000ed00

000018bc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    18bc:	4b04      	ldr	r3, [pc, #16]	; (18d0 <z_arm_fault_init+0x14>)
    18be:	695a      	ldr	r2, [r3, #20]
    18c0:	f042 0210 	orr.w	r2, r2, #16
    18c4:	615a      	str	r2, [r3, #20]
	 *
	 * For Non-Secure Firmware this could allow the Non-Secure Main
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
    18c6:	695a      	ldr	r2, [r3, #20]
    18c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    18cc:	615a      	str	r2, [r3, #20]
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    18ce:	4770      	bx	lr
    18d0:	e000ed00 	.word	0xe000ed00

000018d4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    18d4:	4b04      	ldr	r3, [pc, #16]	; (18e8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    18d6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    18d8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	cmp r0, r1
    18da:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    18dc:	d003      	beq.n	18e6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    18de:	4903      	ldr	r1, [pc, #12]	; (18ec <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    18e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    18e4:	600a      	str	r2, [r1, #0]

000018e6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    18e6:	4770      	bx	lr
	ldr r3, =_kernel
    18e8:	20000358 	.word	0x20000358
	ldr r1, =_SCS_ICSR
    18ec:	e000ed04 	.word	0xe000ed04

000018f0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    18f0:	2300      	movs	r3, #0
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    18f2:	2120      	movs	r1, #32
    18f4:	4803      	ldr	r0, [pc, #12]	; (1904 <z_arm_interrupt_init+0x14>)
    18f6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    18f8:	3301      	adds	r3, #1
    18fa:	2b45      	cmp	r3, #69	; 0x45
    18fc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    1900:	d1f9      	bne.n	18f6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    1902:	4770      	bx	lr
    1904:	e000e100 	.word	0xe000e100

00001908 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    1908:	4b06      	ldr	r3, [pc, #24]	; (1924 <z_impl_k_thread_abort+0x1c>)
    190a:	689b      	ldr	r3, [r3, #8]
    190c:	4283      	cmp	r3, r0
    190e:	d107      	bne.n	1920 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    1910:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    1914:	b123      	cbz	r3, 1920 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1916:	4a04      	ldr	r2, [pc, #16]	; (1928 <z_impl_k_thread_abort+0x20>)
    1918:	6853      	ldr	r3, [r2, #4]
    191a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    191e:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    1920:	f001 ba62 	b.w	2de8 <z_thread_abort>
    1924:	20000358 	.word	0x20000358
    1928:	e000ed00 	.word	0xe000ed00

0000192c <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    192c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    192e:	4c09      	ldr	r4, [pc, #36]	; (1954 <z_arm_configure_static_mpu_regions+0x28>)
    1930:	4a09      	ldr	r2, [pc, #36]	; (1958 <z_arm_configure_static_mpu_regions+0x2c>)
    1932:	4623      	mov	r3, r4
    1934:	2101      	movs	r1, #1
    1936:	4809      	ldr	r0, [pc, #36]	; (195c <z_arm_configure_static_mpu_regions+0x30>)
    1938:	f000 f918 	bl	1b6c <arm_core_mpu_configure_static_mpu_regions>
	/* Define a constant array of z_arm_mpu_partition objects that holds the
	 * boundaries of the areas, inside which dynamic region programming
	 * is allowed. The information is passed to the underlying driver at
	 * initialization.
	 */
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    193c:	2300      	movs	r3, #0
    193e:	9303      	str	r3, [sp, #12]
		{
		.start = _MPU_DYNAMIC_REGIONS_AREA_START,
    1940:	4b07      	ldr	r3, [pc, #28]	; (1960 <z_arm_configure_static_mpu_regions+0x34>)
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
		}
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1942:	2101      	movs	r1, #1
		.size =  _MPU_DYNAMIC_REGIONS_AREA_SIZE,
    1944:	1ae4      	subs	r4, r4, r3
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    1946:	a801      	add	r0, sp, #4
	const struct z_arm_mpu_partition dyn_region_areas[] = {
    1948:	9301      	str	r3, [sp, #4]
    194a:	9402      	str	r4, [sp, #8]
	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
    194c:	f000 f918 	bl	1b80 <arm_core_mpu_mark_areas_for_dynamic_regions>
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    1950:	b004      	add	sp, #16
    1952:	bd10      	pop	{r4, pc}
    1954:	20070000 	.word	0x20070000
    1958:	20000000 	.word	0x20000000
    195c:	000040f8 	.word	0x000040f8
    1960:	200000a8 	.word	0x200000a8

00001964 <region_init>:
 * Note:
 *   The caller must provide a valid region index.
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
    1964:	b510      	push	{r4, lr}
	ARM_MPU_SetRegion(
		/* RNR */
		index,
		/* RBAR */
		(region_conf->base & MPU_RBAR_BASE_Msk)
    1966:	680b      	ldr	r3, [r1, #0]
		| (region_conf->attr.rbar &
    1968:	7a0c      	ldrb	r4, [r1, #8]
		(region_conf->base & MPU_RBAR_BASE_Msk)
    196a:	f023 021f 	bic.w	r2, r3, #31
		| (region_conf->attr.rbar &
    196e:	f004 031f 	and.w	r3, r4, #31
    1972:	431a      	orrs	r2, r3
			(MPU_RBAR_XN_Msk | MPU_RBAR_AP_Msk | MPU_RBAR_SH_Msk)),
		/* RLAR */
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1974:	68cb      	ldr	r3, [r1, #12]
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    1976:	0964      	lsrs	r4, r4, #5
		(region_conf->attr.r_limit & MPU_RLAR_LIMIT_Msk)
    1978:	f023 031f 	bic.w	r3, r3, #31
* \param rbar Value for RBAR register.
* \param rlar Value for RLAR register.
*/   
__STATIC_INLINE void ARM_MPU_SetRegionEx(MPU_Type* mpu, uint32_t rnr, uint32_t rbar, uint32_t rlar)
{
  mpu->RNR = rnr;
    197c:	4905      	ldr	r1, [pc, #20]	; (1994 <region_init+0x30>)
		| ((region_conf->attr.mair_idx << MPU_RLAR_AttrIndx_Pos)
    197e:	ea43 0344 	orr.w	r3, r3, r4, lsl #1
			& MPU_RLAR_AttrIndx_Msk)
		| MPU_RLAR_EN_Msk
    1982:	f043 0301 	orr.w	r3, r3, #1
    1986:	f8c1 0098 	str.w	r0, [r1, #152]	; 0x98
  mpu->RBAR = rbar;
    198a:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  mpu->RLAR = rlar;
    198e:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
	);

	LOG_DBG("[%d] 0x%08x 0x%08x 0x%08x 0x%08x",
			index, region_conf->base, region_conf->attr.rbar,
			region_conf->attr.mair_idx, region_conf->attr.r_limit);
}
    1992:	bd10      	pop	{r4, pc}
    1994:	e000ed00 	.word	0xe000ed00

00001998 <mpu_configure_regions_and_partition.constprop.0>:
 * sanity check of the memory regions to be programmed.
 *
 * The function performs a full partition of the background memory
 * area, effectively, leaving no space in this area uncovered by MPU.
 */
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    1998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    199c:	460f      	mov	r7, r1
    199e:	4614      	mov	r4, r2
	bool do_sanity_check)
{
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    19a0:	4606      	mov	r6, r0
    19a2:	f04f 0800 	mov.w	r8, #0
	MPU->RNR = index;
    19a6:	4d52      	ldr	r5, [pc, #328]	; (1af0 <mpu_configure_regions_and_partition.constprop.0+0x158>)
static int mpu_configure_regions_and_partition(const struct z_arm_mpu_partition
    19a8:	b085      	sub	sp, #20
	for (i = 0; i < regions_num; i++) {
    19aa:	45b8      	cmp	r8, r7
    19ac:	da09      	bge.n	19c2 <mpu_configure_regions_and_partition.constprop.0+0x2a>
		if (regions[i].size == 0U) {
    19ae:	f8d6 9004 	ldr.w	r9, [r6, #4]
    19b2:	f1b9 0f00 	cmp.w	r9, #0
    19b6:	d03b      	beq.n	1a30 <mpu_configure_regions_and_partition.constprop.0+0x98>
		&&
    19b8:	f1b9 0f1f 	cmp.w	r9, #31
    19bc:	d805      	bhi.n	19ca <mpu_configure_regions_and_partition.constprop.0+0x32>

			reg_index =
				mpu_configure_region(reg_index, &regions[i]);

			if (reg_index == -EINVAL) {
				return reg_index;
    19be:	f06f 0415 	mvn.w	r4, #21
			reg_index++;
		}
	}

	return reg_index;
}
    19c2:	4620      	mov	r0, r4
    19c4:	b005      	add	sp, #20
    19c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		&&
    19ca:	f019 0f1f 	tst.w	r9, #31
    19ce:	d1f6      	bne.n	19be <mpu_configure_regions_and_partition.constprop.0+0x26>
		((part->start &
    19d0:	f8d6 a000 	ldr.w	sl, [r6]
		&&
    19d4:	f01a 0f1f 	tst.w	sl, #31
    19d8:	d1f1      	bne.n	19be <mpu_configure_regions_and_partition.constprop.0+0x26>
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    19da:	4650      	mov	r0, sl
    19dc:	f001 feb8 	bl	3750 <arm_cmse_mpu_region_get>
    19e0:	4683      	mov	fp, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    19e2:	eb09 000a 	add.w	r0, r9, sl
    19e6:	3801      	subs	r0, #1
    19e8:	f001 feb2 	bl	3750 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    19ec:	4583      	cmp	fp, r0
    19ee:	d1e6      	bne.n	19be <mpu_configure_regions_and_partition.constprop.0+0x26>
		if ((u_reg_index == -EINVAL) ||
    19f0:	f11b 0f16 	cmn.w	fp, #22
    19f4:	d0e3      	beq.n	19be <mpu_configure_regions_and_partition.constprop.0+0x26>
			(u_reg_index > (reg_index - 1))) {
    19f6:	1e63      	subs	r3, r4, #1
		if ((u_reg_index == -EINVAL) ||
    19f8:	455b      	cmp	r3, fp
    19fa:	dbe0      	blt.n	19be <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = index;
    19fc:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1a00:	f8d5 109c 	ldr.w	r1, [r5, #156]	; 0x9c
	MPU->RNR = index;
    1a04:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1a08:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
	return MPU->RBAR & MPU_RBAR_BASE_Msk;
    1a0c:	f021 011f 	bic.w	r1, r1, #31
	return (MPU->RLAR & MPU_RLAR_LIMIT_Msk) | (~MPU_RLAR_LIMIT_Msk);
    1a10:	f043 0a1f 	orr.w	sl, r3, #31
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1a14:	e9d6 3200 	ldrd	r3, r2, [r6]
    1a18:	441a      	add	r2, r3
		if ((regions[i].start == u_reg_base) &&
    1a1a:	4299      	cmp	r1, r3
		uint32_t reg_last = regions[i].start + regions[i].size - 1;
    1a1c:	f102 39ff 	add.w	r9, r2, #4294967295
		if ((regions[i].start == u_reg_base) &&
    1a20:	d11e      	bne.n	1a60 <mpu_configure_regions_and_partition.constprop.0+0xc8>
    1a22:	45ca      	cmp	sl, r9
    1a24:	d108      	bne.n	1a38 <mpu_configure_regions_and_partition.constprop.0+0xa0>
			mpu_configure_region(u_reg_index, &regions[i]);
    1a26:	4631      	mov	r1, r6
    1a28:	fa5f f08b 	uxtb.w	r0, fp
    1a2c:	f001 fe73 	bl	3716 <mpu_configure_region>
	for (i = 0; i < regions_num; i++) {
    1a30:	f108 0801 	add.w	r8, r8, #1
    1a34:	360c      	adds	r6, #12
    1a36:	e7b8      	b.n	19aa <mpu_configure_regions_and_partition.constprop.0+0x12>
				mpu_configure_region(reg_index, &regions[i]);
    1a38:	4631      	mov	r1, r6
	MPU->RNR = index;
    1a3a:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1a3e:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
		| (base & MPU_RBAR_BASE_Msk);
    1a42:	f022 021f 	bic.w	r2, r2, #31
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1a46:	f003 031f 	and.w	r3, r3, #31
		| (base & MPU_RBAR_BASE_Msk);
    1a4a:	431a      	orrs	r2, r3
	MPU->RBAR = (MPU->RBAR & (~MPU_RBAR_BASE_Msk))
    1a4c:	f8c5 209c 	str.w	r2, [r5, #156]	; 0x9c
				mpu_configure_region(reg_index, &regions[i]);
    1a50:	b2e0      	uxtb	r0, r4
				mpu_configure_region(reg_index, &regions[i]);
    1a52:	f001 fe60 	bl	3716 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1a56:	f110 0f16 	cmn.w	r0, #22
    1a5a:	d0b0      	beq.n	19be <mpu_configure_regions_and_partition.constprop.0+0x26>
			reg_index++;
    1a5c:	1c44      	adds	r4, r0, #1
    1a5e:	e7e7      	b.n	1a30 <mpu_configure_regions_and_partition.constprop.0+0x98>
				regions[i].start - 1);
    1a60:	3b01      	subs	r3, #1
		} else if (reg_last == u_reg_last) {
    1a62:	45ca      	cmp	sl, r9
				mpu_configure_region(reg_index, &regions[i]);
    1a64:	b2e0      	uxtb	r0, r4
		| (limit & MPU_RLAR_LIMIT_Msk);
    1a66:	f023 031f 	bic.w	r3, r3, #31
	MPU->RNR = index;
    1a6a:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
		} else if (reg_last == u_reg_last) {
    1a6e:	d108      	bne.n	1a82 <mpu_configure_regions_and_partition.constprop.0+0xea>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1a70:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    1a74:	4631      	mov	r1, r6
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1a76:	f002 021f 	and.w	r2, r2, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1a7a:	4313      	orrs	r3, r2
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1a7c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
			reg_index =
    1a80:	e7e7      	b.n	1a52 <mpu_configure_regions_and_partition.constprop.0+0xba>
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1a82:	f8d5 10a0 	ldr.w	r1, [r5, #160]	; 0xa0
    1a86:	f001 011f 	and.w	r1, r1, #31
		| (limit & MPU_RLAR_LIMIT_Msk);
    1a8a:	430b      	orrs	r3, r1
	MPU->RLAR = (MPU->RLAR & (~MPU_RLAR_LIMIT_Msk))
    1a8c:	f8c5 30a0 	str.w	r3, [r5, #160]	; 0xa0
				mpu_configure_region(reg_index, &regions[i]);
    1a90:	4631      	mov	r1, r6
    1a92:	f001 fe40 	bl	3716 <mpu_configure_region>
			if (reg_index == -EINVAL) {
    1a96:	f110 0f16 	cmn.w	r0, #22
    1a9a:	d090      	beq.n	19be <mpu_configure_regions_and_partition.constprop.0+0x26>
	MPU->RNR = index;
    1a9c:	f8c5 b098 	str.w	fp, [r5, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    1aa0:	f8d5 209c 	ldr.w	r2, [r5, #156]	; 0x9c
    1aa4:	f89d 3008 	ldrb.w	r3, [sp, #8]
			REGION_LIMIT_ADDR((regions[i].start +
    1aa8:	f10a 3aff 	add.w	sl, sl, #4294967295
	attr->rbar = MPU->RBAR &
    1aac:	f362 0304 	bfi	r3, r2, #0, #5
    1ab0:	f88d 3008 	strb.w	r3, [sp, #8]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1ab4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    1ab8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1abc:	085b      	lsrs	r3, r3, #1
    1abe:	f363 1247 	bfi	r2, r3, #5, #3
    1ac2:	f88d 2008 	strb.w	r2, [sp, #8]
			fill_region.base = regions[i].start +
    1ac6:	e9d6 3200 	ldrd	r3, r2, [r6]
    1aca:	4413      	add	r3, r2
    1acc:	9300      	str	r3, [sp, #0]
			REGION_LIMIT_ADDR((regions[i].start +
    1ace:	f023 031f 	bic.w	r3, r3, #31
			reg_index++;
    1ad2:	1c41      	adds	r1, r0, #1
			REGION_LIMIT_ADDR((regions[i].start +
    1ad4:	4453      	add	r3, sl
    1ad6:	eba3 0309 	sub.w	r3, r3, r9
    1ada:	b2c8      	uxtb	r0, r1
    1adc:	f023 031f 	bic.w	r3, r3, #31

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    1ae0:	2807      	cmp	r0, #7
			fill_region.attr.r_limit =
    1ae2:	9303      	str	r3, [sp, #12]
    1ae4:	f63f af6b 	bhi.w	19be <mpu_configure_regions_and_partition.constprop.0+0x26>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    1ae8:	4669      	mov	r1, sp
    1aea:	f7ff ff3b 	bl	1964 <region_init>
    1aee:	e7b5      	b.n	1a5c <mpu_configure_regions_and_partition.constprop.0+0xc4>
    1af0:	e000ed00 	.word	0xe000ed00

00001af4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1af4:	2205      	movs	r2, #5
    1af6:	4b04      	ldr	r3, [pc, #16]	; (1b08 <arm_core_mpu_enable+0x14>)
    1af8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1afc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1b00:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    1b04:	4770      	bx	lr
    1b06:	bf00      	nop
    1b08:	e000ed00 	.word	0xe000ed00

00001b0c <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    1b0c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    1b10:	2200      	movs	r2, #0
    1b12:	4b02      	ldr	r3, [pc, #8]	; (1b1c <arm_core_mpu_disable+0x10>)
    1b14:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    1b18:	4770      	bx	lr
    1b1a:	bf00      	nop
    1b1c:	e000ed00 	.word	0xe000ed00

00001b20 <arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
static int arm_mpu_init(const struct device *arg)
{
    1b20:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1b22:	4d0e      	ldr	r5, [pc, #56]	; (1b5c <arm_mpu_init+0x3c>)
    1b24:	682c      	ldr	r4, [r5, #0]
    1b26:	2c08      	cmp	r4, #8
    1b28:	d815      	bhi.n	1b56 <arm_mpu_init+0x36>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b2a:	2000      	movs	r0, #0
	arm_core_mpu_disable();
    1b2c:	f7ff ffee 	bl	1b0c <arm_core_mpu_disable>
	MPU->MAIR0 =
    1b30:	4b0b      	ldr	r3, [pc, #44]	; (1b60 <arm_mpu_init+0x40>)
    1b32:	4a0c      	ldr	r2, [pc, #48]	; (1b64 <arm_mpu_init+0x44>)
    1b34:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b38:	4284      	cmp	r4, r0
    1b3a:	d105      	bne.n	1b48 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    1b3c:	4b0a      	ldr	r3, [pc, #40]	; (1b68 <arm_mpu_init+0x48>)
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    1b3e:	2000      	movs	r0, #0
	static_regions_num = mpu_config.num_regions;
    1b40:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    1b42:	f7ff ffd7 	bl	1af4 <arm_core_mpu_enable>
}
    1b46:	bd38      	pop	{r3, r4, r5, pc}
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    1b48:	6869      	ldr	r1, [r5, #4]
    1b4a:	eb01 1100 	add.w	r1, r1, r0, lsl #4
    1b4e:	f7ff ff09 	bl	1964 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1b52:	3001      	adds	r0, #1
    1b54:	e7f0      	b.n	1b38 <arm_mpu_init+0x18>
		return -1;
    1b56:	f04f 30ff 	mov.w	r0, #4294967295
    1b5a:	e7f4      	b.n	1b46 <arm_mpu_init+0x26>
    1b5c:	00004104 	.word	0x00004104
    1b60:	e000ed00 	.word	0xe000ed00
    1b64:	0044ffaa 	.word	0x0044ffaa
    1b68:	20000398 	.word	0x20000398

00001b6c <arm_core_mpu_configure_static_mpu_regions>:
{
    1b6c:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    1b6e:	4c03      	ldr	r4, [pc, #12]	; (1b7c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * given boundaries.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions_and_partition(static_regions,
    1b70:	7822      	ldrb	r2, [r4, #0]
    1b72:	f7ff ff11 	bl	1998 <mpu_configure_regions_and_partition.constprop.0>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    1b76:	7020      	strb	r0, [r4, #0]
}
    1b78:	bd10      	pop	{r4, pc}
    1b7a:	bf00      	nop
    1b7c:	20000398 	.word	0x20000398

00001b80 <arm_core_mpu_mark_areas_for_dynamic_regions>:
{
    1b80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b84:	4d29      	ldr	r5, [pc, #164]	; (1c2c <arm_core_mpu_mark_areas_for_dynamic_regions+0xac>)
    1b86:	468a      	mov	sl, r1

/* This internal function marks and stores the configuration of memory areas
 * where dynamic region programming is allowed. Return zero on success, or
 * -EINVAL on error.
 */
static int mpu_mark_areas_for_dynamic_regions(
    1b88:	4606      	mov	r6, r0
{
	/* In ARMv8-M architecture we need to store the index values
	 * and the default configuration of the MPU regions, inside
	 * which dynamic memory regions may be programmed at run-time.
	 */
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1b8a:	f04f 0800 	mov.w	r8, #0
    1b8e:	46ab      	mov	fp, r5
	MPU->RNR = index;
    1b90:	4f27      	ldr	r7, [pc, #156]	; (1c30 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb0>)
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1b92:	45d0      	cmp	r8, sl
    1b94:	da1b      	bge.n	1bce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
		if (dyn_region_areas[i].size == 0U) {
    1b96:	f8d6 9004 	ldr.w	r9, [r6, #4]
    1b9a:	f1b9 0f00 	cmp.w	r9, #0
    1b9e:	d03f      	beq.n	1c20 <arm_core_mpu_mark_areas_for_dynamic_regions+0xa0>
		}
		/* Non-empty area */

		/* Retrieve HW MPU region index */
		dyn_reg_info[i].index =
			get_region_index(dyn_region_areas[i].start,
    1ba0:	6831      	ldr	r1, [r6, #0]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1ba2:	4608      	mov	r0, r1
    1ba4:	9101      	str	r1, [sp, #4]
    1ba6:	f001 fdd3 	bl	3750 <arm_cmse_mpu_region_get>
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1baa:	9901      	ldr	r1, [sp, #4]
	uint32_t region_start_addr = arm_cmse_mpu_region_get(start);
    1bac:	4604      	mov	r4, r0
	uint32_t region_end_addr = arm_cmse_mpu_region_get(start + size - 1);
    1bae:	eb09 0001 	add.w	r0, r9, r1
    1bb2:	3801      	subs	r0, #1
    1bb4:	f001 fdcc 	bl	3750 <arm_cmse_mpu_region_get>
	if (region_start_addr == region_end_addr) {
    1bb8:	4284      	cmp	r4, r0
    1bba:	f04f 0214 	mov.w	r2, #20
    1bbe:	4b1d      	ldr	r3, [pc, #116]	; (1c34 <arm_core_mpu_mark_areas_for_dynamic_regions+0xb4>)
    1bc0:	d008      	beq.n	1bd4 <arm_core_mpu_mark_areas_for_dynamic_regions+0x54>
		dyn_reg_info[i].index =
    1bc2:	f06f 0315 	mvn.w	r3, #21
    1bc6:	fb02 f808 	mul.w	r8, r2, r8
    1bca:	f84b 3008 	str.w	r3, [fp, r8]
}
    1bce:	b003      	add	sp, #12
    1bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					dyn_region_areas[i].size);

		if (dyn_reg_info[i].index == -EINVAL) {
    1bd4:	f114 0f16 	cmn.w	r4, #22
		dyn_reg_info[i].index =
    1bd8:	602c      	str	r4, [r5, #0]
		if (dyn_reg_info[i].index == -EINVAL) {
    1bda:	d0f8      	beq.n	1bce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>

			return -EINVAL;
		}

		if (dyn_reg_info[i].index >= static_regions_num) {
    1bdc:	7819      	ldrb	r1, [r3, #0]
    1bde:	42a1      	cmp	r1, r4
    1be0:	ddf5      	ble.n	1bce <arm_core_mpu_mark_areas_for_dynamic_regions+0x4e>
	attr->rbar = MPU->RBAR &
    1be2:	fb02 b008 	mla	r0, r2, r8, fp
	MPU->RNR = index;
    1be6:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	MPU->RNR = index;
    1bea:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
	attr->rbar = MPU->RBAR &
    1bee:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
    1bf2:	f100 0108 	add.w	r1, r0, #8
    1bf6:	7b00      	ldrb	r0, [r0, #12]
    1bf8:	f364 0004 	bfi	r0, r4, #0, #5
    1bfc:	7108      	strb	r0, [r1, #4]
	attr->mair_idx = (MPU->RLAR & MPU_RLAR_AttrIndx_Msk) >>
    1bfe:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
    1c02:	790c      	ldrb	r4, [r1, #4]
    1c04:	0840      	lsrs	r0, r0, #1
    1c06:	f360 1447 	bfi	r4, r0, #5, #3
    1c0a:	710c      	strb	r4, [r1, #4]
	region_conf->base = (MPU->RBAR & MPU_RBAR_BASE_Msk);
    1c0c:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
    1c10:	f021 011f 	bic.w	r1, r1, #31
    1c14:	6069      	str	r1, [r5, #4]
	region_conf->attr.r_limit = MPU->RLAR & MPU_RLAR_LIMIT_Msk;
    1c16:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
    1c1a:	f021 011f 	bic.w	r1, r1, #31
    1c1e:	6129      	str	r1, [r5, #16]
	for (int i = 0; i < dyn_region_areas_num; i++) {
    1c20:	f108 0801 	add.w	r8, r8, #1
    1c24:	3514      	adds	r5, #20
    1c26:	360c      	adds	r6, #12
    1c28:	e7b3      	b.n	1b92 <arm_core_mpu_mark_areas_for_dynamic_regions+0x12>
    1c2a:	bf00      	nop
    1c2c:	20000294 	.word	0x20000294
    1c30:	e000ed00 	.word	0xe000ed00
    1c34:	20000398 	.word	0x20000398

00001c38 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1c38:	4b01      	ldr	r3, [pc, #4]	; (1c40 <__stdout_hook_install+0x8>)
    1c3a:	6018      	str	r0, [r3, #0]
}
    1c3c:	4770      	bx	lr
    1c3e:	bf00      	nop
    1c40:	20000008 	.word	0x20000008

00001c44 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1c44:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    1c46:	4b09      	ldr	r3, [pc, #36]	; (1c6c <gpio_nrfx_init+0x28>)
    1c48:	781a      	ldrb	r2, [r3, #0]
    1c4a:	b96a      	cbnz	r2, 1c68 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
    1c4c:	2101      	movs	r1, #1
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1c4e:	200d      	movs	r0, #13
		gpio_initialized = true;
    1c50:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1c52:	2105      	movs	r1, #5
    1c54:	f7ff fc9c 	bl	1590 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
    1c58:	200d      	movs	r0, #13
    1c5a:	f7ff fc7b 	bl	1554 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
    1c5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    1c62:	4b03      	ldr	r3, [pc, #12]	; (1c70 <gpio_nrfx_init+0x2c>)
    1c64:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    1c68:	2000      	movs	r0, #0
    1c6a:	bd08      	pop	{r3, pc}
    1c6c:	20000399 	.word	0x20000399
    1c70:	5000d000 	.word	0x5000d000

00001c74 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1c74:	4b2a      	ldr	r3, [pc, #168]	; (1d20 <gpio_nrfx_config+0xac>)
{
    1c76:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
    1c78:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1c7a:	482a      	ldr	r0, [pc, #168]	; (1d24 <gpio_nrfx_config+0xb0>)
    1c7c:	4013      	ands	r3, r2
    1c7e:	4283      	cmp	r3, r0
    1c80:	d03f      	beq.n	1d02 <gpio_nrfx_config+0x8e>
    1c82:	d80d      	bhi.n	1ca0 <gpio_nrfx_config+0x2c>
    1c84:	2b06      	cmp	r3, #6
    1c86:	d015      	beq.n	1cb4 <gpio_nrfx_config+0x40>
    1c88:	d805      	bhi.n	1c96 <gpio_nrfx_config+0x22>
    1c8a:	b19b      	cbz	r3, 1cb4 <gpio_nrfx_config+0x40>
    1c8c:	2b02      	cmp	r3, #2
    1c8e:	d03a      	beq.n	1d06 <gpio_nrfx_config+0x92>
    1c90:	f06f 0015 	mvn.w	r0, #21
    1c94:	e034      	b.n	1d00 <gpio_nrfx_config+0x8c>
    1c96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    1c9a:	d1f9      	bne.n	1c90 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
    1c9c:	2301      	movs	r3, #1
    1c9e:	e009      	b.n	1cb4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    1ca0:	4821      	ldr	r0, [pc, #132]	; (1d28 <gpio_nrfx_config+0xb4>)
    1ca2:	4283      	cmp	r3, r0
    1ca4:	d031      	beq.n	1d0a <gpio_nrfx_config+0x96>
    1ca6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    1caa:	d030      	beq.n	1d0e <gpio_nrfx_config+0x9a>
    1cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    1cb0:	d1ee      	bne.n	1c90 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
    1cb2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
    1cb4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_PULLUP;
    1cb6:	bf4c      	ite	mi
    1cb8:	2603      	movmi	r6, #3
		pull = NRF_GPIO_PIN_NOPULL;
    1cba:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1cbe:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
    1cc2:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
    1cc4:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    1cc8:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
    1ccc:	d506      	bpl.n	1cdc <gpio_nrfx_config+0x68>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1cce:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    1cd2:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    1cd4:	d01d      	beq.n	1d12 <gpio_nrfx_config+0x9e>
			nrf_gpio_port_out_set(reg, BIT(pin));
    1cd6:	2201      	movs	r2, #1
    1cd8:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    1cda:	60ba      	str	r2, [r7, #8]
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    1cdc:	7a27      	ldrb	r7, [r4, #8]
        case 1: return NRF_P1;
    1cde:	4a13      	ldr	r2, [pc, #76]	; (1d2c <gpio_nrfx_config+0xb8>)
    1ce0:	4c13      	ldr	r4, [pc, #76]	; (1d30 <gpio_nrfx_config+0xbc>)
    *p_pin = pin_number & 0x1F;
    1ce2:	f001 011f 	and.w	r1, r1, #31
        case 1: return NRF_P1;
    1ce6:	2f01      	cmp	r7, #1
    1ce8:	bf08      	it	eq
    1cea:	4614      	moveq	r4, r2
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
    1cec:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
	return 0;
    1cf0:	2000      	movs	r0, #0
    1cf2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    1cf6:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    1cfa:	3180      	adds	r1, #128	; 0x80
    1cfc:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
}
    1d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
    1d02:	2307      	movs	r3, #7
    1d04:	e7d6      	b.n	1cb4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
    1d06:	2304      	movs	r3, #4
    1d08:	e7d4      	b.n	1cb4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
    1d0a:	2305      	movs	r3, #5
    1d0c:	e7d2      	b.n	1cb4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
    1d0e:	2303      	movs	r3, #3
    1d10:	e7d0      	b.n	1cb4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    1d12:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
    1d14:	bf42      	ittt	mi
    1d16:	2201      	movmi	r2, #1
    1d18:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
    1d1a:	60fa      	strmi	r2, [r7, #12]
}
    1d1c:	e7de      	b.n	1cdc <gpio_nrfx_config+0x68>
    1d1e:	bf00      	nop
    1d20:	00f00006 	.word	0x00f00006
    1d24:	00100006 	.word	0x00100006
    1d28:	00400002 	.word	0x00400002
    1d2c:	50842800 	.word	0x50842800
    1d30:	50842500 	.word	0x50842500

00001d34 <nrf_gpio_cfg_sense_set>:
{
    1d34:	b510      	push	{r4, lr}
        case 1: return NRF_P1;
    1d36:	4b09      	ldr	r3, [pc, #36]	; (1d5c <nrf_gpio_cfg_sense_set+0x28>)
    1d38:	4c09      	ldr	r4, [pc, #36]	; (1d60 <nrf_gpio_cfg_sense_set+0x2c>)
    *p_pin = pin_number & 0x1F;
    1d3a:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
    1d3e:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
    1d40:	2801      	cmp	r0, #1
    1d42:	bf08      	it	eq
    1d44:	4623      	moveq	r3, r4
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    1d46:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1d4a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    1d4e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    1d52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    1d56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    1d5a:	bd10      	pop	{r4, pc}
    1d5c:	50842500 	.word	0x50842500
    1d60:	50842800 	.word	0x50842800

00001d64 <gpiote_event_handler>:
{
    1d64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    1d66:	2600      	movs	r6, #0
    1d68:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1d6c:	4d28      	ldr	r5, [pc, #160]	; (1e10 <gpiote_event_handler+0xac>)
    1d6e:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
    1d72:	b15c      	cbz	r4, 1d8c <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
    1d74:	4827      	ldr	r0, [pc, #156]	; (1e14 <gpiote_event_handler+0xb0>)
    1d76:	f001 fde2 	bl	393e <check_level_trigger_pins>
		fired_triggers[0] =
    1d7a:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
    1d7c:	4826      	ldr	r0, [pc, #152]	; (1e18 <gpiote_event_handler+0xb4>)
    1d7e:	f001 fdde 	bl	393e <check_level_trigger_pins>
		fired_triggers[1] =
    1d82:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1d84:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
    1d88:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
    1d8c:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    1d8e:	2601      	movs	r6, #1
    1d90:	4694      	mov	ip, r2
{
    1d92:	4922      	ldr	r1, [pc, #136]	; (1e1c <gpiote_event_handler+0xb8>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    1d94:	4d1e      	ldr	r5, [pc, #120]	; (1e10 <gpiote_event_handler+0xac>)
    1d96:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    1d9a:	fa06 f002 	lsl.w	r0, r6, r2
    1d9e:	4218      	tst	r0, r3
    1da0:	d016      	beq.n	1dd0 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    1da2:	680b      	ldr	r3, [r1, #0]
    1da4:	b1a3      	cbz	r3, 1dd0 <gpiote_event_handler+0x6c>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1da6:	f502 73a2 	add.w	r3, r2, #324	; 0x144
    1daa:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    1dae:	af02      	add	r7, sp, #8
    1db0:	f3c3 3040 	ubfx	r0, r3, #13, #1
    1db4:	eb07 0080 	add.w	r0, r7, r0, lsl #2
    1db8:	f850 7c08 	ldr.w	r7, [r0, #-8]
    1dbc:	f3c3 2304 	ubfx	r3, r3, #8, #5
    1dc0:	fa06 f303 	lsl.w	r3, r6, r3
    1dc4:	433b      	orrs	r3, r7
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1dc6:	f8c1 c000 	str.w	ip, [r1]
    1dca:	f840 3c08 	str.w	r3, [r0, #-8]
    1dce:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1dd0:	3201      	adds	r2, #1
    1dd2:	2a08      	cmp	r2, #8
    1dd4:	f101 0104 	add.w	r1, r1, #4
    1dd8:	d1dd      	bne.n	1d96 <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
    1dda:	9a00      	ldr	r2, [sp, #0]
    1ddc:	b122      	cbz	r2, 1de8 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
    1dde:	4b10      	ldr	r3, [pc, #64]	; (1e20 <gpiote_event_handler+0xbc>)
    1de0:	490c      	ldr	r1, [pc, #48]	; (1e14 <gpiote_event_handler+0xb0>)
    1de2:	6858      	ldr	r0, [r3, #4]
    1de4:	f001 fd74 	bl	38d0 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
    1de8:	9a01      	ldr	r2, [sp, #4]
    1dea:	b122      	cbz	r2, 1df6 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
    1dec:	4b0d      	ldr	r3, [pc, #52]	; (1e24 <gpiote_event_handler+0xc0>)
    1dee:	490a      	ldr	r1, [pc, #40]	; (1e18 <gpiote_event_handler+0xb4>)
    1df0:	6858      	ldr	r0, [r3, #4]
    1df2:	f001 fd6d 	bl	38d0 <gpio_fire_callbacks.isra.0>
	if (port_event) {
    1df6:	b144      	cbz	r4, 1e0a <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    1df8:	4806      	ldr	r0, [pc, #24]	; (1e14 <gpiote_event_handler+0xb0>)
    1dfa:	f001 fd7a 	bl	38f2 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    1dfe:	4806      	ldr	r0, [pc, #24]	; (1e18 <gpiote_event_handler+0xb4>)
}
    1e00:	b003      	add	sp, #12
    1e02:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    1e06:	f001 bd74 	b.w	38f2 <cfg_level_pins>
}
    1e0a:	b003      	add	sp, #12
    1e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1e0e:	bf00      	nop
    1e10:	5000d000 	.word	0x5000d000
    1e14:	20000074 	.word	0x20000074
    1e18:	2000008c 	.word	0x2000008c
    1e1c:	5000d100 	.word	0x5000d100
    1e20:	200002b0 	.word	0x200002b0
    1e24:	200002cc 	.word	0x200002cc

00001e28 <gpio_nrfx_pin_interrupt_configure>:
{
    1e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1e2a:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1e2c:	6842      	ldr	r2, [r0, #4]
    1e2e:	f001 051f 	and.w	r5, r1, #31
    1e32:	7a12      	ldrb	r2, [r2, #8]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    1e34:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
    1e38:	460e      	mov	r6, r1
	return port->data;
    1e3a:	6907      	ldr	r7, [r0, #16]
	if ((mode == GPIO_INT_MODE_EDGE) &&
    1e3c:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
    1e40:	d110      	bne.n	1e64 <gpio_nrfx_pin_interrupt_configure+0x3c>
        case 1: return NRF_P1;
    1e42:	4963      	ldr	r1, [pc, #396]	; (1fd0 <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    1e44:	f8df c18c 	ldr.w	ip, [pc, #396]	; 1fd4 <gpio_nrfx_pin_interrupt_configure+0x1ac>
    return pin_number >> 5;
    1e48:	0968      	lsrs	r0, r5, #5
        case 1: return NRF_P1;
    1e4a:	2801      	cmp	r0, #1
    1e4c:	bf08      	it	eq
    1e4e:	4661      	moveq	r1, ip
    *p_pin = pin_number & 0x1F;
    1e50:	f005 021f 	and.w	r2, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1e54:	3280      	adds	r2, #128	; 0x80
    1e56:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1e5a:	07d0      	lsls	r0, r2, #31
    1e5c:	d507      	bpl.n	1e6e <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
    1e5e:	f06f 0022 	mvn.w	r0, #34	; 0x22
    1e62:	e09a      	b.n	1f9a <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1e64:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
    1e68:	68f9      	ldr	r1, [r7, #12]
    1e6a:	f000 8098 	beq.w	1f9e <gpio_nrfx_pin_interrupt_configure+0x176>
    1e6e:	2101      	movs	r1, #1
    1e70:	68fa      	ldr	r2, [r7, #12]
    1e72:	40b1      	lsls	r1, r6
    1e74:	4311      	orrs	r1, r2
    1e76:	60f9      	str	r1, [r7, #12]
    1e78:	2101      	movs	r1, #1
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1e7a:	2000      	movs	r0, #0
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1e7c:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1e7e:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    1e80:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    1e84:	bf0c      	ite	eq
    1e86:	430a      	orreq	r2, r1
    1e88:	438a      	bicne	r2, r1
    1e8a:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    1e8c:	69ba      	ldr	r2, [r7, #24]
    1e8e:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    1e92:	bf0c      	ite	eq
    1e94:	430a      	orreq	r2, r1
    1e96:	438a      	bicne	r2, r1
    1e98:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    1e9a:	693a      	ldr	r2, [r7, #16]
    1e9c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    1ea0:	bf0c      	ite	eq
    1ea2:	4311      	orreq	r1, r2
    1ea4:	ea22 0101 	bicne.w	r1, r2, r1
    return p_reg->INTENSET & mask;
    1ea8:	4a4b      	ldr	r2, [pc, #300]	; (1fd8 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
    1eaa:	6139      	str	r1, [r7, #16]
    1eac:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    1eb0:	b2db      	uxtb	r3, r3
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    1eb2:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    1eb6:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    1eba:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    1ebe:	428d      	cmp	r5, r1
    1ec0:	d172      	bne.n	1fa8 <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
    1ec2:	fa23 f100 	lsr.w	r1, r3, r0
    1ec6:	07c9      	lsls	r1, r1, #31
    1ec8:	d56e      	bpl.n	1fa8 <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    1eca:	0083      	lsls	r3, r0, #2
    1ecc:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1ed0:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    1ed4:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1ed8:	f021 0101 	bic.w	r1, r1, #1
    1edc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    1ee0:	2301      	movs	r3, #1
    1ee2:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
    1ee4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    1ee8:	b2c0      	uxtb	r0, r0
    1eea:	f000 fb6f 	bl	25cc <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    1eee:	4628      	mov	r0, r5
    1ef0:	2100      	movs	r1, #0
    1ef2:	f7ff ff1f 	bl	1d34 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
    1ef6:	68f8      	ldr	r0, [r7, #12]
    1ef8:	40f0      	lsrs	r0, r6
    1efa:	f010 0001 	ands.w	r0, r0, #1
    1efe:	d04c      	beq.n	1f9a <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
    1f00:	6978      	ldr	r0, [r7, #20]
    1f02:	40f0      	lsrs	r0, r6
    1f04:	f010 0401 	ands.w	r4, r0, #1
    1f08:	d055      	beq.n	1fb6 <gpio_nrfx_pin_interrupt_configure+0x18e>
			if (data->double_edge & BIT(pin)) {
    1f0a:	69bb      	ldr	r3, [r7, #24]
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1f0c:	f10d 0007 	add.w	r0, sp, #7
			if (data->double_edge & BIT(pin)) {
    1f10:	40f3      	lsrs	r3, r6
    1f12:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1f14:	bf57      	itett	pl
    1f16:	6939      	ldrpl	r1, [r7, #16]
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
    1f18:	2603      	movmi	r6, #3
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
    1f1a:	fa21 f606 	lsrpl.w	r6, r1, r6
    1f1e:	f006 0601 	andpl.w	r6, r6, #1
    1f22:	bf5c      	itt	pl
    1f24:	f1c6 0602 	rsbpl	r6, r6, #2
    1f28:	b2f6      	uxtbpl	r6, r6
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    1f2a:	f000 fb6f 	bl	260c <nrfx_gpiote_channel_alloc>
    1f2e:	4b2b      	ldr	r3, [pc, #172]	; (1fdc <gpio_nrfx_pin_interrupt_configure+0x1b4>)
    1f30:	4298      	cmp	r0, r3
    1f32:	d13d      	bne.n	1fb0 <gpio_nrfx_pin_interrupt_configure+0x188>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1f34:	2000      	movs	r0, #0
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    1f36:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1f3a:	022d      	lsls	r5, r5, #8
    1f3c:	0093      	lsls	r3, r2, #2
    1f3e:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1f42:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1f46:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1f4a:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    1f4e:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    1f52:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    1f56:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    1f5a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    1f5e:	430d      	orrs	r5, r1
    1f60:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
    1f64:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
    1f68:	0093      	lsls	r3, r2, #2
    1f6a:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1f6e:	f503 4351 	add.w	r3, r3, #53504	; 0xd100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    1f72:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    1f74:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1f78:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    1f7a:	008b      	lsls	r3, r1, #2
    1f7c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
    1f80:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    1f84:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    1f88:	f042 0201 	orr.w	r2, r2, #1
    1f8c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    1f90:	2301      	movs	r3, #1
    p_reg->INTENSET = mask;
    1f92:	4a11      	ldr	r2, [pc, #68]	; (1fd8 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
    1f94:	408b      	lsls	r3, r1
    1f96:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    1f9a:	b003      	add	sp, #12
    1f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    1f9e:	2201      	movs	r2, #1
    1fa0:	40b2      	lsls	r2, r6
    1fa2:	ea21 0102 	bic.w	r1, r1, r2
    1fa6:	e766      	b.n	1e76 <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    1fa8:	3001      	adds	r0, #1
    1faa:	2808      	cmp	r0, #8
    1fac:	d181      	bne.n	1eb2 <gpio_nrfx_pin_interrupt_configure+0x8a>
    1fae:	e79e      	b.n	1eee <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
    1fb0:	f06f 0012 	mvn.w	r0, #18
    1fb4:	e7f1      	b.n	1f9a <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1fb6:	6939      	ldr	r1, [r7, #16]
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1fb8:	4628      	mov	r0, r5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    1fba:	40f1      	lsrs	r1, r6
    1fbc:	f001 0101 	and.w	r1, r1, #1
    1fc0:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    1fc4:	b2c9      	uxtb	r1, r1
    1fc6:	f7ff feb5 	bl	1d34 <nrf_gpio_cfg_sense_set>
	int res = 0;
    1fca:	4620      	mov	r0, r4
    1fcc:	e7e5      	b.n	1f9a <gpio_nrfx_pin_interrupt_configure+0x172>
    1fce:	bf00      	nop
    1fd0:	50842500 	.word	0x50842500
    1fd4:	50842800 	.word	0x50842800
    1fd8:	5000d000 	.word	0x5000d000
    1fdc:	0bad0000 	.word	0x0bad0000

00001fe0 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
    1fe0:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
    1fe2:	f003 021f 	and.w	r2, r3, #31
    1fe6:	6002      	str	r2, [r0, #0]
}
    1fe8:	4a03      	ldr	r2, [pc, #12]	; (1ff8 <nrf_gpio_pin_port_decode+0x18>)
    1fea:	4804      	ldr	r0, [pc, #16]	; (1ffc <nrf_gpio_pin_port_decode+0x1c>)
    return pin_number >> 5;
    1fec:	095b      	lsrs	r3, r3, #5
}
    1fee:	2b01      	cmp	r3, #1
    1ff0:	bf08      	it	eq
    1ff2:	4610      	moveq	r0, r2
    1ff4:	4770      	bx	lr
    1ff6:	bf00      	nop
    1ff8:	50842800 	.word	0x50842800
    1ffc:	50842500 	.word	0x50842500

00002000 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    2000:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    2002:	794b      	ldrb	r3, [r1, #5]
    2004:	2b01      	cmp	r3, #1
    2006:	d02b      	beq.n	2060 <uarte_nrfx_configure+0x60>
    2008:	2b03      	cmp	r3, #3
    200a:	d126      	bne.n	205a <uarte_nrfx_configure+0x5a>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    200c:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    200e:	798b      	ldrb	r3, [r1, #6]
    2010:	2b03      	cmp	r3, #3
    2012:	d122      	bne.n	205a <uarte_nrfx_configure+0x5a>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    2014:	79cd      	ldrb	r5, [r1, #7]
    2016:	b125      	cbz	r5, 2022 <uarte_nrfx_configure+0x22>
    2018:	2d01      	cmp	r5, #1
    201a:	d11e      	bne.n	205a <uarte_nrfx_configure+0x5a>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
    201c:	6843      	ldr	r3, [r0, #4]
    201e:	791b      	ldrb	r3, [r3, #4]
    2020:	b1db      	cbz	r3, 205a <uarte_nrfx_configure+0x5a>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    2022:	790a      	ldrb	r2, [r1, #4]
    2024:	2a01      	cmp	r2, #1
    2026:	d01d      	beq.n	2064 <uarte_nrfx_configure+0x64>
    2028:	2a02      	cmp	r2, #2
    202a:	d01f      	beq.n	206c <uarte_nrfx_configure+0x6c>
    202c:	b9aa      	cbnz	r2, 205a <uarte_nrfx_configure+0x5a>
    202e:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    2030:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    2032:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    2034:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    2038:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    203a:	d06e      	beq.n	211a <uarte_nrfx_configure+0x11a>
    203c:	d833      	bhi.n	20a6 <uarte_nrfx_configure+0xa6>
    203e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    2042:	d06d      	beq.n	2120 <uarte_nrfx_configure+0x120>
    2044:	d81c      	bhi.n	2080 <uarte_nrfx_configure+0x80>
    2046:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    204a:	d06b      	beq.n	2124 <uarte_nrfx_configure+0x124>
    204c:	d810      	bhi.n	2070 <uarte_nrfx_configure+0x70>
    204e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    2052:	d06a      	beq.n	212a <uarte_nrfx_configure+0x12a>
    2054:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    2058:	d06a      	beq.n	2130 <uarte_nrfx_configure+0x130>
    205a:	f06f 0022 	mvn.w	r0, #34	; 0x22
    205e:	e05b      	b.n	2118 <uarte_nrfx_configure+0x118>
	switch (cfg->stop_bits) {
    2060:	2700      	movs	r7, #0
    2062:	e7d4      	b.n	200e <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    2064:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    2068:	220e      	movs	r2, #14
    206a:	e7e1      	b.n	2030 <uarte_nrfx_configure+0x30>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    206c:	2400      	movs	r4, #0
    206e:	e7fb      	b.n	2068 <uarte_nrfx_configure+0x68>
	switch (baudrate) {
    2070:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    2074:	d05f      	beq.n	2136 <uarte_nrfx_configure+0x136>
    2076:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    207a:	d1ee      	bne.n	205a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    207c:	4b38      	ldr	r3, [pc, #224]	; (2160 <uarte_nrfx_configure+0x160>)
    207e:	e03e      	b.n	20fe <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    2080:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    2084:	d05a      	beq.n	213c <uarte_nrfx_configure+0x13c>
    2086:	d807      	bhi.n	2098 <uarte_nrfx_configure+0x98>
    2088:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    208c:	d058      	beq.n	2140 <uarte_nrfx_configure+0x140>
    208e:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    2092:	d1e2      	bne.n	205a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    2094:	4b33      	ldr	r3, [pc, #204]	; (2164 <uarte_nrfx_configure+0x164>)
    2096:	e032      	b.n	20fe <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    2098:	f647 2c12 	movw	ip, #31250	; 0x7a12
    209c:	4563      	cmp	r3, ip
    209e:	d1dc      	bne.n	205a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    20a0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    20a4:	e02b      	b.n	20fe <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    20a6:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    20aa:	d04b      	beq.n	2144 <uarte_nrfx_configure+0x144>
    20ac:	d813      	bhi.n	20d6 <uarte_nrfx_configure+0xd6>
    20ae:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    20b2:	d04a      	beq.n	214a <uarte_nrfx_configure+0x14a>
    20b4:	d809      	bhi.n	20ca <uarte_nrfx_configure+0xca>
    20b6:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    20ba:	4563      	cmp	r3, ip
    20bc:	d047      	beq.n	214e <uarte_nrfx_configure+0x14e>
    20be:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    20c2:	d1ca      	bne.n	205a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    20c4:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    20c8:	e019      	b.n	20fe <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    20ca:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    20ce:	d1c4      	bne.n	205a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    20d0:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    20d4:	e013      	b.n	20fe <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    20d6:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    20da:	d03b      	beq.n	2154 <uarte_nrfx_configure+0x154>
    20dc:	d809      	bhi.n	20f2 <uarte_nrfx_configure+0xf2>
    20de:	f8df c088 	ldr.w	ip, [pc, #136]	; 2168 <uarte_nrfx_configure+0x168>
    20e2:	4563      	cmp	r3, ip
    20e4:	d039      	beq.n	215a <uarte_nrfx_configure+0x15a>
    20e6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    20ea:	d1b6      	bne.n	205a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    20ec:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    20f0:	e005      	b.n	20fe <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    20f2:	f8df c078 	ldr.w	ip, [pc, #120]	; 216c <uarte_nrfx_configure+0x16c>
    20f6:	4563      	cmp	r3, ip
    20f8:	d1af      	bne.n	205a <uarte_nrfx_configure+0x5a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    20fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    20fe:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    2102:	6903      	ldr	r3, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
    2104:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    2106:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    2108:	4322      	orrs	r2, r4
    210a:	3304      	adds	r3, #4
    210c:	c903      	ldmia	r1, {r0, r1}
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    210e:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    2112:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    2116:	2000      	movs	r0, #0
}
    2118:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    211a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    211e:	e7ee      	b.n	20fe <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    2120:	4b13      	ldr	r3, [pc, #76]	; (2170 <uarte_nrfx_configure+0x170>)
    2122:	e7ec      	b.n	20fe <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    2124:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    2128:	e7e9      	b.n	20fe <uarte_nrfx_configure+0xfe>
		nrf_baudrate = 0x00014000;
    212a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    212e:	e7e6      	b.n	20fe <uarte_nrfx_configure+0xfe>
	switch (baudrate) {
    2130:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    2134:	e7e3      	b.n	20fe <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    2136:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    213a:	e7e0      	b.n	20fe <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    213c:	4b0d      	ldr	r3, [pc, #52]	; (2174 <uarte_nrfx_configure+0x174>)
    213e:	e7de      	b.n	20fe <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    2140:	4b0d      	ldr	r3, [pc, #52]	; (2178 <uarte_nrfx_configure+0x178>)
    2142:	e7dc      	b.n	20fe <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    2144:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    2148:	e7d9      	b.n	20fe <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    214a:	4b0c      	ldr	r3, [pc, #48]	; (217c <uarte_nrfx_configure+0x17c>)
    214c:	e7d7      	b.n	20fe <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    214e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    2152:	e7d4      	b.n	20fe <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    2154:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    2158:	e7d1      	b.n	20fe <uarte_nrfx_configure+0xfe>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    215a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    215e:	e7ce      	b.n	20fe <uarte_nrfx_configure+0xfe>
    2160:	0013b000 	.word	0x0013b000
    2164:	004ea000 	.word	0x004ea000
    2168:	0003d090 	.word	0x0003d090
    216c:	000f4240 	.word	0x000f4240
    2170:	00275000 	.word	0x00275000
    2174:	0075c000 	.word	0x0075c000
    2178:	003af000 	.word	0x003af000
    217c:	013a9000 	.word	0x013a9000

00002180 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    2180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2184:	4606      	mov	r6, r0
    2186:	4688      	mov	r8, r1
	return dev->data;
    2188:	6907      	ldr	r7, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    218a:	f001 fdf2 	bl	3d72 <k_is_in_isr>
    218e:	b9b8      	cbnz	r0, 21c0 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
    2190:	4b28      	ldr	r3, [pc, #160]	; (2234 <uarte_nrfx_poll_out+0xb4>)
    2192:	781b      	ldrb	r3, [r3, #0]
    2194:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
    2198:	6872      	ldr	r2, [r6, #4]
    219a:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
    219c:	b193      	cbz	r3, 21c4 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    219e:	f04f 0320 	mov.w	r3, #32
    21a2:	f3ef 8411 	mrs	r4, BASEPRI
    21a6:	f383 8811 	msr	BASEPRI, r3
    21aa:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    21ae:	6870      	ldr	r0, [r6, #4]
    21b0:	f001 fc0f 	bl	39d2 <is_tx_ready.isra.0>
    21b4:	bb38      	cbnz	r0, 2206 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
    21b6:	f384 8811 	msr	BASEPRI, r4
    21ba:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    21be:	e7ee      	b.n	219e <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    21c0:	2301      	movs	r3, #1
    21c2:	e7e9      	b.n	2198 <uarte_nrfx_poll_out+0x18>
    21c4:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    21c6:	6870      	ldr	r0, [r6, #4]
    21c8:	f001 fc03 	bl	39d2 <is_tx_ready.isra.0>
    21cc:	b970      	cbnz	r0, 21ec <uarte_nrfx_poll_out+0x6c>
    21ce:	2001      	movs	r0, #1
    21d0:	f001 fc2f 	bl	3a32 <nrfx_busy_wait>
    21d4:	3c01      	subs	r4, #1
    21d6:	d1f6      	bne.n	21c6 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
    21d8:	2100      	movs	r1, #0
    21da:	2021      	movs	r0, #33	; 0x21
    21dc:	f000 fde4 	bl	2da8 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    21e0:	e7f0      	b.n	21c4 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
    21e2:	f384 8811 	msr	BASEPRI, r4
    21e6:	f3bf 8f6f 	isb	sy
}
    21ea:	e7f5      	b.n	21d8 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
    21ec:	f04f 0320 	mov.w	r3, #32
    21f0:	f3ef 8411 	mrs	r4, BASEPRI
    21f4:	f383 8811 	msr	BASEPRI, r3
    21f8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    21fc:	6870      	ldr	r0, [r6, #4]
    21fe:	f001 fbe8 	bl	39d2 <is_tx_ready.isra.0>
    2202:	2800      	cmp	r0, #0
    2204:	d0ed      	beq.n	21e2 <uarte_nrfx_poll_out+0x62>
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    2206:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2208:	2200      	movs	r2, #0
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
    220a:	f807 8f10 	strb.w	r8, [r7, #16]!
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    220e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2212:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2216:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
    221a:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
    221e:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
    2222:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2226:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
    2228:	f384 8811 	msr	BASEPRI, r4
    222c:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
    2230:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2234:	2000039a 	.word	0x2000039a

00002238 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    2238:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    223c:	4605      	mov	r5, r0
    223e:	2200      	movs	r2, #0
    2240:	2101      	movs	r1, #1
    2242:	2008      	movs	r0, #8
    2244:	f7ff f9a4 	bl	1590 <z_arm_irq_priority_set>
    2248:	2008      	movs	r0, #8
    224a:	f7ff f983 	bl	1554 <arch_irq_enable>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    224e:	2100      	movs	r1, #0
    2250:	2714      	movs	r7, #20
	return config->uarte_regs;
    2252:	686b      	ldr	r3, [r5, #4]
	return dev->data;
    2254:	692e      	ldr	r6, [r5, #16]
	return config->uarte_regs;
    2256:	681c      	ldr	r4, [r3, #0]
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2258:	f04f 0801 	mov.w	r8, #1
    225c:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2260:	a801      	add	r0, sp, #4
	data->dev = dev;
    2262:	6035      	str	r5, [r6, #0]
        nrf_gpio_pin_set(pin_number);
    2264:	9701      	str	r7, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2266:	f7ff febb 	bl	1fe0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    226a:	9b01      	ldr	r3, [sp, #4]
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    226c:	f04f 0903 	mov.w	r9, #3
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    2270:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
    2274:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    2276:	a801      	add	r0, sp, #4
    2278:	9701      	str	r7, [sp, #4]
    227a:	f7ff feb1 	bl	1fe0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    227e:	f04f 0a16 	mov.w	sl, #22
    2282:	9b01      	ldr	r3, [sp, #4]
    2284:	3380      	adds	r3, #128	; 0x80
    2286:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    228a:	a801      	add	r0, sp, #4
    228c:	f8cd a004 	str.w	sl, [sp, #4]
    2290:	f7ff fea6 	bl	1fe0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    2294:	9b01      	ldr	r3, [sp, #4]
    2296:	3380      	adds	r3, #128	; 0x80
    2298:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
    p_reg->PSEL.TXD = pseltxd;
    229c:	f8c4 750c 	str.w	r7, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    22a0:	2715      	movs	r7, #21
    22a2:	f8c4 a514 	str.w	sl, [r4, #1300]	; 0x514
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    22a6:	a801      	add	r0, sp, #4
    22a8:	9701      	str	r7, [sp, #4]
    22aa:	f7ff fe99 	bl	1fe0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    22ae:	9b01      	ldr	r3, [sp, #4]
    22b0:	3380      	adds	r3, #128	; 0x80
    22b2:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        nrf_gpio_pin_set(pin_number);
    22b6:	2113      	movs	r1, #19
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    22b8:	a801      	add	r0, sp, #4
    22ba:	9101      	str	r1, [sp, #4]
    22bc:	f7ff fe90 	bl	1fe0 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    22c0:	9b01      	ldr	r3, [sp, #4]
    22c2:	fa08 f303 	lsl.w	r3, r8, r3
    p_reg->OUTSET = set_mask;
    22c6:	6083      	str	r3, [r0, #8]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    22c8:	a801      	add	r0, sp, #4
    22ca:	9101      	str	r1, [sp, #4]
    22cc:	f7ff fe88 	bl	1fe0 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
    22d0:	9b01      	ldr	r3, [sp, #4]
    22d2:	3380      	adds	r3, #128	; 0x80
    22d4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
    p_reg->PSEL.RTS = pselrts;
    22d8:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    22dc:	6929      	ldr	r1, [r5, #16]
    p_reg->PSEL.CTS = pselcts;
    22de:	f8c4 7510 	str.w	r7, [r4, #1296]	; 0x510
    22e2:	4628      	mov	r0, r5
    22e4:	3104      	adds	r1, #4
    22e6:	f7ff fe8b 	bl	2000 <uarte_nrfx_configure>
	if (err) {
    22ea:	4607      	mov	r7, r0
    22ec:	bba8      	cbnz	r0, 235a <uarte_0_init+0x122>
	if (get_dev_config(dev)->ppi_endtx) {
    22ee:	686b      	ldr	r3, [r5, #4]
    22f0:	799b      	ldrb	r3, [r3, #6]
    22f2:	b193      	cbz	r3, 231a <uarte_0_init+0xe2>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    22f4:	f106 0012 	add.w	r0, r6, #18
    22f8:	f000 f94c 	bl	2594 <nrfx_dppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    22fc:	4b1a      	ldr	r3, [pc, #104]	; (2368 <uarte_0_init+0x130>)
    22fe:	4298      	cmp	r0, r3
    2300:	d12f      	bne.n	2362 <uarte_0_init+0x12a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    2302:	7cb3      	ldrb	r3, [r6, #18]
}

__STATIC_INLINE void nrfx_gppi_event_endpoint_setup(uint8_t channel, uint32_t eep)
{
    NRFX_ASSERT(eep);
    *((volatile uint32_t *)(eep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    2304:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
    2308:	f8c4 21a0 	str.w	r2, [r4, #416]	; 0x1a0
}

__STATIC_INLINE void nrfx_gppi_task_endpoint_setup(uint8_t channel, uint32_t tep)
{
    NRFX_ASSERT(tep);
    *((volatile uint32_t *)(tep + 0x80uL)) = ((uint32_t)channel | DPPIC_SUBSCRIBE_CHG_EN_EN_Msk);
    230c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
    p_reg->CHENCLR = 0xFFFFFFFFuL;
}

NRF_STATIC_INLINE void nrf_dppi_channels_enable(NRF_DPPIC_Type * p_reg, uint32_t mask)
{
    p_reg->CHENSET = mask;
    2310:	4a16      	ldr	r2, [pc, #88]	; (236c <uarte_0_init+0x134>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2312:	fa08 f303 	lsl.w	r3, r8, r3
    2316:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    231a:	2308      	movs	r3, #8
    231c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2320:	2300      	movs	r3, #0
    2322:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2326:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    232a:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    232e:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    2332:	2301      	movs	r3, #1
    2334:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2338:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
    233a:	686b      	ldr	r3, [r5, #4]
    233c:	799b      	ldrb	r3, [r3, #6]
    233e:	b91b      	cbnz	r3, 2348 <uarte_0_init+0x110>
    p_reg->INTENSET = mask;
    2340:	f44f 7380 	mov.w	r3, #256	; 0x100
    2344:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
    2348:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    234a:	3610      	adds	r6, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    234c:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    2350:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2354:	2301      	movs	r3, #1
    2356:	60a3      	str	r3, [r4, #8]
    2358:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    235a:	4638      	mov	r0, r7
    235c:	b002      	add	sp, #8
    235e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -EIO;
    2362:	f06f 0704 	mvn.w	r7, #4
UART_NRF_UARTE_DEVICE(0);
    2366:	e7f8      	b.n	235a <uarte_0_init+0x122>
    2368:	0bad0000 	.word	0x0bad0000
    236c:	50017000 	.word	0x50017000

00002370 <nrf53_errata_42>:
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    2370:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2374:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    2378:	2a07      	cmp	r2, #7
    237a:	d107      	bne.n	238c <nrf53_errata_42+0x1c>
                {
                    switch(var2)
    237c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
    2380:	3b02      	subs	r3, #2
    2382:	2b03      	cmp	r3, #3
    2384:	d802      	bhi.n	238c <nrf53_errata_42+0x1c>
    2386:	4a02      	ldr	r2, [pc, #8]	; (2390 <nrf53_errata_42+0x20>)
    2388:	5cd0      	ldrb	r0, [r2, r3]
    238a:	4770      	bx	lr
                            return false;
                    }
                }
            #endif
        #endif
        return false;
    238c:	2000      	movs	r0, #0
    #endif
}
    238e:	4770      	bx	lr
    2390:	000041ed 	.word	0x000041ed

00002394 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
#if defined(NRF_TRUSTZONE_NONSECURE)
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_NS->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
#else
    SystemCoreClock = __SYSTEM_CLOCK_MAX >> (NRF_CLOCK_S->HFCLKCTRL & (CLOCK_HFCLKCTRL_HCLK_Msk));
    2394:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2398:	f8d3 2558 	ldr.w	r2, [r3, #1368]	; 0x558
    239c:	4b03      	ldr	r3, [pc, #12]	; (23ac <SystemCoreClockUpdate+0x18>)
    239e:	f002 0203 	and.w	r2, r2, #3
    23a2:	40d3      	lsrs	r3, r2
    23a4:	4a02      	ldr	r2, [pc, #8]	; (23b0 <SystemCoreClockUpdate+0x1c>)
    23a6:	6013      	str	r3, [r2, #0]
#endif
}
    23a8:	4770      	bx	lr
    23aa:	bf00      	nop
    23ac:	07a12000 	.word	0x07a12000
    23b0:	20000020 	.word	0x20000020

000023b4 <SystemInit>:

void SystemInit(void)
{
    23b4:	b508      	push	{r3, lr}
          SAU->CTRL |= (1 << SAU_CTRL_ALLNS_Pos);
        #endif

        /* Workaround for Errata 97 "ERASEPROTECT, APPROTECT, or startup problems" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_97())
    23b6:	f7ff ffdb 	bl	2370 <nrf53_errata_42>
    23ba:	b158      	cbz	r0, 23d4 <SystemInit+0x20>
        {
            if (*((volatile uint32_t *)0x50004A20ul) == 0)
    23bc:	4b3a      	ldr	r3, [pc, #232]	; (24a8 <SystemInit+0xf4>)
    23be:	f8d3 2a20 	ldr.w	r2, [r3, #2592]	; 0xa20
    23c2:	b93a      	cbnz	r2, 23d4 <SystemInit+0x20>
            {
                *((volatile uint32_t *)0x50004A20ul) = 0xDul;
    23c4:	210d      	movs	r1, #13
    23c6:	f8c3 1a20 	str.w	r1, [r3, #2592]	; 0xa20
                *((volatile uint32_t *)0x5000491Cul) = 0x1ul;
    23ca:	2101      	movs	r1, #1
    23cc:	f8c3 191c 	str.w	r1, [r3, #2332]	; 0x91c
                *((volatile uint32_t *)0x5000491Cul) = 0x0ul;
    23d0:	f8c3 291c 	str.w	r2, [r3, #2332]	; 0x91c
{
    23d4:	2200      	movs	r2, #0
    23d6:	00d3      	lsls	r3, r2, #3
    23d8:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
        }

        /* Trimming of the device. Copy all the trimming values from FICR into the target addresses. Trim
         until one ADDR is not initialized. */
        uint32_t index = 0;
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    23dc:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
    23e0:	3101      	adds	r1, #1
    23e2:	d007      	beq.n	23f4 <SystemInit+0x40>
            #if defined ( __ICCARM__ )
                /* IAR will complain about the order of volatile pointer accesses. */
                #pragma diag_suppress=Pa082
            #endif
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    23e4:	f8d3 1300 	ldr.w	r1, [r3, #768]	; 0x300
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    23e8:	3201      	adds	r2, #1
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    23ea:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    23ee:	2a20      	cmp	r2, #32
            *NRF_FICR_S->TRIMCNF[index].ADDR = NRF_FICR_S->TRIMCNF[index].DATA;
    23f0:	600b      	str	r3, [r1, #0]
        for (index = 0; index < 32ul && NRF_FICR_S->TRIMCNF[index].ADDR != (uint32_t *)0xFFFFFFFFul; index++){
    23f2:	d1f0      	bne.n	23d6 <SystemInit+0x22>
        }

        /* errata 64 must be before errata 42, as errata 42 is dependant on the changes in errata 64*/
        /* Workaround for Errata 64 "VREGMAIN has invalid configuration when CPU is running at 128 MHz" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_64())
    23f4:	f7ff ffbc 	bl	2370 <nrf53_errata_42>
    23f8:	2800      	cmp	r0, #0
    23fa:	d14d      	bne.n	2498 <SystemInit+0xe4>
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
        }

        /* Workaround for Errata 42 "Reset value of HFCLKCTRL is invalid" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_42())
    23fc:	f7ff ffb8 	bl	2370 <nrf53_errata_42>
    2400:	b140      	cbz	r0, 2414 <SystemInit+0x60>
        {
            *((volatile uint32_t *)0x50039530ul) = 0xBEEF0044ul;
    2402:	4b2a      	ldr	r3, [pc, #168]	; (24ac <SystemInit+0xf8>)
    2404:	4a2a      	ldr	r2, [pc, #168]	; (24b0 <SystemInit+0xfc>)
    2406:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
            NRF_CLOCK_S->HFCLKCTRL = CLOCK_HFCLKCTRL_HCLK_Div2 << CLOCK_HFCLKCTRL_HCLK_Pos;
    240a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    240e:	2201      	movs	r2, #1
    2410:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558
    #ifndef NRF53_SERIES
        return false;
    #else
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined(NRF_APPLICATION)
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    2414:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
                uint32_t var2 = *(uint32_t *)0x00FF0134ul;
            #endif
        #endif
        #if defined (NRF5340_XXAA) || defined (DEVELOP_IN_NRF5340)
            #if defined (NRF_APPLICATION)
                if (var1 == 0x07)
    2418:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    241c:	2b07      	cmp	r3, #7

        /* Workaround for Errata 46 "Higher power consumption of LFRC" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_46())
        {
            *((volatile uint32_t *)0x5003254Cul) = 0;
    241e:	bf02      	ittt	eq
    2420:	2200      	moveq	r2, #0
    2422:	4b24      	ldreq	r3, [pc, #144]	; (24b4 <SystemInit+0x100>)
    2424:	f8c3 254c 	streq.w	r2, [r3, #1356]	; 0x54c
        }

        /* Workaround for Errata 49 "SLEEPENTER and SLEEPEXIT events asserted after pin reset" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_49())
    2428:	f7ff ffa2 	bl	2370 <nrf53_errata_42>
    242c:	b150      	cbz	r0, 2444 <SystemInit+0x90>
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk)
    242e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2432:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2436:	07d1      	lsls	r1, r2, #31
            {
                NRF_POWER_S->EVENTS_SLEEPENTER = 0;
    2438:	bf42      	ittt	mi
    243a:	2200      	movmi	r2, #0
    243c:	f8c3 2114 	strmi.w	r2, [r3, #276]	; 0x114
                NRF_POWER_S->EVENTS_SLEEPEXIT = 0;
    2440:	f8c3 2118 	strmi.w	r2, [r3, #280]	; 0x118
                uint32_t var1 = *(uint32_t *)0x00FF0130ul;
    2444:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
                if (var1 == 0x07)
    2448:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    244c:	2b07      	cmp	r3, #7
    244e:	d109      	bne.n	2464 <SystemInit+0xb0>

        /* Workaround for Errata 55 "Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_55())
        {
            if (NRF_RESET_S->RESETREAS & RESET_RESETREAS_RESETPIN_Msk){
    2450:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2454:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2458:	07d2      	lsls	r2, r2, #31
                NRF_RESET_S->RESETREAS = ~RESET_RESETREAS_RESETPIN_Msk;
    245a:	bf44      	itt	mi
    245c:	f06f 0201 	mvnmi.w	r2, #1
    2460:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
            }
        }

        /* Workaround for Errata 69 "VREGMAIN configuration is not retained in System OFF" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf53_errata_69())
    2464:	f7ff ff84 	bl	2370 <nrf53_errata_42>
    2468:	b118      	cbz	r0, 2472 <SystemInit+0xbe>
        {
            *((volatile uint32_t *)0x5000470Cul) =0x65ul;
    246a:	2265      	movs	r2, #101	; 0x65
    246c:	4b0e      	ldr	r3, [pc, #56]	; (24a8 <SystemInit+0xf4>)
    246e:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c

        #endif

        /* Allow Non-Secure code to run FPU instructions.
         * If only the secure code should control FPU power state these registers should be configured accordingly in the secure application code. */
        SCB->NSACR |= (3UL << 10);
    2472:	4a11      	ldr	r2, [pc, #68]	; (24b8 <SystemInit+0x104>)
    2474:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
    2478:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
    247c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                /* Do nothing, allow user code to handle APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load APPROTECT soft branch from UICR.
               If UICR->APPROTECT is disabled, CTRLAP->APPROTECT will be disabled. */
            NRF_CTRLAP_S->APPROTECT.DISABLE = NRF_UICR_S->APPROTECT;
    2480:	4a0e      	ldr	r2, [pc, #56]	; (24bc <SystemInit+0x108>)
    2482:	4b0f      	ldr	r3, [pc, #60]	; (24c0 <SystemInit+0x10c>)
    2484:	6811      	ldr	r1, [r2, #0]
    2486:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
                /* Do nothing, allow user code to handle SECURE APPROTECT. Use this if you want to enable authenticated debug. */

        #else
            /* Load SECURE APPROTECT soft branch from UICR.
               If UICR->SECUREAPPROTECT is disabled, CTRLAP->SECUREAPPROTECT will be disabled. */
            NRF_CTRLAP_S->SECUREAPPROTECT.DISABLE = NRF_UICR_S->SECUREAPPROTECT;
    248a:	69d2      	ldr	r2, [r2, #28]
    248c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
        __DSB();
        __ISB();
    #endif

    SystemCoreClockUpdate();
}
    2490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    SystemCoreClockUpdate();
    2494:	f7ff bf7e 	b.w	2394 <SystemCoreClockUpdate>
            *((volatile uint32_t *)0x5000470Cul) = 0x29ul;
    2498:	2229      	movs	r2, #41	; 0x29
    249a:	4b03      	ldr	r3, [pc, #12]	; (24a8 <SystemInit+0xf4>)
    249c:	f8c3 270c 	str.w	r2, [r3, #1804]	; 0x70c
            *((volatile uint32_t *)0x5000473Cul) = 0x3ul;
    24a0:	2203      	movs	r2, #3
    24a2:	f8c3 273c 	str.w	r2, [r3, #1852]	; 0x73c
    24a6:	e7a9      	b.n	23fc <SystemInit+0x48>
    24a8:	50004000 	.word	0x50004000
    24ac:	50039000 	.word	0x50039000
    24b0:	beef0044 	.word	0xbeef0044
    24b4:	50032000 	.word	0x50032000
    24b8:	e000ed00 	.word	0xe000ed00
    24bc:	00ff8000 	.word	0x00ff8000
    24c0:	50006000 	.word	0x50006000

000024c4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    24c4:	4b04      	ldr	r3, [pc, #16]	; (24d8 <nrfx_clock_init+0x14>)
    24c6:	791a      	ldrb	r2, [r3, #4]
    24c8:	b922      	cbnz	r2, 24d4 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    24ca:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    24cc:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    24ce:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    24d0:	4802      	ldr	r0, [pc, #8]	; (24dc <nrfx_clock_init+0x18>)
    24d2:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    24d4:	4802      	ldr	r0, [pc, #8]	; (24e0 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    24d6:	4770      	bx	lr
    24d8:	200002ec 	.word	0x200002ec
    24dc:	0bad0000 	.word	0x0bad0000
    24e0:	0bad000c 	.word	0x0bad000c

000024e4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    24e4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    24e8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    24ec:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    24ee:	b152      	cbz	r2, 2506 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    24f0:	2000      	movs	r0, #0
    24f2:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    24f6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    24fa:	2201      	movs	r2, #1
    24fc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2500:	4b23      	ldr	r3, [pc, #140]	; (2590 <nrfx_power_clock_irq_handler+0xac>)
    2502:	681b      	ldr	r3, [r3, #0]
    2504:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2506:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    250a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    250e:	b18a      	cbz	r2, 2534 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2510:	2200      	movs	r2, #0
    2512:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2516:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    251a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    251e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2522:	f002 0203 	and.w	r2, r2, #3
    2526:	2a01      	cmp	r2, #1
    2528:	f04f 0102 	mov.w	r1, #2
    252c:	d128      	bne.n	2580 <nrfx_power_clock_irq_handler+0x9c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    252e:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2532:	609a      	str	r2, [r3, #8]
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2534:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    2538:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    }
#endif // NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)

#if NRF_CLOCK_HAS_HFCLKAUDIO
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED))
    253c:	b162      	cbz	r2, 2558 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    253e:	2200      	movs	r2, #0
    2540:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2544:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENCLR = mask;
    2548:	f44f 7280 	mov.w	r2, #256	; 0x100
    254c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLKAUDIO_STARTED);
    2550:	4b0f      	ldr	r3, [pc, #60]	; (2590 <nrfx_power_clock_irq_handler+0xac>)
    2552:	2004      	movs	r0, #4
    2554:	681b      	ldr	r3, [r3, #0]
    2556:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2558:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    255c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    }
#endif

#if NRF_CLOCK_HAS_HFCLK192M
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLK192MSTARTED))
    2560:	b1aa      	cbz	r2, 258e <nrfx_power_clock_irq_handler+0xaa>
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2562:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2566:	2200      	movs	r2, #0
    2568:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    256c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENCLR = mask;
    2570:	f44f 7200 	mov.w	r2, #512	; 0x200
    2574:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    2578:	4b05      	ldr	r3, [pc, #20]	; (2590 <nrfx_power_clock_irq_handler+0xac>)
    257a:	2005      	movs	r0, #5
    257c:	681b      	ldr	r3, [r3, #0]
    257e:	4718      	bx	r3
    2580:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2584:	4b02      	ldr	r3, [pc, #8]	; (2590 <nrfx_power_clock_irq_handler+0xac>)
    2586:	2001      	movs	r0, #1
    2588:	681b      	ldr	r3, [r3, #0]
    258a:	4798      	blx	r3
    258c:	e7d2      	b.n	2534 <nrfx_power_clock_irq_handler+0x50>
}
    258e:	bd10      	pop	{r4, pc}
    2590:	200002ec 	.word	0x200002ec

00002594 <nrfx_dppi_channel_alloc>:
    // Clear all allocated groups.
    m_allocated_groups = 0;
}

nrfx_err_t nrfx_dppi_channel_alloc(uint8_t * p_channel)
{
    2594:	b570      	push	{r4, r5, r6, lr}
    nrfx_err_t err_code;

    // Get mask of available DPPI channels
    uint32_t remaining_channels = DPPI_AVAILABLE_CHANNELS_MASK & ~(m_allocated_channels);
    2596:	4c0a      	ldr	r4, [pc, #40]	; (25c0 <nrfx_dppi_channel_alloc+0x2c>)
    2598:	6821      	ldr	r1, [r4, #0]
    uint8_t channel = 0;

    if (!remaining_channels)
    259a:	43ce      	mvns	r6, r1
    259c:	d00e      	beq.n	25bc <nrfx_dppi_channel_alloc+0x28>
    259e:	2300      	movs	r3, #0
    25a0:	b2da      	uxtb	r2, r3
        NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    // Find first free channel
    while (!(remaining_channels & DPPI_BIT_SET(channel)))
    25a2:	fa26 f502 	lsr.w	r5, r6, r2
    25a6:	07ed      	lsls	r5, r5, #31
    25a8:	f103 0301 	add.w	r3, r3, #1
    25ac:	d5f8      	bpl.n	25a0 <nrfx_dppi_channel_alloc+0xc>
    {
        channel++;
    }

    m_allocated_channels |= DPPI_BIT_SET(channel);
    25ae:	2301      	movs	r3, #1
    25b0:	4093      	lsls	r3, r2
    25b2:	430b      	orrs	r3, r1
    *p_channel = channel;
    25b4:	7002      	strb	r2, [r0, #0]

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Allocated channel: %d.", channel);
    return err_code;
    25b6:	4803      	ldr	r0, [pc, #12]	; (25c4 <nrfx_dppi_channel_alloc+0x30>)
    m_allocated_channels |= DPPI_BIT_SET(channel);
    25b8:	6023      	str	r3, [r4, #0]
}
    25ba:	bd70      	pop	{r4, r5, r6, pc}
        return err_code;
    25bc:	4802      	ldr	r0, [pc, #8]	; (25c8 <nrfx_dppi_channel_alloc+0x34>)
    25be:	e7fc      	b.n	25ba <nrfx_dppi_channel_alloc+0x26>
    25c0:	200002f4 	.word	0x200002f4
    25c4:	0bad0000 	.word	0x0bad0000
    25c8:	0bad0002 	.word	0x0bad0002

000025cc <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    25cc:	2301      	movs	r3, #1
    25ce:	fa03 f000 	lsl.w	r0, r3, r0
    25d2:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    25d4:	b193      	cbz	r3, 25fc <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
    25d6:	f04f 0320 	mov.w	r3, #32
    25da:	f3ef 8111 	mrs	r1, BASEPRI
    25de:	f383 8811 	msr	BASEPRI, r3
    25e2:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
    25e6:	4a06      	ldr	r2, [pc, #24]	; (2600 <nrfx_gpiote_channel_free+0x34>)
    25e8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    25ea:	ea23 0000 	bic.w	r0, r3, r0
    25ee:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
    25f0:	f381 8811 	msr	BASEPRI, r1
    25f4:	f3bf 8f6f 	isb	sy
    25f8:	4802      	ldr	r0, [pc, #8]	; (2604 <nrfx_gpiote_channel_free+0x38>)
    25fa:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    25fc:	4802      	ldr	r0, [pc, #8]	; (2608 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    25fe:	4770      	bx	lr
    2600:	200002f8 	.word	0x200002f8
    2604:	0bad0000 	.word	0x0bad0000
    2608:	0bad0004 	.word	0x0bad0004

0000260c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    260c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    2610:	22ff      	movs	r2, #255	; 0xff
{
    2612:	2400      	movs	r4, #0
    return m_cb.allocated_channels_mask & (1UL << index);
    2614:	2601      	movs	r6, #1
{
    2616:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
    2618:	f8df e054 	ldr.w	lr, [pc, #84]	; 2670 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    261c:	4815      	ldr	r0, [pc, #84]	; (2674 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
    261e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2678 <nrfx_gpiote_channel_alloc+0x6c>
    2622:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
    2624:	f04f 0120 	mov.w	r1, #32
    2628:	f3ef 8c11 	mrs	ip, BASEPRI
    262c:	f381 8811 	msr	BASEPRI, r1
    2630:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    2634:	fa22 f103 	lsr.w	r1, r2, r3
    2638:	07c9      	lsls	r1, r1, #31
    263a:	d50a      	bpl.n	2652 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
    263c:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
    2640:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    2644:	4239      	tst	r1, r7
            err_code = NRFX_SUCCESS;
    2646:	bf01      	itttt	eq
    2648:	4640      	moveq	r0, r8
    m_cb.allocated_channels_mask |= (1UL << index);
    264a:	4339      	orreq	r1, r7
    264c:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            *p_channel = ch_idx;
    2650:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
    2652:	f38c 8811 	msr	BASEPRI, ip
    2656:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    265a:	4540      	cmp	r0, r8
    265c:	d005      	beq.n	266a <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    265e:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    2662:	439a      	bics	r2, r3
    2664:	f104 0401 	add.w	r4, r4, #1
    2668:	d1db      	bne.n	2622 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    266a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    266e:	bf00      	nop
    2670:	200002f8 	.word	0x200002f8
    2674:	0bad0002 	.word	0x0bad0002
    2678:	0bad0000 	.word	0x0bad0000

0000267c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    267c:	4b0e      	ldr	r3, [pc, #56]	; (26b8 <z_sys_init_run_level+0x3c>)
{
    267e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    2680:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    2684:	3001      	adds	r0, #1
    2686:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    268a:	42a6      	cmp	r6, r4
    268c:	d800      	bhi.n	2690 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    268e:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    2690:	e9d4 3500 	ldrd	r3, r5, [r4]
    2694:	4628      	mov	r0, r5
    2696:	4798      	blx	r3
		if (dev != NULL) {
    2698:	b165      	cbz	r5, 26b4 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    269a:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    269c:	b130      	cbz	r0, 26ac <z_sys_init_run_level+0x30>
				if (rc < 0) {
    269e:	2800      	cmp	r0, #0
    26a0:	bfb8      	it	lt
    26a2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    26a4:	28ff      	cmp	r0, #255	; 0xff
    26a6:	bfa8      	it	ge
    26a8:	20ff      	movge	r0, #255	; 0xff
    26aa:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    26ac:	785a      	ldrb	r2, [r3, #1]
    26ae:	f042 0201 	orr.w	r2, r2, #1
    26b2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    26b4:	3408      	adds	r4, #8
    26b6:	e7e8      	b.n	268a <z_sys_init_run_level+0xe>
    26b8:	00004184 	.word	0x00004184

000026bc <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    26bc:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (*name == 0)) {
    26be:	4605      	mov	r5, r0
    26c0:	b910      	cbnz	r0, 26c8 <z_impl_device_get_binding+0xc>
		return NULL;
    26c2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    26c4:	4620      	mov	r0, r4
    26c6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (*name == 0)) {
    26c8:	7803      	ldrb	r3, [r0, #0]
    26ca:	2b00      	cmp	r3, #0
    26cc:	d0f9      	beq.n	26c2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    26ce:	4c0e      	ldr	r4, [pc, #56]	; (2708 <z_impl_device_get_binding+0x4c>)
    26d0:	4e0e      	ldr	r6, [pc, #56]	; (270c <z_impl_device_get_binding+0x50>)
    26d2:	42b4      	cmp	r4, r6
    26d4:	d108      	bne.n	26e8 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    26d6:	4c0c      	ldr	r4, [pc, #48]	; (2708 <z_impl_device_get_binding+0x4c>)
    26d8:	42b4      	cmp	r4, r6
    26da:	d0f2      	beq.n	26c2 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    26dc:	4620      	mov	r0, r4
    26de:	f001 fa6f 	bl	3bc0 <z_device_ready>
    26e2:	b950      	cbnz	r0, 26fa <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    26e4:	3418      	adds	r4, #24
    26e6:	e7f7      	b.n	26d8 <z_impl_device_get_binding+0x1c>
		if (z_device_ready(dev) && (dev->name == name)) {
    26e8:	4620      	mov	r0, r4
    26ea:	f001 fa69 	bl	3bc0 <z_device_ready>
    26ee:	b110      	cbz	r0, 26f6 <z_impl_device_get_binding+0x3a>
    26f0:	6823      	ldr	r3, [r4, #0]
    26f2:	42ab      	cmp	r3, r5
    26f4:	d0e6      	beq.n	26c4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    26f6:	3418      	adds	r4, #24
    26f8:	e7eb      	b.n	26d2 <z_impl_device_get_binding+0x16>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    26fa:	4628      	mov	r0, r5
    26fc:	6821      	ldr	r1, [r4, #0]
    26fe:	f001 f840 	bl	3782 <strcmp>
    2702:	2800      	cmp	r0, #0
    2704:	d1ee      	bne.n	26e4 <z_impl_device_get_binding+0x28>
    2706:	e7dd      	b.n	26c4 <z_impl_device_get_binding+0x8>
    2708:	2000002c 	.word	0x2000002c
    270c:	200000a4 	.word	0x200000a4

00002710 <idle>:
#endif	/* CONFIG_PM */
	z_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    2710:	b508      	push	{r3, lr}
	_kernel.idle = ticks;
    2712:	4c09      	ldr	r4, [pc, #36]	; (2738 <idle+0x28>)
	__asm__ volatile(
    2714:	f04f 0220 	mov.w	r2, #32
    2718:	f3ef 8311 	mrs	r3, BASEPRI
    271c:	f382 8811 	msr	BASEPRI, r2
    2720:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
    2724:	f001 fb45 	bl	3db2 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    2728:	6220      	str	r0, [r4, #32]
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    272a:	f7fe fbeb 	bl	f04 <pm_system_suspend>
    272e:	2800      	cmp	r0, #0
    2730:	d1f0      	bne.n	2714 <idle+0x4>
	arch_cpu_idle();
    2732:	f7fe ff7f 	bl	1634 <arch_cpu_idle>
}
    2736:	e7ed      	b.n	2714 <idle+0x4>
    2738:	20000358 	.word	0x20000358

0000273c <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    273c:	4802      	ldr	r0, [pc, #8]	; (2748 <z_bss_zero+0xc>)
    273e:	4a03      	ldr	r2, [pc, #12]	; (274c <z_bss_zero+0x10>)
    2740:	2100      	movs	r1, #0
    2742:	1a12      	subs	r2, r2, r0
    2744:	f001 b854 	b.w	37f0 <memset>
    2748:	200000a8 	.word	0x200000a8
    274c:	2000039c 	.word	0x2000039c

00002750 <bg_thread_main>:
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    2750:	2201      	movs	r2, #1
{
    2752:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    2754:	4b09      	ldr	r3, [pc, #36]	; (277c <bg_thread_main+0x2c>)

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    2756:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    2758:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    275a:	f7ff ff8f 	bl	267c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    275e:	f000 fc69 	bl	3034 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    2762:	2003      	movs	r0, #3
    2764:	f7ff ff8a 	bl	267c <z_sys_init_run_level>

	z_init_static_threads();
    2768:	f000 fc08 	bl	2f7c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
    276c:	f7fd fe80 	bl	470 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    2770:	4a03      	ldr	r2, [pc, #12]	; (2780 <bg_thread_main+0x30>)
    2772:	7b13      	ldrb	r3, [r2, #12]
    2774:	f023 0301 	bic.w	r3, r3, #1
    2778:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    277a:	bd08      	pop	{r3, pc}
    277c:	2000039a 	.word	0x2000039a
    2780:	20000128 	.word	0x20000128

00002784 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
    2784:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
		(uint32_t)(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[0])) +
    2788:	4b35      	ldr	r3, [pc, #212]	; (2860 <z_cstart+0xdc>)
    278a:	b0a7      	sub	sp, #156	; 0x9c
	uint32_t msp =
    278c:	f503 6900 	add.w	r9, r3, #2048	; 0x800
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    2790:	f389 8808 	msr	MSP, r9
  __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
    2794:	f383 880a 	msr	MSPLIM, r3
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2798:	2400      	movs	r4, #0
    279a:	23e0      	movs	r3, #224	; 0xe0
    279c:	4d31      	ldr	r5, [pc, #196]	; (2864 <z_cstart+0xe0>)
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    279e:	f04f 0b01 	mov.w	fp, #1
    27a2:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    27a6:	77ec      	strb	r4, [r5, #31]
    27a8:	762c      	strb	r4, [r5, #24]
    27aa:	766c      	strb	r4, [r5, #25]
    27ac:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    27ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	_kernel.ready_q.cache = &z_main_thread;
    27b0:	4e2d      	ldr	r6, [pc, #180]	; (2868 <z_cstart+0xe4>)
    27b2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    27b6:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    27b8:	f7ff f880 	bl	18bc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    27bc:	f7fe ff34 	bl	1628 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    27c0:	f04f 33ff 	mov.w	r3, #4294967295
    27c4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    27c6:	62eb      	str	r3, [r5, #44]	; 0x2c
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    27c8:	f240 1301 	movw	r3, #257	; 0x101
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    27cc:	4d27      	ldr	r5, [pc, #156]	; (286c <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
    27ce:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    27d2:	ab06      	add	r3, sp, #24
    27d4:	60ab      	str	r3, [r5, #8]
	dummy_thread->stack_info.size = 0U;
    27d6:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    27da:	f001 f9f0 	bl	3bbe <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    27de:	4620      	mov	r0, r4
    27e0:	f7ff ff4c 	bl	267c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    27e4:	2001      	movs	r0, #1
    27e6:	f7ff ff49 	bl	267c <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    27ea:	f8df a084 	ldr.w	sl, [pc, #132]	; 2870 <z_cstart+0xec>
	z_sched_init();
    27ee:	f000 fa43 	bl	2c78 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    27f2:	4b20      	ldr	r3, [pc, #128]	; (2874 <z_cstart+0xf0>)
	_kernel.ready_q.cache = &z_main_thread;
    27f4:	626e      	str	r6, [r5, #36]	; 0x24
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    27f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    27fa:	491f      	ldr	r1, [pc, #124]	; (2878 <z_cstart+0xf4>)
    27fc:	9305      	str	r3, [sp, #20]
    27fe:	4630      	mov	r0, r6
    2800:	4653      	mov	r3, sl
    2802:	e9cd 4b03 	strd	r4, fp, [sp, #12]
    2806:	e9cd 4401 	strd	r4, r4, [sp, #4]
    280a:	9400      	str	r4, [sp, #0]
    280c:	f000 fb86 	bl	2f1c <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2810:	7b73      	ldrb	r3, [r6, #13]
    2812:	4680      	mov	r8, r0
    2814:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
    2818:	4630      	mov	r0, r6
    281a:	7373      	strb	r3, [r6, #13]
    281c:	f001 fa5f 	bl	3cde <z_ready_thread>
	z_setup_new_thread(thread, stack,
    2820:	230f      	movs	r3, #15
    2822:	4f16      	ldr	r7, [pc, #88]	; (287c <z_cstart+0xf8>)
    2824:	f44f 72a0 	mov.w	r2, #320	; 0x140
    2828:	e9cd 4302 	strd	r4, r3, [sp, #8]
    282c:	4914      	ldr	r1, [pc, #80]	; (2880 <z_cstart+0xfc>)
    282e:	4b15      	ldr	r3, [pc, #84]	; (2884 <z_cstart+0x100>)
    2830:	4638      	mov	r0, r7
    2832:	e9cd b404 	strd	fp, r4, [sp, #16]
    2836:	e9cd 5400 	strd	r5, r4, [sp]
    283a:	f000 fb6f 	bl	2f1c <z_setup_new_thread>
    283e:	7b7b      	ldrb	r3, [r7, #13]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    2840:	4652      	mov	r2, sl
    2842:	f023 0304 	bic.w	r3, r3, #4
    2846:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    2848:	f105 0318 	add.w	r3, r5, #24
    284c:	4641      	mov	r1, r8
    284e:	4630      	mov	r0, r6
	list->tail = (sys_dnode_t *)list;
    2850:	e9c5 3306 	strd	r3, r3, [r5, #24]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    2854:	60ef      	str	r7, [r5, #12]
		_kernel.cpus[i].id = i;
    2856:	752c      	strb	r4, [r5, #20]
		_kernel.cpus[i].irq_stack =
    2858:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    285c:	f7fe feca 	bl	15f4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    2860:	200008e0 	.word	0x200008e0
    2864:	e000ed00 	.word	0xe000ed00
    2868:	20000128 	.word	0x20000128
    286c:	20000358 	.word	0x20000358
    2870:	00002751 	.word	0x00002751
    2874:	000041f1 	.word	0x000041f1
    2878:	200003a0 	.word	0x200003a0
    287c:	200000a8 	.word	0x200000a8
    2880:	200007a0 	.word	0x200007a0
    2884:	00002711 	.word	0x00002711

00002888 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    2888:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    288a:	4c08      	ldr	r4, [pc, #32]	; (28ac <z_reset_time_slice+0x24>)
    288c:	6823      	ldr	r3, [r4, #0]
    288e:	b15b      	cbz	r3, 28a8 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    2890:	f7fe fdf0 	bl	1474 <z_clock_elapsed>
    2894:	4603      	mov	r3, r0
    2896:	6820      	ldr	r0, [r4, #0]
    2898:	4a05      	ldr	r2, [pc, #20]	; (28b0 <z_reset_time_slice+0x28>)
    289a:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
    289c:	2100      	movs	r1, #0
	}
}
    289e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
    28a2:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    28a4:	f001 ba95 	b.w	3dd2 <z_set_timeout_expiry>
}
    28a8:	bd10      	pop	{r4, pc}
    28aa:	bf00      	nop
    28ac:	20000390 	.word	0x20000390
    28b0:	20000358 	.word	0x20000358

000028b4 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    28b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    28b6:	4604      	mov	r4, r0
    28b8:	460d      	mov	r5, r1
    28ba:	f04f 0320 	mov.w	r3, #32
    28be:	f3ef 8611 	mrs	r6, BASEPRI
    28c2:	f383 8811 	msr	BASEPRI, r3
    28c6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    28ca:	2100      	movs	r1, #0
		} else {
			return t * (to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    28cc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    28d0:	f240 30e7 	movw	r0, #999	; 0x3e7
    28d4:	4b0c      	ldr	r3, [pc, #48]	; (2908 <k_sched_time_slice_set+0x54>)
    28d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    28da:	6119      	str	r1, [r3, #16]
    28dc:	2300      	movs	r3, #0
    28de:	fbe4 0107 	umlal	r0, r1, r4, r7
    28e2:	f7fd fc37 	bl	154 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    28e6:	2c00      	cmp	r4, #0
    28e8:	4b08      	ldr	r3, [pc, #32]	; (290c <k_sched_time_slice_set+0x58>)
    28ea:	dc09      	bgt.n	2900 <k_sched_time_slice_set+0x4c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    28ec:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    28ee:	4b08      	ldr	r3, [pc, #32]	; (2910 <k_sched_time_slice_set+0x5c>)
    28f0:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    28f2:	f7ff ffc9 	bl	2888 <z_reset_time_slice>
	__asm__ volatile(
    28f6:	f386 8811 	msr	BASEPRI, r6
    28fa:	f3bf 8f6f 	isb	sy
	}
}
    28fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    2900:	2802      	cmp	r0, #2
    2902:	bfb8      	it	lt
    2904:	2002      	movlt	r0, #2
    2906:	e7f1      	b.n	28ec <k_sched_time_slice_set+0x38>
    2908:	20000358 	.word	0x20000358
    290c:	20000390 	.word	0x20000390
    2910:	2000038c 	.word	0x2000038c

00002914 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    2914:	b949      	cbnz	r1, 292a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2916:	f3ef 8005 	mrs	r0, IPSR
    291a:	b930      	cbnz	r0, 292a <z_reschedule+0x16>
	return true;
#else
	struct k_thread *new_thread;

	/* Check if the next ready thread is the same as the current thread */
	new_thread = _kernel.ready_q.cache;
    291c:	4b05      	ldr	r3, [pc, #20]	; (2934 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    291e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2920:	689b      	ldr	r3, [r3, #8]
    2922:	429a      	cmp	r2, r3
    2924:	d001      	beq.n	292a <z_reschedule+0x16>
	ret = arch_swap(key);
    2926:	f7fe bdbf 	b.w	14a8 <arch_swap>
    292a:	f381 8811 	msr	BASEPRI, r1
    292e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    2932:	4770      	bx	lr
    2934:	20000358 	.word	0x20000358

00002938 <k_sched_lock>:
	__asm__ volatile(
    2938:	f04f 0320 	mov.w	r3, #32
    293c:	f3ef 8111 	mrs	r1, BASEPRI
    2940:	f383 8811 	msr	BASEPRI, r3
    2944:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
    2948:	4b04      	ldr	r3, [pc, #16]	; (295c <k_sched_lock+0x24>)
    294a:	689a      	ldr	r2, [r3, #8]
    294c:	7bd3      	ldrb	r3, [r2, #15]
    294e:	3b01      	subs	r3, #1
    2950:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    2952:	f381 8811 	msr	BASEPRI, r1
    2956:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
    295a:	4770      	bx	lr
    295c:	20000358 	.word	0x20000358

00002960 <update_cache>:
{
    2960:	b538      	push	{r3, r4, r5, lr}
	thread = _priq_run_best(&_kernel.ready_q.runq);
    2962:	4d0d      	ldr	r5, [pc, #52]	; (2998 <update_cache+0x38>)
{
    2964:	4602      	mov	r2, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    2966:	f105 0028 	add.w	r0, r5, #40	; 0x28
    296a:	f001 f988 	bl	3c7e <z_priq_dumb_best>
	return thread ? thread : _current_cpu->idle_thread;
    296e:	4604      	mov	r4, r0
    2970:	b900      	cbnz	r0, 2974 <update_cache+0x14>
    2972:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    2974:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    2976:	b94a      	cbnz	r2, 298c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
    2978:	7b5a      	ldrb	r2, [r3, #13]
    297a:	06d2      	lsls	r2, r2, #27
    297c:	d106      	bne.n	298c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    297e:	69a2      	ldr	r2, [r4, #24]
    2980:	b922      	cbnz	r2, 298c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(thread)) {
    2982:	89da      	ldrh	r2, [r3, #14]
    2984:	2a7f      	cmp	r2, #127	; 0x7f
    2986:	d901      	bls.n	298c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
    2988:	626b      	str	r3, [r5, #36]	; 0x24
}
    298a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    298c:	429c      	cmp	r4, r3
    298e:	d001      	beq.n	2994 <update_cache+0x34>
			z_reset_time_slice();
    2990:	f7ff ff7a 	bl	2888 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    2994:	626c      	str	r4, [r5, #36]	; 0x24
}
    2996:	e7f8      	b.n	298a <update_cache+0x2a>
    2998:	20000358 	.word	0x20000358

0000299c <unready_thread>:
{
    299c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    299e:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    29a2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    29a4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    29a6:	7b43      	ldrb	r3, [r0, #13]
    29a8:	da04      	bge.n	29b4 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    29aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    29ae:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    29b0:	f001 f93d 	bl	3c2e <sys_dlist_remove>
	update_cache(thread == _current);
    29b4:	4b04      	ldr	r3, [pc, #16]	; (29c8 <unready_thread+0x2c>)
    29b6:	6898      	ldr	r0, [r3, #8]
    29b8:	1a43      	subs	r3, r0, r1
    29ba:	4258      	negs	r0, r3
    29bc:	4158      	adcs	r0, r3
}
    29be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    29c2:	f7ff bfcd 	b.w	2960 <update_cache>
    29c6:	bf00      	nop
    29c8:	20000358 	.word	0x20000358

000029cc <pend>:
{
    29cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29d0:	4606      	mov	r6, r0
    29d2:	4615      	mov	r5, r2
    29d4:	461c      	mov	r4, r3
	__asm__ volatile(
    29d6:	f04f 0320 	mov.w	r3, #32
    29da:	f3ef 8711 	mrs	r7, BASEPRI
    29de:	f383 8811 	msr	BASEPRI, r3
    29e2:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    29e6:	f001 f950 	bl	3c8a <add_to_waitq_locked>
	__asm__ volatile(
    29ea:	f387 8811 	msr	BASEPRI, r7
    29ee:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    29f2:	f1b4 3fff 	cmp.w	r4, #4294967295
    29f6:	bf08      	it	eq
    29f8:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    29fc:	d008      	beq.n	2a10 <pend+0x44>

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, k_timeout_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    29fe:	462a      	mov	r2, r5
    2a00:	4623      	mov	r3, r4
    2a02:	f106 0018 	add.w	r0, r6, #24
    2a06:	4903      	ldr	r1, [pc, #12]	; (2a14 <pend+0x48>)
}
    2a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a0c:	f000 bb84 	b.w	3118 <z_add_timeout>
    2a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a14:	00003cff 	.word	0x00003cff

00002a18 <z_pend_curr>:
{
    2a18:	b510      	push	{r4, lr}
    2a1a:	460c      	mov	r4, r1
	pending_current = _current;
    2a1c:	4b06      	ldr	r3, [pc, #24]	; (2a38 <z_pend_curr+0x20>)
{
    2a1e:	4611      	mov	r1, r2
	pending_current = _current;
    2a20:	6898      	ldr	r0, [r3, #8]
    2a22:	4b06      	ldr	r3, [pc, #24]	; (2a3c <z_pend_curr+0x24>)
    2a24:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    2a26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    2a2a:	f7ff ffcf 	bl	29cc <pend>
    2a2e:	4620      	mov	r0, r4
}
    2a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2a34:	f7fe bd38 	b.w	14a8 <arch_swap>
    2a38:	20000358 	.word	0x20000358
    2a3c:	20000388 	.word	0x20000388

00002a40 <z_impl_k_thread_suspend>:
{
    2a40:	b570      	push	{r4, r5, r6, lr}
    2a42:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    2a44:	3018      	adds	r0, #24
    2a46:	f001 f99e 	bl	3d86 <z_abort_timeout>
	__asm__ volatile(
    2a4a:	f04f 0320 	mov.w	r3, #32
    2a4e:	f3ef 8611 	mrs	r6, BASEPRI
    2a52:	f383 8811 	msr	BASEPRI, r3
    2a56:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    2a5a:	f994 200d 	ldrsb.w	r2, [r4, #13]
    2a5e:	7b63      	ldrb	r3, [r4, #13]
    2a60:	2a00      	cmp	r2, #0
    2a62:	da05      	bge.n	2a70 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2a64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	sys_dlist_remove(&thread->base.qnode_dlist);
    2a68:	4620      	mov	r0, r4
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2a6a:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    2a6c:	f001 f8df 	bl	3c2e <sys_dlist_remove>
		update_cache(thread == _current);
    2a70:	4d0b      	ldr	r5, [pc, #44]	; (2aa0 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2a72:	7b63      	ldrb	r3, [r4, #13]
    2a74:	68a8      	ldr	r0, [r5, #8]
    2a76:	f043 0310 	orr.w	r3, r3, #16
    2a7a:	7363      	strb	r3, [r4, #13]
    2a7c:	1b03      	subs	r3, r0, r4
    2a7e:	4258      	negs	r0, r3
    2a80:	4158      	adcs	r0, r3
    2a82:	f7ff ff6d 	bl	2960 <update_cache>
	__asm__ volatile(
    2a86:	f386 8811 	msr	BASEPRI, r6
    2a8a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    2a8e:	68ab      	ldr	r3, [r5, #8]
    2a90:	42a3      	cmp	r3, r4
    2a92:	d103      	bne.n	2a9c <z_impl_k_thread_suspend+0x5c>
}
    2a94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    2a98:	f001 b8e7 	b.w	3c6a <z_reschedule_unlocked>
}
    2a9c:	bd70      	pop	{r4, r5, r6, pc}
    2a9e:	bf00      	nop
    2aa0:	20000358 	.word	0x20000358

00002aa4 <k_sched_unlock>:
{
    2aa4:	b510      	push	{r4, lr}
	__asm__ volatile(
    2aa6:	f04f 0320 	mov.w	r3, #32
    2aaa:	f3ef 8411 	mrs	r4, BASEPRI
    2aae:	f383 8811 	msr	BASEPRI, r3
    2ab2:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    2ab6:	4b08      	ldr	r3, [pc, #32]	; (2ad8 <k_sched_unlock+0x34>)
		update_cache(0);
    2ab8:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    2aba:	689a      	ldr	r2, [r3, #8]
    2abc:	7bd3      	ldrb	r3, [r2, #15]
    2abe:	3301      	adds	r3, #1
    2ac0:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    2ac2:	f7ff ff4d 	bl	2960 <update_cache>
	__asm__ volatile(
    2ac6:	f384 8811 	msr	BASEPRI, r4
    2aca:	f3bf 8f6f 	isb	sy
}
    2ace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    2ad2:	f001 b8ca 	b.w	3c6a <z_reschedule_unlocked>
    2ad6:	bf00      	nop
    2ad8:	20000358 	.word	0x20000358

00002adc <move_thread_to_end_of_prio_q>:
{
    2adc:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    2ade:	f990 200d 	ldrsb.w	r2, [r0, #13]
{
    2ae2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    2ae4:	2a00      	cmp	r2, #0
	return (thread->base.thread_state & state) != 0U;
    2ae6:	7b43      	ldrb	r3, [r0, #13]
    2ae8:	da04      	bge.n	2af4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2aea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2aee:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    2af0:	f001 f89d 	bl	3c2e <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    2af4:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    2af6:	4a15      	ldr	r2, [pc, #84]	; (2b4c <move_thread_to_end_of_prio_q+0x70>)
    2af8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2afc:	734b      	strb	r3, [r1, #13]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2afe:	f102 0528 	add.w	r5, r2, #40	; 0x28
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    2b02:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2b06:	42ab      	cmp	r3, r5
    2b08:	d01b      	beq.n	2b42 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2b0a:	b1d3      	cbz	r3, 2b42 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    2b0c:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    2b10:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    2b14:	4286      	cmp	r6, r0
    2b16:	d00f      	beq.n	2b38 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    2b18:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    2b1a:	2800      	cmp	r0, #0
    2b1c:	dd0c      	ble.n	2b38 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    2b1e:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    2b20:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    2b24:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    2b26:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    2b28:	6890      	ldr	r0, [r2, #8]
}
    2b2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    2b2e:	1a43      	subs	r3, r0, r1
    2b30:	4258      	negs	r0, r3
    2b32:	4158      	adcs	r0, r3
    2b34:	f7ff bf14 	b.w	2960 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    2b38:	42a3      	cmp	r3, r4
    2b3a:	d002      	beq.n	2b42 <move_thread_to_end_of_prio_q+0x66>
    2b3c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2b3e:	2b00      	cmp	r3, #0
    2b40:	d1e6      	bne.n	2b10 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    2b42:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    2b46:	6021      	str	r1, [r4, #0]
	list->tail = node;
    2b48:	62d1      	str	r1, [r2, #44]	; 0x2c
}
    2b4a:	e7ed      	b.n	2b28 <move_thread_to_end_of_prio_q+0x4c>
    2b4c:	20000358 	.word	0x20000358

00002b50 <z_time_slice>:
{
    2b50:	4601      	mov	r1, r0
    2b52:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    2b54:	f04f 0320 	mov.w	r3, #32
    2b58:	f3ef 8411 	mrs	r4, BASEPRI
    2b5c:	f383 8811 	msr	BASEPRI, r3
    2b60:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    2b64:	4b15      	ldr	r3, [pc, #84]	; (2bbc <z_time_slice+0x6c>)
    2b66:	4a16      	ldr	r2, [pc, #88]	; (2bc0 <z_time_slice+0x70>)
    2b68:	6898      	ldr	r0, [r3, #8]
    2b6a:	6815      	ldr	r5, [r2, #0]
    2b6c:	42a8      	cmp	r0, r5
    2b6e:	d106      	bne.n	2b7e <z_time_slice+0x2e>
			z_reset_time_slice();
    2b70:	f7ff fe8a 	bl	2888 <z_reset_time_slice>
	__asm__ volatile(
    2b74:	f384 8811 	msr	BASEPRI, r4
    2b78:	f3bf 8f6f 	isb	sy
}
    2b7c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    2b7e:	2500      	movs	r5, #0
    2b80:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
    2b82:	4a10      	ldr	r2, [pc, #64]	; (2bc4 <z_time_slice+0x74>)
    2b84:	6812      	ldr	r2, [r2, #0]
    2b86:	b1ba      	cbz	r2, 2bb8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    2b88:	89c2      	ldrh	r2, [r0, #14]
    2b8a:	2a7f      	cmp	r2, #127	; 0x7f
    2b8c:	d814      	bhi.n	2bb8 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
    2b8e:	7b42      	ldrb	r2, [r0, #13]
    2b90:	06d2      	lsls	r2, r2, #27
    2b92:	d111      	bne.n	2bb8 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    2b94:	4a0c      	ldr	r2, [pc, #48]	; (2bc8 <z_time_slice+0x78>)
    2b96:	f990 500e 	ldrsb.w	r5, [r0, #14]
    2b9a:	6812      	ldr	r2, [r2, #0]
    2b9c:	4295      	cmp	r5, r2
    2b9e:	db0b      	blt.n	2bb8 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
    2ba0:	4a0a      	ldr	r2, [pc, #40]	; (2bcc <z_time_slice+0x7c>)
    2ba2:	4290      	cmp	r0, r2
    2ba4:	d008      	beq.n	2bb8 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
    2ba6:	691a      	ldr	r2, [r3, #16]
    2ba8:	428a      	cmp	r2, r1
    2baa:	dc02      	bgt.n	2bb2 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
    2bac:	f7ff ff96 	bl	2adc <move_thread_to_end_of_prio_q>
    2bb0:	e7de      	b.n	2b70 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
    2bb2:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
    2bb4:	611a      	str	r2, [r3, #16]
    2bb6:	e7dd      	b.n	2b74 <z_time_slice+0x24>
    2bb8:	2200      	movs	r2, #0
    2bba:	e7fb      	b.n	2bb4 <z_time_slice+0x64>
    2bbc:	20000358 	.word	0x20000358
    2bc0:	20000388 	.word	0x20000388
    2bc4:	20000390 	.word	0x20000390
    2bc8:	2000038c 	.word	0x2000038c
    2bcc:	200000a8 	.word	0x200000a8

00002bd0 <ready_thread>:
{
    2bd0:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    2bd2:	f990 200d 	ldrsb.w	r2, [r0, #13]
    2bd6:	7b43      	ldrb	r3, [r0, #13]
    2bd8:	2a00      	cmp	r2, #0
    2bda:	db2a      	blt.n	2c32 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    2bdc:	06da      	lsls	r2, r3, #27
    2bde:	d128      	bne.n	2c32 <ready_thread+0x62>
    2be0:	6982      	ldr	r2, [r0, #24]
    2be2:	bb32      	cbnz	r2, 2c32 <ready_thread+0x62>
	return list->head == list;
    2be4:	4a14      	ldr	r2, [pc, #80]	; (2c38 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    2be6:	f063 037f 	orn	r3, r3, #127	; 0x7f
    2bea:	7343      	strb	r3, [r0, #13]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2bec:	f102 0528 	add.w	r5, r2, #40	; 0x28
	return (node == list->tail) ? NULL : node->next;
    2bf0:	e9d2 340a 	ldrd	r3, r4, [r2, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2bf4:	42ab      	cmp	r3, r5
    2bf6:	d017      	beq.n	2c28 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2bf8:	b1b3      	cbz	r3, 2c28 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    2bfa:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    2bfe:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    2c02:	428e      	cmp	r6, r1
    2c04:	d00b      	beq.n	2c1e <ready_thread+0x4e>
		return b2 - b1;
    2c06:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    2c08:	2900      	cmp	r1, #0
    2c0a:	dd08      	ble.n	2c1e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    2c0c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    2c0e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    2c12:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    2c14:	6058      	str	r0, [r3, #4]
		update_cache(0);
    2c16:	2000      	movs	r0, #0
}
    2c18:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    2c1a:	f7ff bea1 	b.w	2960 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    2c1e:	42a3      	cmp	r3, r4
    2c20:	d002      	beq.n	2c28 <ready_thread+0x58>
    2c22:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2c24:	2b00      	cmp	r3, #0
    2c26:	d1ea      	bne.n	2bfe <ready_thread+0x2e>
	node->prev = tail;
    2c28:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    2c2c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    2c2e:	62d0      	str	r0, [r2, #44]	; 0x2c
}
    2c30:	e7f1      	b.n	2c16 <ready_thread+0x46>
}
    2c32:	bc70      	pop	{r4, r5, r6}
    2c34:	4770      	bx	lr
    2c36:	bf00      	nop
    2c38:	20000358 	.word	0x20000358

00002c3c <z_sched_start>:
{
    2c3c:	b510      	push	{r4, lr}
	__asm__ volatile(
    2c3e:	f04f 0220 	mov.w	r2, #32
    2c42:	f3ef 8411 	mrs	r4, BASEPRI
    2c46:	f382 8811 	msr	BASEPRI, r2
    2c4a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    2c4e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    2c50:	0751      	lsls	r1, r2, #29
    2c52:	d404      	bmi.n	2c5e <z_sched_start+0x22>
	__asm__ volatile(
    2c54:	f384 8811 	msr	BASEPRI, r4
    2c58:	f3bf 8f6f 	isb	sy
}
    2c5c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    2c5e:	f022 0204 	bic.w	r2, r2, #4
    2c62:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    2c64:	f7ff ffb4 	bl	2bd0 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    2c68:	4621      	mov	r1, r4
}
    2c6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    2c6e:	4801      	ldr	r0, [pc, #4]	; (2c74 <z_sched_start+0x38>)
    2c70:	f7ff be50 	b.w	2914 <z_reschedule>
    2c74:	2000039b 	.word	0x2000039b

00002c78 <z_sched_init>:
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    2c78:	2100      	movs	r1, #0
	list->head = (sys_dnode_t *)list;
    2c7a:	4b04      	ldr	r3, [pc, #16]	; (2c8c <z_sched_init+0x14>)
    2c7c:	4608      	mov	r0, r1
    2c7e:	f103 0228 	add.w	r2, r3, #40	; 0x28
	list->tail = (sys_dnode_t *)list;
    2c82:	e9c3 220a 	strd	r2, r2, [r3, #40]	; 0x28
    2c86:	f7ff be15 	b.w	28b4 <k_sched_time_slice_set>
    2c8a:	bf00      	nop
    2c8c:	20000358 	.word	0x20000358

00002c90 <z_impl_k_yield>:

void z_impl_k_yield(void)
{
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
    2c90:	4925      	ldr	r1, [pc, #148]	; (2d28 <z_impl_k_yield+0x98>)
{
    2c92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
    2c94:	688a      	ldr	r2, [r1, #8]
    2c96:	4b25      	ldr	r3, [pc, #148]	; (2d2c <z_impl_k_yield+0x9c>)
    2c98:	429a      	cmp	r2, r3
    2c9a:	d03b      	beq.n	2d14 <z_impl_k_yield+0x84>
	__asm__ volatile(
    2c9c:	f04f 0320 	mov.w	r3, #32
    2ca0:	f3ef 8511 	mrs	r5, BASEPRI
    2ca4:	f383 8811 	msr	BASEPRI, r3
    2ca8:	f3bf 8f6f 	isb	sy
		k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

		if (!IS_ENABLED(CONFIG_SMP) ||
			z_is_thread_queued(_current)) {
			dequeue_thread(&_kernel.ready_q.runq,
    2cac:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2cae:	7b43      	ldrb	r3, [r0, #13]
    2cb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2cb4:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    2cb6:	f000 ffba 	bl	3c2e <sys_dlist_remove>
	return list->head == list;
    2cba:	4608      	mov	r0, r1
					_current);
		}
		queue_thread(&_kernel.ready_q.runq, _current);
    2cbc:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    2cbe:	7b5a      	ldrb	r2, [r3, #13]
    2cc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
    2cc4:	735a      	strb	r2, [r3, #13]
    2cc6:	f850 2f28 	ldr.w	r2, [r0, #40]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2cca:	4282      	cmp	r2, r0
    2ccc:	d01c      	beq.n	2d08 <z_impl_k_yield+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2cce:	b1da      	cbz	r2, 2d08 <z_impl_k_yield+0x78>
	return (node == list->tail) ? NULL : node->next;
    2cd0:	6acf      	ldr	r7, [r1, #44]	; 0x2c
	int32_t b1 = thread_1->base.prio;
    2cd2:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    2cd6:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    2cda:	42a6      	cmp	r6, r4
    2cdc:	d00f      	beq.n	2cfe <z_impl_k_yield+0x6e>
		return b2 - b1;
    2cde:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    2ce0:	2c00      	cmp	r4, #0
    2ce2:	dd0c      	ble.n	2cfe <z_impl_k_yield+0x6e>
	sys_dnode_t *const prev = successor->prev;
    2ce4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    2ce6:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    2cea:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    2cec:	6053      	str	r3, [r2, #4]
		update_cache(1);
    2cee:	2001      	movs	r0, #1
    2cf0:	f7ff fe36 	bl	2960 <update_cache>
    2cf4:	4628      	mov	r0, r5
		z_swap(&sched_spinlock, key);
	} else {
		z_swap_unlocked();
	}
}
    2cf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2cfa:	f7fe bbd5 	b.w	14a8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    2cfe:	42ba      	cmp	r2, r7
    2d00:	d002      	beq.n	2d08 <z_impl_k_yield+0x78>
    2d02:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    2d04:	2a00      	cmp	r2, #0
    2d06:	d1e6      	bne.n	2cd6 <z_impl_k_yield+0x46>
	sys_dnode_t *const tail = list->tail;
    2d08:	6aca      	ldr	r2, [r1, #44]	; 0x2c
	node->prev = tail;
    2d0a:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    2d0e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    2d10:	62cb      	str	r3, [r1, #44]	; 0x2c
}
    2d12:	e7ec      	b.n	2cee <z_impl_k_yield+0x5e>
    2d14:	f04f 0320 	mov.w	r3, #32
    2d18:	f3ef 8011 	mrs	r0, BASEPRI
    2d1c:	f383 8811 	msr	BASEPRI, r3
    2d20:	f3bf 8f6f 	isb	sy
    2d24:	e7e7      	b.n	2cf6 <z_impl_k_yield+0x66>
    2d26:	bf00      	nop
    2d28:	20000358 	.word	0x20000358
    2d2c:	200000a8 	.word	0x200000a8

00002d30 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    2d30:	ea50 0301 	orrs.w	r3, r0, r1
{
    2d34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d38:	4605      	mov	r5, r0
    2d3a:	460e      	mov	r6, r1
	if (ticks == 0) {
    2d3c:	d104      	bne.n	2d48 <z_tick_sleep+0x18>
	z_impl_k_yield();
    2d3e:	f7ff ffa7 	bl	2c90 <z_impl_k_yield>
		k_yield();
		return 0;
    2d42:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    2d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
    2d48:	f001 f85d 	bl	3e06 <z_tick_get_32>
    2d4c:	4604      	mov	r4, r0
    2d4e:	f04f 0320 	mov.w	r3, #32
    2d52:	f3ef 8811 	mrs	r8, BASEPRI
    2d56:	f383 8811 	msr	BASEPRI, r3
    2d5a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    2d5e:	4f0f      	ldr	r7, [pc, #60]	; (2d9c <z_tick_sleep+0x6c>)
    2d60:	4b0f      	ldr	r3, [pc, #60]	; (2da0 <z_tick_sleep+0x70>)
    2d62:	68b8      	ldr	r0, [r7, #8]
    2d64:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    2d66:	f7ff fe19 	bl	299c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    2d6a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2d6c:	490d      	ldr	r1, [pc, #52]	; (2da4 <z_tick_sleep+0x74>)
    2d6e:	462a      	mov	r2, r5
    2d70:	4633      	mov	r3, r6
    2d72:	3018      	adds	r0, #24
    2d74:	f000 f9d0 	bl	3118 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    2d78:	68ba      	ldr	r2, [r7, #8]
    2d7a:	4640      	mov	r0, r8
	thread->base.thread_state |= _THREAD_SUSPENDED;
    2d7c:	7b53      	ldrb	r3, [r2, #13]
    2d7e:	f043 0310 	orr.w	r3, r3, #16
    2d82:	7353      	strb	r3, [r2, #13]
    2d84:	f7fe fb90 	bl	14a8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    2d88:	f001 f83d 	bl	3e06 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
    2d8c:	1962      	adds	r2, r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
    2d8e:	1a10      	subs	r0, r2, r0
    2d90:	eb63 0303 	sbc.w	r3, r3, r3
    2d94:	2b00      	cmp	r3, #0
    2d96:	bfb8      	it	lt
    2d98:	2000      	movlt	r0, #0
    2d9a:	e7d3      	b.n	2d44 <z_tick_sleep+0x14>
    2d9c:	20000358 	.word	0x20000358
    2da0:	20000388 	.word	0x20000388
    2da4:	00003cff 	.word	0x00003cff

00002da8 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2da8:	f1b1 3fff 	cmp.w	r1, #4294967295
    2dac:	bf08      	it	eq
    2dae:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    2db2:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    2db4:	d106      	bne.n	2dc4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    2db6:	4b08      	ldr	r3, [pc, #32]	; (2dd8 <z_impl_k_sleep+0x30>)
    2db8:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    2dba:	f7ff fe41 	bl	2a40 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    2dbe:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
    2dc2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    2dc4:	f7ff ffb4 	bl	2d30 <z_tick_sleep>
		} else {
			return (t * to_hz + off) / from_hz;
    2dc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    2dcc:	fb80 0303 	smull	r0, r3, r0, r3
    2dd0:	0bc0      	lsrs	r0, r0, #15
    2dd2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
    2dd6:	e7f4      	b.n	2dc2 <z_impl_k_sleep+0x1a>
    2dd8:	20000358 	.word	0x20000358

00002ddc <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    2ddc:	4b01      	ldr	r3, [pc, #4]	; (2de4 <z_impl_k_current_get+0x8>)
    2dde:	6898      	ldr	r0, [r3, #8]
    2de0:	4770      	bx	lr
    2de2:	bf00      	nop
    2de4:	20000358 	.word	0x20000358

00002de8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    2de8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2dec:	4604      	mov	r4, r0
    2dee:	f04f 0320 	mov.w	r3, #32
    2df2:	f3ef 8611 	mrs	r6, BASEPRI
    2df6:	f383 8811 	msr	BASEPRI, r3
    2dfa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (thread->base.thread_state & _THREAD_DEAD) {
    2dfe:	7b43      	ldrb	r3, [r0, #13]
    2e00:	071a      	lsls	r2, r3, #28
    2e02:	d505      	bpl.n	2e10 <z_thread_abort+0x28>
	__asm__ volatile(
    2e04:	f386 8811 	msr	BASEPRI, r6
    2e08:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    2e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    2e10:	f023 0220 	bic.w	r2, r3, #32
    2e14:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    2e18:	09d2      	lsrs	r2, r2, #7
    2e1a:	d120      	bne.n	2e5e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    2e1c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    2e1e:	68a3      	ldr	r3, [r4, #8]
    2e20:	b113      	cbz	r3, 2e28 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    2e22:	4620      	mov	r0, r4
    2e24:	f000 ff0b 	bl	3c3e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    2e28:	f104 0018 	add.w	r0, r4, #24
    2e2c:	f000 ffab 	bl	3d86 <z_abort_timeout>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    2e30:	f04f 0800 	mov.w	r8, #0
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    2e34:	f104 0758 	add.w	r7, r4, #88	; 0x58
	return list->head == list;
    2e38:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    2e3a:	42bd      	cmp	r5, r7
    2e3c:	d000      	beq.n	2e40 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    2e3e:	b9b5      	cbnz	r5, 2e6e <z_thread_abort+0x86>
		update_cache(1);
    2e40:	2001      	movs	r0, #1
    2e42:	f7ff fd8d 	bl	2960 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    2e46:	4b10      	ldr	r3, [pc, #64]	; (2e88 <z_thread_abort+0xa0>)
    2e48:	689b      	ldr	r3, [r3, #8]
    2e4a:	42a3      	cmp	r3, r4
    2e4c:	d1da      	bne.n	2e04 <z_thread_abort+0x1c>
    2e4e:	f3ef 8305 	mrs	r3, IPSR
    2e52:	2b00      	cmp	r3, #0
    2e54:	d1d6      	bne.n	2e04 <z_thread_abort+0x1c>
    2e56:	4630      	mov	r0, r6
    2e58:	f7fe fb26 	bl	14a8 <arch_swap>
	return ret;
    2e5c:	e7d2      	b.n	2e04 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    2e5e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    2e62:	f043 0308 	orr.w	r3, r3, #8
    2e66:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    2e68:	f000 fee1 	bl	3c2e <sys_dlist_remove>
}
    2e6c:	e7d7      	b.n	2e1e <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    2e6e:	4628      	mov	r0, r5
    2e70:	f000 fee5 	bl	3c3e <unpend_thread_no_timeout>
    2e74:	f105 0018 	add.w	r0, r5, #24
    2e78:	f000 ff85 	bl	3d86 <z_abort_timeout>
		ready_thread(thread);
    2e7c:	4628      	mov	r0, r5
    2e7e:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
    2e82:	f7ff fea5 	bl	2bd0 <ready_thread>
    2e86:	e7d7      	b.n	2e38 <z_thread_abort+0x50>
    2e88:	20000358 	.word	0x20000358

00002e8c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    2e8c:	b538      	push	{r3, r4, r5, lr}
    2e8e:	4604      	mov	r4, r0
	__asm__ volatile(
    2e90:	f04f 0320 	mov.w	r3, #32
    2e94:	f3ef 8511 	mrs	r5, BASEPRI
    2e98:	f383 8811 	msr	BASEPRI, r3
    2e9c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
    2ea0:	f000 ff4f 	bl	3d42 <z_unpend_first_thread>

	if (thread != NULL) {
    2ea4:	b148      	cbz	r0, 2eba <z_impl_k_sem_give+0x2e>
    2ea6:	2200      	movs	r2, #0
    2ea8:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    2eaa:	f000 ff18 	bl	3cde <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    2eae:	4629      	mov	r1, r5
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
    2eb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    2eb4:	4804      	ldr	r0, [pc, #16]	; (2ec8 <z_impl_k_sem_give+0x3c>)
    2eb6:	f7ff bd2d 	b.w	2914 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    2eba:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    2ebe:	429a      	cmp	r2, r3
    2ec0:	bf18      	it	ne
    2ec2:	3301      	addne	r3, #1
    2ec4:	60a3      	str	r3, [r4, #8]
}
    2ec6:	e7f2      	b.n	2eae <z_impl_k_sem_give+0x22>
    2ec8:	2000039b 	.word	0x2000039b

00002ecc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    2ecc:	b513      	push	{r0, r1, r4, lr}
    2ece:	f04f 0420 	mov.w	r4, #32
    2ed2:	f3ef 8111 	mrs	r1, BASEPRI
    2ed6:	f384 8811 	msr	BASEPRI, r4
    2eda:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
    2ede:	6884      	ldr	r4, [r0, #8]
    2ee0:	b144      	cbz	r4, 2ef4 <z_impl_k_sem_take+0x28>
		sem->count--;
    2ee2:	3c01      	subs	r4, #1
    2ee4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    2ee6:	f381 8811 	msr	BASEPRI, r1
    2eea:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    2eee:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
    2ef0:	b002      	add	sp, #8
    2ef2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    2ef4:	ea52 0403 	orrs.w	r4, r2, r3
    2ef8:	d106      	bne.n	2f08 <z_impl_k_sem_take+0x3c>
    2efa:	f381 8811 	msr	BASEPRI, r1
    2efe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    2f02:	f06f 000f 	mvn.w	r0, #15
    2f06:	e7f3      	b.n	2ef0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    2f08:	e9cd 2300 	strd	r2, r3, [sp]
    2f0c:	4602      	mov	r2, r0
    2f0e:	4802      	ldr	r0, [pc, #8]	; (2f18 <z_impl_k_sem_take+0x4c>)
    2f10:	f7ff fd82 	bl	2a18 <z_pend_curr>
	return ret;
    2f14:	e7ec      	b.n	2ef0 <z_impl_k_sem_take+0x24>
    2f16:	bf00      	nop
    2f18:	2000039b 	.word	0x2000039b

00002f1c <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    2f1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    2f20:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	sys_dlist_init(&w->waitq);
    2f22:	f100 0558 	add.w	r5, r0, #88	; 0x58
    2f26:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    2f28:	2604      	movs	r6, #4
	list->tail = (sys_dnode_t *)list;
    2f2a:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	thread_base->pended_on = NULL;
    2f2e:	2500      	movs	r5, #0
{
    2f30:	4604      	mov	r4, r0
	thread_base->thread_state = (uint8_t)initial_state;
    2f32:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    2f34:	9e0d      	ldr	r6, [sp, #52]	; 0x34
	node->prev = NULL;
    2f36:	e9c0 5506 	strd	r5, r5, [r0, #24]
    2f3a:	7386      	strb	r6, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2f3c:	1dd6      	adds	r6, r2, #7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    2f40:	f026 0607 	bic.w	r6, r6, #7
	new_thread->stack_info.size = stack_buf_size;
    2f44:	e9c0 1619 	strd	r1, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    2f48:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    2f4a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    2f4c:	66c5      	str	r5, [r0, #108]	; 0x6c
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2f4e:	9202      	str	r2, [sp, #8]
    2f50:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	stack_ptr = (char *)stack + stack_obj_size;
    2f52:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    2f56:	9201      	str	r2, [sp, #4]
    2f58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2f5a:	9200      	str	r2, [sp, #0]
    2f5c:	4642      	mov	r2, r8
    2f5e:	f7fe fb2d 	bl	15bc <arch_new_thread>
	if (!_current) {
    2f62:	4b05      	ldr	r3, [pc, #20]	; (2f78 <z_setup_new_thread+0x5c>)
	new_thread->init_data = NULL;
    2f64:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    2f66:	689b      	ldr	r3, [r3, #8]
    2f68:	b103      	cbz	r3, 2f6c <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
    2f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
}
    2f6c:	4640      	mov	r0, r8
    2f6e:	6723      	str	r3, [r4, #112]	; 0x70
    2f70:	b004      	add	sp, #16
    2f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2f76:	bf00      	nop
    2f78:	20000358 	.word	0x20000358

00002f7c <z_init_static_threads>:
{
    2f7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2f80:	4c29      	ldr	r4, [pc, #164]	; (3028 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    2f82:	4d2a      	ldr	r5, [pc, #168]	; (302c <z_init_static_threads+0xb0>)
{
    2f84:	b087      	sub	sp, #28
    2f86:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    2f88:	42ae      	cmp	r6, r5
    2f8a:	f104 0430 	add.w	r4, r4, #48	; 0x30
    2f8e:	d30f      	bcc.n	2fb0 <z_init_static_threads+0x34>
	k_sched_lock();
    2f90:	f7ff fcd2 	bl	2938 <k_sched_lock>
    2f94:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    2f98:	f240 37e7 	movw	r7, #999	; 0x3e7
	_FOREACH_STATIC_THREAD(thread_data) {
    2f9c:	4c22      	ldr	r4, [pc, #136]	; (3028 <z_init_static_threads+0xac>)
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
    2f9e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 3030 <z_init_static_threads+0xb4>
    2fa2:	42ac      	cmp	r4, r5
    2fa4:	d320      	bcc.n	2fe8 <z_init_static_threads+0x6c>
}
    2fa6:	b007      	add	sp, #28
    2fa8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    2fac:	f7ff bd7a 	b.w	2aa4 <k_sched_unlock>
		z_setup_new_thread(
    2fb0:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2fb4:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    2fb8:	9305      	str	r3, [sp, #20]
    2fba:	f854 3c10 	ldr.w	r3, [r4, #-16]
    2fbe:	9304      	str	r3, [sp, #16]
    2fc0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    2fc4:	9303      	str	r3, [sp, #12]
    2fc6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    2fca:	9302      	str	r3, [sp, #8]
    2fcc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2fd0:	9301      	str	r3, [sp, #4]
    2fd2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2fd6:	9300      	str	r3, [sp, #0]
    2fd8:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    2fdc:	f7ff ff9e 	bl	2f1c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    2fe0:	f854 3c30 	ldr.w	r3, [r4, #-48]
    2fe4:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    2fe6:	e7ce      	b.n	2f86 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    2fe8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2fea:	1c5a      	adds	r2, r3, #1
    2fec:	d00d      	beq.n	300a <z_init_static_threads+0x8e>
    2fee:	2100      	movs	r1, #0
    2ff0:	4638      	mov	r0, r7
					    K_MSEC(thread_data->init_delay));
    2ff2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    2ff6:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    2ffa:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    2ffe:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3002:	d104      	bne.n	300e <z_init_static_threads+0x92>
	z_sched_start(thread);
    3004:	4640      	mov	r0, r8
    3006:	f7ff fe19 	bl	2c3c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    300a:	3430      	adds	r4, #48	; 0x30
    300c:	e7c9      	b.n	2fa2 <z_init_static_threads+0x26>
    300e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3012:	2300      	movs	r3, #0
    3014:	f7fd f89e 	bl	154 <__aeabi_uldivmod>
    3018:	4602      	mov	r2, r0
    301a:	460b      	mov	r3, r1
    301c:	f108 0018 	add.w	r0, r8, #24
    3020:	4649      	mov	r1, r9
    3022:	f000 f879 	bl	3118 <z_add_timeout>
    3026:	e7f0      	b.n	300a <z_init_static_threads+0x8e>
    3028:	200000a4 	.word	0x200000a4
    302c:	200000a4 	.word	0x200000a4
    3030:	00003cff 	.word	0x00003cff

00003034 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    3034:	4a02      	ldr	r2, [pc, #8]	; (3040 <boot_banner+0xc>)
    3036:	4903      	ldr	r1, [pc, #12]	; (3044 <boot_banner+0x10>)
    3038:	4803      	ldr	r0, [pc, #12]	; (3048 <boot_banner+0x14>)
    303a:	f000 b987 	b.w	334c <printk>
    303e:	bf00      	nop
    3040:	0000423c 	.word	0x0000423c
    3044:	000041f6 	.word	0x000041f6
    3048:	00004216 	.word	0x00004216

0000304c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    304c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
    304e:	4806      	ldr	r0, [pc, #24]	; (3068 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
    3050:	4a06      	ldr	r2, [pc, #24]	; (306c <z_data_copy+0x20>)
    3052:	4907      	ldr	r1, [pc, #28]	; (3070 <z_data_copy+0x24>)
    3054:	1a12      	subs	r2, r2, r0
    3056:	f000 fba0 	bl	379a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    305a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
    305e:	4a05      	ldr	r2, [pc, #20]	; (3074 <z_data_copy+0x28>)
    3060:	4905      	ldr	r1, [pc, #20]	; (3078 <z_data_copy+0x2c>)
    3062:	4806      	ldr	r0, [pc, #24]	; (307c <z_data_copy+0x30>)
    3064:	f000 bb99 	b.w	379a <memcpy>
    3068:	20000000 	.word	0x20000000
    306c:	200000a4 	.word	0x200000a4
    3070:	00004240 	.word	0x00004240
    3074:	00000000 	.word	0x00000000
    3078:	00004240 	.word	0x00004240
    307c:	20000000 	.word	0x20000000

00003080 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
    3080:	4b03      	ldr	r3, [pc, #12]	; (3090 <elapsed+0x10>)
    3082:	681b      	ldr	r3, [r3, #0]
    3084:	b90b      	cbnz	r3, 308a <elapsed+0xa>
    3086:	f7fe b9f5 	b.w	1474 <z_clock_elapsed>
}
    308a:	2000      	movs	r0, #0
    308c:	4770      	bx	lr
    308e:	bf00      	nop
    3090:	20000394 	.word	0x20000394

00003094 <next_timeout>:
	return list->head == list;
    3094:	4b11      	ldr	r3, [pc, #68]	; (30dc <next_timeout+0x48>)

static int32_t next_timeout(void)
{
    3096:	b510      	push	{r4, lr}
    3098:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    309a:	429c      	cmp	r4, r3
    309c:	bf08      	it	eq
    309e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    30a0:	f7ff ffee 	bl	3080 <elapsed>
    30a4:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
    30a6:	b16c      	cbz	r4, 30c4 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    30a8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
    30ac:	1ac0      	subs	r0, r0, r3
    30ae:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    30b2:	2801      	cmp	r0, #1
    30b4:	f173 0200 	sbcs.w	r2, r3, #0
    30b8:	db0d      	blt.n	30d6 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    30ba:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
    30be:	f173 0300 	sbcs.w	r3, r3, #0
    30c2:	db01      	blt.n	30c8 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
    30c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    30c8:	4b05      	ldr	r3, [pc, #20]	; (30e0 <next_timeout+0x4c>)
    30ca:	691b      	ldr	r3, [r3, #16]
    30cc:	b113      	cbz	r3, 30d4 <next_timeout+0x40>
    30ce:	4298      	cmp	r0, r3
    30d0:	bfa8      	it	ge
    30d2:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    30d4:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    30d6:	2000      	movs	r0, #0
    30d8:	e7f6      	b.n	30c8 <next_timeout+0x34>
    30da:	bf00      	nop
    30dc:	20000024 	.word	0x20000024
    30e0:	20000358 	.word	0x20000358

000030e4 <remove_timeout>:
{
    30e4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    30e6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    30e8:	b168      	cbz	r0, 3106 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    30ea:	4a0a      	ldr	r2, [pc, #40]	; (3114 <remove_timeout+0x30>)
    30ec:	6852      	ldr	r2, [r2, #4]
    30ee:	4290      	cmp	r0, r2
    30f0:	d009      	beq.n	3106 <remove_timeout+0x22>
	if (next(t) != NULL) {
    30f2:	b143      	cbz	r3, 3106 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    30f4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    30f8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    30fc:	1912      	adds	r2, r2, r4
    30fe:	eb41 0105 	adc.w	r1, r1, r5
    3102:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    3106:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    3108:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    310a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    310c:	2300      	movs	r3, #0
	node->prev = NULL;
    310e:	e9c0 3300 	strd	r3, r3, [r0]
}
    3112:	bd30      	pop	{r4, r5, pc}
    3114:	20000024 	.word	0x20000024

00003118 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3118:	f1b3 3fff 	cmp.w	r3, #4294967295
    311c:	bf08      	it	eq
    311e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    3122:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3126:	4605      	mov	r5, r0
    3128:	460e      	mov	r6, r1
    312a:	4691      	mov	r9, r2
    312c:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    312e:	d065      	beq.n	31fc <z_add_timeout+0xe4>
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    3130:	f06f 0a01 	mvn.w	sl, #1
    3134:	f04f 3bff 	mov.w	fp, #4294967295
	k_ticks_t ticks = timeout.ticks + 1;
    3138:	1c57      	adds	r7, r2, #1
    313a:	f143 0400 	adc.w	r4, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
    313e:	ebba 0307 	subs.w	r3, sl, r7
    3142:	eb6b 0304 	sbc.w	r3, fp, r4
    3146:	2b00      	cmp	r3, #0
    3148:	db0f      	blt.n	316a <z_add_timeout+0x52>
		ticks = Z_TICK_ABS(timeout.ticks) - (curr_tick + elapsed());
    314a:	f7ff ff99 	bl	3080 <elapsed>
    314e:	4b31      	ldr	r3, [pc, #196]	; (3214 <z_add_timeout+0xfc>)
    3150:	e9d3 2400 	ldrd	r2, r4, [r3]
    3154:	ebba 0202 	subs.w	r2, sl, r2
    3158:	eb6b 0404 	sbc.w	r4, fp, r4
    315c:	ebb2 0209 	subs.w	r2, r2, r9
    3160:	eb64 0408 	sbc.w	r4, r4, r8
    3164:	1a17      	subs	r7, r2, r0
    3166:	eb64 74e0 	sbc.w	r4, r4, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    316a:	60ae      	str	r6, [r5, #8]
	__asm__ volatile(
    316c:	f04f 0320 	mov.w	r3, #32
    3170:	f3ef 8611 	mrs	r6, BASEPRI
    3174:	f383 8811 	msr	BASEPRI, r3
    3178:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
    317c:	f7ff ff80 	bl	3080 <elapsed>
	ticks = MAX(1, ticks);
    3180:	2f01      	cmp	r7, #1
    3182:	f174 0300 	sbcs.w	r3, r4, #0
    3186:	463a      	mov	r2, r7
    3188:	bfbc      	itt	lt
    318a:	2201      	movlt	r2, #1
    318c:	2400      	movlt	r4, #0
	return list->head == list;
    318e:	4f22      	ldr	r7, [pc, #136]	; (3218 <z_add_timeout+0x100>)
		to->dticks = ticks + elapsed();
    3190:	1812      	adds	r2, r2, r0
    3192:	683b      	ldr	r3, [r7, #0]
    3194:	eb44 74e0 	adc.w	r4, r4, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3198:	42bb      	cmp	r3, r7
    319a:	e9c5 2404 	strd	r2, r4, [r5, #16]
    319e:	d002      	beq.n	31a6 <z_add_timeout+0x8e>
	return (node == list->tail) ? NULL : node->next;
    31a0:	f8d7 c004 	ldr.w	ip, [r7, #4]
		for (t = first(); t != NULL; t = next(t)) {
    31a4:	b92b      	cbnz	r3, 31b2 <z_add_timeout+0x9a>
	sys_dnode_t *const tail = list->tail;
    31a6:	687b      	ldr	r3, [r7, #4]
	node->prev = tail;
    31a8:	e9c5 7300 	strd	r7, r3, [r5]
	tail->next = node;
    31ac:	601d      	str	r5, [r3, #0]
	list->tail = node;
    31ae:	607d      	str	r5, [r7, #4]
}
    31b0:	e011      	b.n	31d6 <z_add_timeout+0xbe>
			if (t->dticks > to->dticks) {
    31b2:	e9d3 1404 	ldrd	r1, r4, [r3, #16]
    31b6:	e9d5 2004 	ldrd	r2, r0, [r5, #16]
    31ba:	428a      	cmp	r2, r1
    31bc:	eb70 0e04 	sbcs.w	lr, r0, r4
    31c0:	da1e      	bge.n	3200 <z_add_timeout+0xe8>
				t->dticks -= to->dticks;
    31c2:	1a8a      	subs	r2, r1, r2
    31c4:	eb64 0000 	sbc.w	r0, r4, r0
    31c8:	e9c3 2004 	strd	r2, r0, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    31cc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    31ce:	e9c5 3200 	strd	r3, r2, [r5]
	prev->next = node;
    31d2:	6015      	str	r5, [r2, #0]
	successor->prev = node;
    31d4:	605d      	str	r5, [r3, #4]
	return list->head == list;
    31d6:	683b      	ldr	r3, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    31d8:	42bb      	cmp	r3, r7
    31da:	d00b      	beq.n	31f4 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    31dc:	429d      	cmp	r5, r3
    31de:	d109      	bne.n	31f4 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    31e0:	f7ff ff58 	bl	3094 <next_timeout>

			if (next_time == 0 ||
    31e4:	b118      	cbz	r0, 31ee <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    31e6:	4b0d      	ldr	r3, [pc, #52]	; (321c <z_add_timeout+0x104>)
			if (next_time == 0 ||
    31e8:	691b      	ldr	r3, [r3, #16]
    31ea:	4283      	cmp	r3, r0
    31ec:	d002      	beq.n	31f4 <z_add_timeout+0xdc>
				z_clock_set_timeout(next_time, false);
    31ee:	2100      	movs	r1, #0
    31f0:	f7fe f90e 	bl	1410 <z_clock_set_timeout>
	__asm__ volatile(
    31f4:	f386 8811 	msr	BASEPRI, r6
    31f8:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    31fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
    3200:	1a52      	subs	r2, r2, r1
    3202:	eb60 0004 	sbc.w	r0, r0, r4
	return (node == list->tail) ? NULL : node->next;
    3206:	4563      	cmp	r3, ip
    3208:	e9c5 2004 	strd	r2, r0, [r5, #16]
    320c:	d0cb      	beq.n	31a6 <z_add_timeout+0x8e>
    320e:	681b      	ldr	r3, [r3, #0]
    3210:	e7c8      	b.n	31a4 <z_add_timeout+0x8c>
    3212:	bf00      	nop
    3214:	200001a8 	.word	0x200001a8
    3218:	20000024 	.word	0x20000024
    321c:	20000358 	.word	0x20000358

00003220 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
    3220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3224:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    3226:	f7ff fc93 	bl	2b50 <z_time_slice>
	__asm__ volatile(
    322a:	f04f 0320 	mov.w	r3, #32
    322e:	f3ef 8411 	mrs	r4, BASEPRI
    3232:	f383 8811 	msr	BASEPRI, r3
    3236:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    323a:	4e24      	ldr	r6, [pc, #144]	; (32cc <z_clock_announce+0xac>)
	return list->head == list;
    323c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 32d0 <z_clock_announce+0xb0>
    3240:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    3242:	4d24      	ldr	r5, [pc, #144]	; (32d4 <z_clock_announce+0xb4>)
    3244:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3248:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    324a:	4540      	cmp	r0, r8
    324c:	ea4f 77e2 	mov.w	r7, r2, asr #31
		curr_tick += dt;
    3250:	e9d5 1e00 	ldrd	r1, lr, [r5]
    3254:	d00b      	beq.n	326e <z_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    3256:	b150      	cbz	r0, 326e <z_clock_announce+0x4e>
    3258:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    325c:	429a      	cmp	r2, r3
    325e:	eb77 090c 	sbcs.w	r9, r7, ip
    3262:	da16      	bge.n	3292 <z_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    3264:	1a9b      	subs	r3, r3, r2
    3266:	eb6c 0c07 	sbc.w	ip, ip, r7
    326a:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    326e:	1852      	adds	r2, r2, r1
    3270:	eb4e 0707 	adc.w	r7, lr, r7
    3274:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    3278:	2500      	movs	r5, #0
    327a:	6035      	str	r5, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
    327c:	f7ff ff0a 	bl	3094 <next_timeout>
    3280:	4629      	mov	r1, r5
    3282:	f7fe f8c5 	bl	1410 <z_clock_set_timeout>
	__asm__ volatile(
    3286:	f384 8811 	msr	BASEPRI, r4
    328a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    328e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    3292:	1859      	adds	r1, r3, r1
    3294:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    3298:	1ad3      	subs	r3, r2, r3
    329a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    329c:	2200      	movs	r2, #0
    329e:	2300      	movs	r3, #0
    32a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    32a4:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    32a8:	f7ff ff1c 	bl	30e4 <remove_timeout>
    32ac:	f384 8811 	msr	BASEPRI, r4
    32b0:	f3bf 8f6f 	isb	sy
		t->fn(t);
    32b4:	6883      	ldr	r3, [r0, #8]
    32b6:	4798      	blx	r3
	__asm__ volatile(
    32b8:	f04f 0320 	mov.w	r3, #32
    32bc:	f3ef 8411 	mrs	r4, BASEPRI
    32c0:	f383 8811 	msr	BASEPRI, r3
    32c4:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    32c8:	e7bc      	b.n	3244 <z_clock_announce+0x24>
    32ca:	bf00      	nop
    32cc:	20000394 	.word	0x20000394
    32d0:	20000024 	.word	0x20000024
    32d4:	200001a8 	.word	0x200001a8

000032d8 <z_tick_get>:

int64_t z_tick_get(void)
{
    32d8:	b510      	push	{r4, lr}
    32da:	f04f 0320 	mov.w	r3, #32
    32de:	f3ef 8411 	mrs	r4, BASEPRI
    32e2:	f383 8811 	msr	BASEPRI, r3
    32e6:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
    32ea:	f7fe f8c3 	bl	1474 <z_clock_elapsed>
    32ee:	4a05      	ldr	r2, [pc, #20]	; (3304 <z_tick_get+0x2c>)
    32f0:	e9d2 3100 	ldrd	r3, r1, [r2]
    32f4:	18c0      	adds	r0, r0, r3
    32f6:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    32fa:	f384 8811 	msr	BASEPRI, r4
    32fe:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    3302:	bd10      	pop	{r4, pc}
    3304:	200001a8 	.word	0x200001a8

00003308 <multiply>:
#include "multiply.h"

int multiply(int x, int y){
	return x*y;
    3308:	4348      	muls	r0, r1
    330a:	4770      	bx	lr

0000330c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    330c:	4603      	mov	r3, r0
    330e:	b158      	cbz	r0, 3328 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    3310:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    3312:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    3316:	2a01      	cmp	r2, #1
    3318:	d003      	beq.n	3322 <sys_notify_validate+0x16>
    331a:	2a03      	cmp	r2, #3
    331c:	d104      	bne.n	3328 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    331e:	6802      	ldr	r2, [r0, #0]
    3320:	b112      	cbz	r2, 3328 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    3322:	2000      	movs	r0, #0
    3324:	6098      	str	r0, [r3, #8]
    3326:	4770      	bx	lr
		return -EINVAL;
    3328:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    332c:	4770      	bx	lr

0000332e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    332e:	6842      	ldr	r2, [r0, #4]

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    3330:	4603      	mov	r3, r0
	return method & SYS_NOTIFY_METHOD_MASK;
    3332:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    3336:	2a03      	cmp	r2, #3
    3338:	f04f 0200 	mov.w	r2, #0
	notify->result = res;
    333c:	6081      	str	r1, [r0, #8]
	sys_notify_generic_callback rv = 0;
    333e:	bf14      	ite	ne
    3340:	4610      	movne	r0, r2
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    3342:	6800      	ldreq	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    3344:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    3346:	4770      	bx	lr

00003348 <arch_printk_char_out>:
}
    3348:	2000      	movs	r0, #0
    334a:	4770      	bx	lr

0000334c <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    334c:	b40f      	push	{r0, r1, r2, r3}
    334e:	b507      	push	{r0, r1, r2, lr}
    3350:	a904      	add	r1, sp, #16
    3352:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    3356:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    3358:	f7fd f8a8 	bl	4ac <vprintk>
	}
	va_end(ap);
}
    335c:	b003      	add	sp, #12
    335e:	f85d eb04 	ldr.w	lr, [sp], #4
    3362:	b004      	add	sp, #16
    3364:	4770      	bx	lr

00003366 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3366:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    3368:	f013 0307 	ands.w	r3, r3, #7
    336c:	d105      	bne.n	337a <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    336e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    3370:	2b00      	cmp	r3, #0
    3372:	bf0c      	ite	eq
    3374:	2000      	moveq	r0, #0
    3376:	2003      	movne	r0, #3
    3378:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    337a:	2b02      	cmp	r3, #2
    337c:	d105      	bne.n	338a <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    337e:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    3380:	2b00      	cmp	r3, #0
    3382:	bf14      	ite	ne
    3384:	2000      	movne	r0, #0
    3386:	2004      	moveq	r0, #4
    3388:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    338a:	2b01      	cmp	r3, #1
    338c:	d105      	bne.n	339a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    338e:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    3390:	2b00      	cmp	r3, #0
    3392:	bf0c      	ite	eq
    3394:	2000      	moveq	r0, #0
    3396:	2005      	movne	r0, #5
    3398:	4770      	bx	lr
	int evt = EVT_NOP;
    339a:	2000      	movs	r0, #0
}
    339c:	4770      	bx	lr

0000339e <notify_one>:
{
    339e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33a2:	460d      	mov	r5, r1
    33a4:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    33a6:	4619      	mov	r1, r3
    33a8:	1d28      	adds	r0, r5, #4
{
    33aa:	4690      	mov	r8, r2
    33ac:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    33ae:	f7ff ffbe 	bl	332e <sys_notify_finalize>
	if (cb) {
    33b2:	4604      	mov	r4, r0
    33b4:	b138      	cbz	r0, 33c6 <notify_one+0x28>
		cb(mgr, cli, state, res);
    33b6:	4633      	mov	r3, r6
    33b8:	4642      	mov	r2, r8
    33ba:	4629      	mov	r1, r5
    33bc:	4638      	mov	r0, r7
    33be:	46a4      	mov	ip, r4
}
    33c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    33c4:	4760      	bx	ip
}
    33c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000033ca <transition_complete>:
{
    33ca:	b410      	push	{r4}
	__asm__ volatile(
    33cc:	f04f 0420 	mov.w	r4, #32
    33d0:	f3ef 8211 	mrs	r2, BASEPRI
    33d4:	f384 8811 	msr	BASEPRI, r4
    33d8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    33dc:	6141      	str	r1, [r0, #20]
}
    33de:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    33e0:	2101      	movs	r1, #1
    33e2:	f7fd b871 	b.w	4c8 <process_event>

000033e6 <validate_args>:
{
    33e6:	b510      	push	{r4, lr}
    33e8:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    33ea:	b140      	cbz	r0, 33fe <validate_args+0x18>
    33ec:	b139      	cbz	r1, 33fe <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    33ee:	1d08      	adds	r0, r1, #4
    33f0:	f7ff ff8c 	bl	330c <sys_notify_validate>
	if ((rv == 0)
    33f4:	b928      	cbnz	r0, 3402 <validate_args+0x1c>
	    && ((cli->notify.flags
    33f6:	68a3      	ldr	r3, [r4, #8]
    33f8:	f033 0303 	bics.w	r3, r3, #3
    33fc:	d001      	beq.n	3402 <validate_args+0x1c>
		rv = -EINVAL;
    33fe:	f06f 0015 	mvn.w	r0, #21
}
    3402:	bd10      	pop	{r4, pc}

00003404 <onoff_manager_init>:
{
    3404:	b538      	push	{r3, r4, r5, lr}
    3406:	460c      	mov	r4, r1
	if ((mgr == NULL)
    3408:	4605      	mov	r5, r0
    340a:	b158      	cbz	r0, 3424 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    340c:	b151      	cbz	r1, 3424 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    340e:	680b      	ldr	r3, [r1, #0]
    3410:	b143      	cbz	r3, 3424 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    3412:	684b      	ldr	r3, [r1, #4]
    3414:	b133      	cbz	r3, 3424 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3416:	221c      	movs	r2, #28
    3418:	2100      	movs	r1, #0
    341a:	f000 f9e9 	bl	37f0 <memset>
	return 0;
    341e:	2000      	movs	r0, #0
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    3420:	612c      	str	r4, [r5, #16]
}
    3422:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    3424:	f06f 0015 	mvn.w	r0, #21
    3428:	e7fb      	b.n	3422 <onoff_manager_init+0x1e>

0000342a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    342a:	b570      	push	{r4, r5, r6, lr}
    342c:	4604      	mov	r4, r0
    342e:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    3430:	f7ff ffd9 	bl	33e6 <validate_args>

	if (rv < 0) {
    3434:	1e05      	subs	r5, r0, #0
    3436:	db31      	blt.n	349c <onoff_request+0x72>
    3438:	f04f 0320 	mov.w	r3, #32
    343c:	f3ef 8111 	mrs	r1, BASEPRI
    3440:	f383 8811 	msr	BASEPRI, r3
    3444:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    3448:	f64f 75ff 	movw	r5, #65535	; 0xffff
    344c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    344e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    3450:	42ab      	cmp	r3, r5
    3452:	f000 0207 	and.w	r2, r0, #7
    3456:	d02e      	beq.n	34b6 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    3458:	2a02      	cmp	r2, #2
    345a:	d10e      	bne.n	347a <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    345c:	3301      	adds	r3, #1
    345e:	8363      	strh	r3, [r4, #26]
	rv = state;
    3460:	4615      	mov	r5, r2
		notify = true;
    3462:	2301      	movs	r3, #1
	__asm__ volatile(
    3464:	f381 8811 	msr	BASEPRI, r1
    3468:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    346c:	b1b3      	cbz	r3, 349c <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    346e:	2300      	movs	r3, #0
    3470:	4631      	mov	r1, r6
    3472:	4620      	mov	r0, r4
    3474:	f7ff ff93 	bl	339e <notify_one>
    3478:	e010      	b.n	349c <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    347a:	0783      	lsls	r3, r0, #30
    347c:	d001      	beq.n	3482 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    347e:	2a06      	cmp	r2, #6
    3480:	d10e      	bne.n	34a0 <onoff_request+0x76>
	parent->next = child;
    3482:	2300      	movs	r3, #0
    3484:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    3486:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3488:	b993      	cbnz	r3, 34b0 <onoff_request+0x86>
	list->head = node;
    348a:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    348e:	4615      	mov	r5, r2
    3490:	b962      	cbnz	r2, 34ac <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    3492:	460a      	mov	r2, r1
    3494:	4620      	mov	r0, r4
    3496:	2102      	movs	r1, #2
    3498:	f7fd f816 	bl	4c8 <process_event>
		}
	}

	return rv;
}
    349c:	4628      	mov	r0, r5
    349e:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    34a0:	2a05      	cmp	r2, #5
    34a2:	bf0c      	ite	eq
    34a4:	f06f 0522 	mvneq.w	r5, #34	; 0x22
    34a8:	f06f 0504 	mvnne.w	r5, #4
    34ac:	2300      	movs	r3, #0
    34ae:	e7d9      	b.n	3464 <onoff_request+0x3a>
	parent->next = child;
    34b0:	601e      	str	r6, [r3, #0]
	list->tail = node;
    34b2:	6066      	str	r6, [r4, #4]
}
    34b4:	e7eb      	b.n	348e <onoff_request+0x64>
		rv = -EAGAIN;
    34b6:	f06f 050a 	mvn.w	r5, #10
    34ba:	e7f7      	b.n	34ac <onoff_request+0x82>

000034bc <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    34bc:	4604      	mov	r4, r0
    34be:	b508      	push	{r3, lr}
    34c0:	4608      	mov	r0, r1
    34c2:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    34c4:	461a      	mov	r2, r3
    34c6:	47a0      	blx	r4
	return z_impl_k_current_get();
    34c8:	f7ff fc88 	bl	2ddc <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
    34cc:	f7fe fa1c 	bl	1908 <z_impl_k_thread_abort>

000034d0 <encode_uint>:
{
    34d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34d4:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    34d6:	78d3      	ldrb	r3, [r2, #3]
{
    34d8:	4680      	mov	r8, r0
	switch (specifier) {
    34da:	2b6f      	cmp	r3, #111	; 0x6f
{
    34dc:	460f      	mov	r7, r1
    34de:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    34e0:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    34e4:	d029      	beq.n	353a <encode_uint+0x6a>
    34e6:	d824      	bhi.n	3532 <encode_uint+0x62>
		return 16;
    34e8:	2b58      	cmp	r3, #88	; 0x58
    34ea:	bf14      	ite	ne
    34ec:	260a      	movne	r6, #10
    34ee:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    34f0:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    34f4:	4632      	mov	r2, r6
    34f6:	2300      	movs	r3, #0
    34f8:	4640      	mov	r0, r8
    34fa:	4639      	mov	r1, r7
    34fc:	f7fc fe2a 	bl	154 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3500:	2a09      	cmp	r2, #9
    3502:	b2d4      	uxtb	r4, r2
    3504:	d81e      	bhi.n	3544 <encode_uint+0x74>
    3506:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    3508:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    350a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    350c:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3510:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    3514:	d301      	bcc.n	351a <encode_uint+0x4a>
    3516:	45d1      	cmp	r9, sl
    3518:	d811      	bhi.n	353e <encode_uint+0x6e>
	if (conv->flag_hash) {
    351a:	782b      	ldrb	r3, [r5, #0]
    351c:	069b      	lsls	r3, r3, #26
    351e:	d505      	bpl.n	352c <encode_uint+0x5c>
		if (radix == 8) {
    3520:	2e08      	cmp	r6, #8
    3522:	d115      	bne.n	3550 <encode_uint+0x80>
			conv->altform_0 = true;
    3524:	78ab      	ldrb	r3, [r5, #2]
    3526:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    352a:	70ab      	strb	r3, [r5, #2]
}
    352c:	4648      	mov	r0, r9
    352e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    3532:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    3536:	2b70      	cmp	r3, #112	; 0x70
    3538:	e7d7      	b.n	34ea <encode_uint+0x1a>
	switch (specifier) {
    353a:	2608      	movs	r6, #8
    353c:	e7d8      	b.n	34f0 <encode_uint+0x20>
		value /= radix;
    353e:	4680      	mov	r8, r0
    3540:	460f      	mov	r7, r1
    3542:	e7d7      	b.n	34f4 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    3544:	f1bb 0f19 	cmp.w	fp, #25
    3548:	bf94      	ite	ls
    354a:	3437      	addls	r4, #55	; 0x37
    354c:	3457      	addhi	r4, #87	; 0x57
    354e:	e7db      	b.n	3508 <encode_uint+0x38>
		} else if (radix == 16) {
    3550:	2e10      	cmp	r6, #16
    3552:	d1eb      	bne.n	352c <encode_uint+0x5c>
			conv->altform_0c = true;
    3554:	78ab      	ldrb	r3, [r5, #2]
    3556:	f043 0310 	orr.w	r3, r3, #16
    355a:	e7e6      	b.n	352a <encode_uint+0x5a>

0000355c <outs>:
{
    355c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3560:	4607      	mov	r7, r0
    3562:	4688      	mov	r8, r1
    3564:	4615      	mov	r5, r2
    3566:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    3568:	4614      	mov	r4, r2
    356a:	42b4      	cmp	r4, r6
    356c:	eba4 0005 	sub.w	r0, r4, r5
    3570:	d302      	bcc.n	3578 <outs+0x1c>
    3572:	b93e      	cbnz	r6, 3584 <outs+0x28>
    3574:	7823      	ldrb	r3, [r4, #0]
    3576:	b12b      	cbz	r3, 3584 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    3578:	4641      	mov	r1, r8
    357a:	f814 0b01 	ldrb.w	r0, [r4], #1
    357e:	47b8      	blx	r7
		if (rc < 0) {
    3580:	2800      	cmp	r0, #0
    3582:	daf2      	bge.n	356a <outs+0xe>
}
    3584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003588 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    3588:	4770      	bx	lr

0000358a <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
    358a:	f7fe bf13 	b.w	23b4 <SystemInit>

0000358e <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    358e:	b082      	sub	sp, #8
    3590:	ab02      	add	r3, sp, #8
    3592:	e903 0003 	stmdb	r3, {r0, r1}
    3596:	2300      	movs	r3, #0
    3598:	f383 8811 	msr	BASEPRI, r3
    359c:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    35a0:	b002      	add	sp, #8
    35a2:	4770      	bx	lr

000035a4 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    35a4:	2200      	movs	r2, #0
    35a6:	8002      	strh	r2, [r0, #0]
    35a8:	6042      	str	r2, [r0, #4]
}
    35aa:	4770      	bx	lr

000035ac <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    35ac:	220c      	movs	r2, #12
    35ae:	6903      	ldr	r3, [r0, #16]
    35b0:	b2c9      	uxtb	r1, r1
    35b2:	fb01 3302 	mla	r3, r1, r2, r3
    35b6:	6f98      	ldr	r0, [r3, #120]	; 0x78
}
    35b8:	f000 0007 	and.w	r0, r0, #7
    35bc:	4770      	bx	lr

000035be <set_on_state>:
	__asm__ volatile(
    35be:	f04f 0320 	mov.w	r3, #32
    35c2:	f3ef 8211 	mrs	r2, BASEPRI
    35c6:	f383 8811 	msr	BASEPRI, r3
    35ca:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    35ce:	6803      	ldr	r3, [r0, #0]
    35d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    35d4:	f043 0302 	orr.w	r3, r3, #2
    35d8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    35da:	f382 8811 	msr	BASEPRI, r2
    35de:	f3bf 8f6f 	isb	sy
}
    35e2:	4770      	bx	lr

000035e4 <stop>:
{
    35e4:	4603      	mov	r3, r0
    35e6:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    35e8:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    35ea:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    35ec:	f04f 0420 	mov.w	r4, #32
    35f0:	f3ef 8611 	mrs	r6, BASEPRI
    35f4:	f384 8811 	msr	BASEPRI, r4
    35f8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    35fc:	250c      	movs	r5, #12
    35fe:	fb05 0401 	mla	r4, r5, r1, r0
    3602:	6fa4      	ldr	r4, [r4, #120]	; 0x78
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3604:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    3608:	d001      	beq.n	360e <stop+0x2a>
    360a:	42a2      	cmp	r2, r4
    360c:	d110      	bne.n	3630 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    360e:	2201      	movs	r2, #1
    3610:	fb05 0001 	mla	r0, r5, r1, r0
    3614:	6782      	str	r2, [r0, #120]	; 0x78
	int err = 0;
    3616:	2000      	movs	r0, #0
	__asm__ volatile(
    3618:	f386 8811 	msr	BASEPRI, r6
    361c:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3620:	b928      	cbnz	r0, 362e <stop+0x4a>
	get_sub_config(dev, type)->stop();
    3622:	685b      	ldr	r3, [r3, #4]
    3624:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    3628:	684b      	ldr	r3, [r1, #4]
    362a:	4798      	blx	r3
	return 0;
    362c:	2000      	movs	r0, #0
}
    362e:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    3630:	f04f 30ff 	mov.w	r0, #4294967295
    3634:	e7f0      	b.n	3618 <stop+0x34>

00003636 <api_stop>:
	return stop(dev, subsys, CTX_API);
    3636:	2280      	movs	r2, #128	; 0x80
    3638:	f7ff bfd4 	b.w	35e4 <stop>

0000363c <async_start>:
{
    363c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    363e:	9f06      	ldr	r7, [sp, #24]
    3640:	4605      	mov	r5, r0
	struct nrf_clock_control_data *data = dev->data;
    3642:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    3644:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    3646:	f04f 0020 	mov.w	r0, #32
    364a:	f3ef 8c11 	mrs	ip, BASEPRI
    364e:	f380 8811 	msr	BASEPRI, r0
    3652:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    3656:	260c      	movs	r6, #12
    3658:	fb06 4601 	mla	r6, r6, r1, r4
    365c:	6fb0      	ldr	r0, [r6, #120]	; 0x78
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    365e:	f000 0e07 	and.w	lr, r0, #7
    3662:	f1be 0f01 	cmp.w	lr, #1
    3666:	d111      	bne.n	368c <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    3668:	67b7      	str	r7, [r6, #120]	; 0x78
	int err = 0;
    366a:	2600      	movs	r6, #0
	__asm__ volatile(
    366c:	f38c 8811 	msr	BASEPRI, ip
    3670:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    3674:	b946      	cbnz	r6, 3688 <async_start+0x4c>
	subdata->cb = cb;
    3676:	200c      	movs	r0, #12
    3678:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    367c:	e9c4 231c 	strd	r2, r3, [r4, #112]	; 0x70
	 get_sub_config(dev, type)->start();
    3680:	686b      	ldr	r3, [r5, #4]
    3682:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    3686:	4798      	blx	r3
}
    3688:	4630      	mov	r0, r6
    368a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    368c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    3690:	4287      	cmp	r7, r0
    3692:	bf14      	ite	ne
    3694:	f04f 36ff 	movne.w	r6, #4294967295
    3698:	f06f 0644 	mvneq.w	r6, #68	; 0x44
    369c:	e7e6      	b.n	366c <async_start+0x30>

0000369e <api_start>:
{
    369e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    36a0:	2480      	movs	r4, #128	; 0x80
    36a2:	9400      	str	r4, [sp, #0]
    36a4:	f7ff ffca 	bl	363c <async_start>
}
    36a8:	b002      	add	sp, #8
    36aa:	bd10      	pop	{r4, pc}

000036ac <onoff_started_callback>:
{
    36ac:	b410      	push	{r4}
	notify(mgr, 0);
    36ae:	241c      	movs	r4, #28
	return &data->mgr[type];
    36b0:	6900      	ldr	r0, [r0, #16]
    36b2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    36b4:	fb03 0004 	mla	r0, r3, r4, r0
    36b8:	2100      	movs	r1, #0
}
    36ba:	bc10      	pop	{r4}
	notify(mgr, 0);
    36bc:	4710      	bx	r2

000036be <hfclkaudio_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    36be:	2003      	movs	r0, #3
    36c0:	f000 b9c9 	b.w	3a56 <nrfx_clock_start>

000036c4 <hfclk192m_start>:
	nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK192M);
    36c4:	2002      	movs	r0, #2
    36c6:	f000 b9c6 	b.w	3a56 <nrfx_clock_start>

000036ca <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    36ca:	2000      	movs	r0, #0
    36cc:	f000 b9c3 	b.w	3a56 <nrfx_clock_start>

000036d0 <hfclkaudio_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLKAUDIO);
    36d0:	2003      	movs	r0, #3
    36d2:	f000 ba0f 	b.w	3af4 <nrfx_clock_stop>

000036d6 <hfclk192m_stop>:
	nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK192M);
    36d6:	2002      	movs	r0, #2
    36d8:	f000 ba0c 	b.w	3af4 <nrfx_clock_stop>

000036dc <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    36dc:	2000      	movs	r0, #0
    36de:	f000 ba09 	b.w	3af4 <nrfx_clock_stop>

000036e2 <blocking_start_callback>:
{
    36e2:	4610      	mov	r0, r2
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    36e4:	f7ff bbd2 	b.w	2e8c <z_impl_k_sem_give>

000036e8 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    36e8:	4770      	bx	lr

000036ea <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
    36ea:	4770      	bx	lr

000036ec <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    36ec:	2100      	movs	r1, #0
    36ee:	2001      	movs	r0, #1
    36f0:	f000 b804 	b.w	36fc <z_arm_fatal_error>

000036f4 <configure_builtin_stack_guard>:
  __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
    36f4:	6e43      	ldr	r3, [r0, #100]	; 0x64
    36f6:	f383 880b 	msr	PSPLIM, r3
}
    36fa:	4770      	bx	lr

000036fc <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    36fc:	f000 ba75 	b.w	3bea <z_fatal_error>

00003700 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    3700:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    3702:	6800      	ldr	r0, [r0, #0]
    3704:	f000 ba71 	b.w	3bea <z_fatal_error>

00003708 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    3708:	b508      	push	{r3, lr}
	handler();
    370a:	f7fd ffab 	bl	1664 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    370e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    3712:	f7fe b8df 	b.w	18d4 <z_arm_exc_exit>

00003716 <mpu_configure_region>:
{
    3716:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	p_attr->rbar = attr->rbar &
    3718:	890a      	ldrh	r2, [r1, #8]
    371a:	894e      	ldrh	r6, [r1, #10]
	region_conf.base = new_region->start;
    371c:	680b      	ldr	r3, [r1, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    371e:	684d      	ldr	r5, [r1, #4]
    3720:	f002 021f 	and.w	r2, r2, #31
    3724:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
	region_conf.base = new_region->start;
    3728:	9300      	str	r3, [sp, #0]
    372a:	f88d 2008 	strb.w	r2, [sp, #8]
	p_attr->r_limit = REGION_LIMIT_ADDR(base, size);
    372e:	f023 031f 	bic.w	r3, r3, #31
    3732:	1e6a      	subs	r2, r5, #1
    3734:	4413      	add	r3, r2
    3736:	f023 031f 	bic.w	r3, r3, #31
	if (index > (get_num_regions() - 1U)) {
    373a:	2807      	cmp	r0, #7
    373c:	9303      	str	r3, [sp, #12]
    373e:	d804      	bhi.n	374a <mpu_configure_region+0x34>
	region_init(index, region_conf);
    3740:	4669      	mov	r1, sp
    3742:	f7fe f90f 	bl	1964 <region_init>
}
    3746:	b004      	add	sp, #16
    3748:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    374a:	f06f 0015 	mvn.w	r0, #21
	return region_allocate_and_init(index,
    374e:	e7fa      	b.n	3746 <mpu_configure_region+0x30>

00003750 <arm_cmse_mpu_region_get>:
__CMSE_TT_ASM ()

__extension__ static __inline __attribute__ ((__always_inline__))
cmse_address_info_t
cmse_TT (void *__p)
__CMSE_TT_ASM ()
    3750:	e840 f300 	tt	r3, r0
int arm_cmse_mpu_region_get(uint32_t addr)
{
	cmse_address_info_t addr_info =	cmse_TT((void *)addr);

	if (addr_info.flags.mpu_region_valid) {
		return addr_info.flags.mpu_region;
    3754:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3758:	b2d8      	uxtb	r0, r3
	}

	return -EINVAL;
}
    375a:	bf08      	it	eq
    375c:	f06f 0015 	mvneq.w	r0, #21
    3760:	4770      	bx	lr

00003762 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    3762:	4603      	mov	r3, r0
	size_t n = 0;
    3764:	2000      	movs	r0, #0

	while (*s != '\0') {
    3766:	5c1a      	ldrb	r2, [r3, r0]
    3768:	b902      	cbnz	r2, 376c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    376a:	4770      	bx	lr
		n++;
    376c:	3001      	adds	r0, #1
    376e:	e7fa      	b.n	3766 <strlen+0x4>

00003770 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    3770:	4603      	mov	r3, r0
	size_t n = 0;
    3772:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    3774:	5c1a      	ldrb	r2, [r3, r0]
    3776:	b10a      	cbz	r2, 377c <strnlen+0xc>
    3778:	4288      	cmp	r0, r1
    377a:	d100      	bne.n	377e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    377c:	4770      	bx	lr
		n++;
    377e:	3001      	adds	r0, #1
    3780:	e7f8      	b.n	3774 <strnlen+0x4>

00003782 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    3782:	1e43      	subs	r3, r0, #1
    3784:	3901      	subs	r1, #1
    3786:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    378a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    378e:	4282      	cmp	r2, r0
    3790:	d101      	bne.n	3796 <strcmp+0x14>
    3792:	2a00      	cmp	r2, #0
    3794:	d1f7      	bne.n	3786 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    3796:	1a10      	subs	r0, r2, r0
    3798:	4770      	bx	lr

0000379a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    379a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    379c:	ea81 0400 	eor.w	r4, r1, r0
    37a0:	07a5      	lsls	r5, r4, #30
    37a2:	4603      	mov	r3, r0
    37a4:	d00b      	beq.n	37be <memcpy+0x24>
    37a6:	3b01      	subs	r3, #1
    37a8:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    37aa:	4291      	cmp	r1, r2
    37ac:	d11b      	bne.n	37e6 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    37ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
    37b0:	2a00      	cmp	r2, #0
    37b2:	d0fc      	beq.n	37ae <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
    37b4:	f811 4b01 	ldrb.w	r4, [r1], #1
			n--;
    37b8:	3a01      	subs	r2, #1
			*(d_byte++) = *(s_byte++);
    37ba:	f803 4b01 	strb.w	r4, [r3], #1
		while (((uintptr_t)d_byte) & mask) {
    37be:	079c      	lsls	r4, r3, #30
    37c0:	d1f6      	bne.n	37b0 <memcpy+0x16>
    37c2:	f022 0403 	bic.w	r4, r2, #3
    37c6:	1f1d      	subs	r5, r3, #4
    37c8:	0896      	lsrs	r6, r2, #2
    37ca:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
    37cc:	42b9      	cmp	r1, r7
    37ce:	d105      	bne.n	37dc <memcpy+0x42>
    37d0:	f06f 0503 	mvn.w	r5, #3
		d_byte = (unsigned char *)d_word;
    37d4:	4423      	add	r3, r4
    37d6:	fb05 2206 	mla	r2, r5, r6, r2
    37da:	e7e4      	b.n	37a6 <memcpy+0xc>
			*(d_word++) = *(s_word++);
    37dc:	f851 cb04 	ldr.w	ip, [r1], #4
    37e0:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
    37e4:	e7f2      	b.n	37cc <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
    37e6:	f811 4b01 	ldrb.w	r4, [r1], #1
    37ea:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    37ee:	e7dc      	b.n	37aa <memcpy+0x10>

000037f0 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    37f0:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    37f2:	4604      	mov	r4, r0
	unsigned char c_byte = (unsigned char)c;
    37f4:	b2c9      	uxtb	r1, r1

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    37f6:	07a3      	lsls	r3, r4, #30
    37f8:	d111      	bne.n	381e <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
    37fa:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
    37fe:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    3802:	f022 0303 	bic.w	r3, r2, #3
    3806:	0896      	lsrs	r6, r2, #2
    3808:	4423      	add	r3, r4
    380a:	429c      	cmp	r4, r3
    380c:	d10d      	bne.n	382a <memset+0x3a>
    380e:	f06f 0403 	mvn.w	r4, #3
    3812:	fb04 2206 	mla	r2, r4, r6, r2
    3816:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    3818:	4293      	cmp	r3, r2
    381a:	d109      	bne.n	3830 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    381c:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
    381e:	2a00      	cmp	r2, #0
    3820:	d0fc      	beq.n	381c <memset+0x2c>
		*(d_byte++) = c_byte;
    3822:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
    3826:	3a01      	subs	r2, #1
    3828:	e7e5      	b.n	37f6 <memset+0x6>
		*(d_word++) = c_word;
    382a:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
    382e:	e7ec      	b.n	380a <memset+0x1a>
		*(d_byte++) = c_byte;
    3830:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    3834:	e7f0      	b.n	3818 <memset+0x28>

00003836 <_stdout_hook_default>:
}
    3836:	f04f 30ff 	mov.w	r0, #4294967295
    383a:	4770      	bx	lr

0000383c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    383c:	6843      	ldr	r3, [r0, #4]
}
    383e:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3840:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    3842:	691b      	ldr	r3, [r3, #16]
	*value = nrf_gpio_port_in_read(reg);
    3844:	600b      	str	r3, [r1, #0]
}
    3846:	4770      	bx	lr

00003848 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3848:	6843      	ldr	r3, [r0, #4]
    384a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    384c:	6858      	ldr	r0, [r3, #4]
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    384e:	4042      	eors	r2, r0
    3850:	400a      	ands	r2, r1
    3852:	4042      	eors	r2, r0
    p_reg->OUT = value;
    3854:	605a      	str	r2, [r3, #4]
}
    3856:	2000      	movs	r0, #0
    3858:	4770      	bx	lr

0000385a <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    385a:	6843      	ldr	r3, [r0, #4]
}
    385c:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    385e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    3860:	6099      	str	r1, [r3, #8]
}
    3862:	4770      	bx	lr

00003864 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3864:	6843      	ldr	r3, [r0, #4]
}
    3866:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3868:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    386a:	60d9      	str	r1, [r3, #12]
}
    386c:	4770      	bx	lr

0000386e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    386e:	6843      	ldr	r3, [r0, #4]
}
    3870:	2000      	movs	r0, #0
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    3872:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    3874:	6853      	ldr	r3, [r2, #4]
	nrf_gpio_port_out_write(reg, value ^ mask);
    3876:	404b      	eors	r3, r1
    p_reg->OUT = value;
    3878:	6053      	str	r3, [r2, #4]
}
    387a:	4770      	bx	lr

0000387c <gpio_nrfx_manage_callback>:
	return port->data;
    387c:	6903      	ldr	r3, [r0, #16]
{
    387e:	b530      	push	{r4, r5, lr}
	return list->head;
    3880:	6858      	ldr	r0, [r3, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    3882:	b158      	cbz	r0, 389c <gpio_nrfx_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3884:	2400      	movs	r4, #0
    3886:	4281      	cmp	r1, r0
    3888:	d112      	bne.n	38b0 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    388a:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    388c:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    388e:	b954      	cbnz	r4, 38a6 <gpio_nrfx_manage_callback+0x2a>
    3890:	428d      	cmp	r5, r1
	list->head = node;
    3892:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    3894:	d100      	bne.n	3898 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    3896:	6098      	str	r0, [r3, #8]
	parent->next = child;
    3898:	2000      	movs	r0, #0
    389a:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    389c:	b96a      	cbnz	r2, 38ba <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    389e:	2000      	movs	r0, #0
}
    38a0:	bd30      	pop	{r4, r5, pc}
    38a2:	4628      	mov	r0, r5
    38a4:	e7ef      	b.n	3886 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    38a6:	428d      	cmp	r5, r1
	parent->next = child;
    38a8:	6020      	str	r0, [r4, #0]
	list->tail = node;
    38aa:	bf08      	it	eq
    38ac:	609c      	streq	r4, [r3, #8]
}
    38ae:	e7f3      	b.n	3898 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    38b0:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    38b2:	4604      	mov	r4, r0
    38b4:	2d00      	cmp	r5, #0
    38b6:	d1f4      	bne.n	38a2 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    38b8:	b13a      	cbz	r2, 38ca <gpio_nrfx_manage_callback+0x4e>
	parent->next = child;
    38ba:	685a      	ldr	r2, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    38bc:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    38be:	600a      	str	r2, [r1, #0]
	list->head = node;
    38c0:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    38c2:	2800      	cmp	r0, #0
    38c4:	d1eb      	bne.n	389e <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    38c6:	6099      	str	r1, [r3, #8]
}
    38c8:	e7ea      	b.n	38a0 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    38ca:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    38ce:	e7e7      	b.n	38a0 <gpio_nrfx_manage_callback+0x24>

000038d0 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
    38d0:	b570      	push	{r4, r5, r6, lr}
    38d2:	460e      	mov	r6, r1
    38d4:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    38d6:	4601      	mov	r1, r0
    38d8:	b150      	cbz	r0, 38f0 <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
    38da:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
    38dc:	688a      	ldr	r2, [r1, #8]
    38de:	402a      	ands	r2, r5
    38e0:	d002      	beq.n	38e8 <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    38e2:	4630      	mov	r0, r6
    38e4:	684b      	ldr	r3, [r1, #4]
    38e6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    38e8:	b114      	cbz	r4, 38f0 <gpio_fire_callbacks.isra.0+0x20>
    38ea:	4621      	mov	r1, r4
    38ec:	6824      	ldr	r4, [r4, #0]
    38ee:	e7f5      	b.n	38dc <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
    38f0:	bd70      	pop	{r4, r5, r6, pc}

000038f2 <cfg_level_pins>:
{
    38f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
    38f6:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    38f8:	2500      	movs	r5, #0
	return port->data;
    38fa:	6907      	ldr	r7, [r0, #16]
	return port->config;
    38fc:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    3900:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    3902:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
    3906:	4313      	orrs	r3, r2
    3908:	ea24 0403 	bic.w	r4, r4, r3
	while (level_pins) {
    390c:	b90c      	cbnz	r4, 3912 <cfg_level_pins+0x20>
}
    390e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    3912:	4226      	tst	r6, r4
    3914:	d010      	beq.n	3938 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    3916:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3918:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
    391c:	40e9      	lsrs	r1, r5
    391e:	f001 0101 	and.w	r1, r1, #1
    3922:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3926:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
    392a:	b2c9      	uxtb	r1, r1
    392c:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
    3930:	f7fe fa00 	bl	1d34 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3934:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    3938:	3501      	adds	r5, #1
		bit <<= 1;
    393a:	0076      	lsls	r6, r6, #1
    393c:	e7e6      	b.n	390c <cfg_level_pins+0x1a>

0000393e <check_level_trigger_pins>:
{
    393e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t bit = 1U << pin;
    3942:	2601      	movs	r6, #1
	uint32_t pin = 0U;
    3944:	2700      	movs	r7, #0
	return port->data;
    3946:	6903      	ldr	r3, [r0, #16]
	return port->config;
    3948:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
    394c:	68dc      	ldr	r4, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    394e:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    3952:	430a      	orrs	r2, r1
    3954:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    3958:	f8d8 2004 	ldr.w	r2, [r8, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    395c:	691b      	ldr	r3, [r3, #16]
    return p_reg->IN;
    395e:	6915      	ldr	r5, [r2, #16]
    3960:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
    3962:	ea24 0505 	bic.w	r5, r4, r5
	while (level_pins) {
    3966:	b914      	cbnz	r4, 396e <check_level_trigger_pins+0x30>
}
    3968:	4628      	mov	r0, r5
    396a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
    396e:	4234      	tst	r4, r6
    3970:	d00a      	beq.n	3988 <check_level_trigger_pins+0x4a>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3972:	f898 0008 	ldrb.w	r0, [r8, #8]
    3976:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
    397a:	2100      	movs	r1, #0
    397c:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
    3980:	f7fe f9d8 	bl	1d34 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
    3984:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
    3988:	3701      	adds	r7, #1
		bit <<= 1;
    398a:	0076      	lsls	r6, r6, #1
    398c:	e7eb      	b.n	3966 <check_level_trigger_pins+0x28>

0000398e <uarte_nrfx_config_get>:
{
    398e:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    3990:	6902      	ldr	r2, [r0, #16]
    3992:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    3996:	e883 0003 	stmia.w	r3, {r0, r1}
}
    399a:	2000      	movs	r0, #0
    399c:	4770      	bx	lr

0000399e <uarte_nrfx_err_check>:
	return config->uarte_regs;
    399e:	6843      	ldr	r3, [r0, #4]
    39a0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    39a2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    39a6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    39aa:	4770      	bx	lr

000039ac <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    39ac:	6843      	ldr	r3, [r0, #4]
	return dev->data;
    39ae:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    39b0:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    39b2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    39b6:	b148      	cbz	r0, 39cc <uarte_nrfx_poll_in+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    39b8:	2000      	movs	r0, #0
	*c = data->rx_data;
    39ba:	7c52      	ldrb	r2, [r2, #17]
    39bc:	700a      	strb	r2, [r1, #0]
    39be:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    39c2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    39c6:	2201      	movs	r2, #1
    39c8:	601a      	str	r2, [r3, #0]
	return 0;
    39ca:	4770      	bx	lr
		return -1;
    39cc:	f04f 30ff 	mov.w	r0, #4294967295
}
    39d0:	4770      	bx	lr

000039d2 <is_tx_ready.isra.0>:
	return config->uarte_regs;
    39d2:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    39d4:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    39d6:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    39da:	b938      	cbnz	r0, 39ec <is_tx_ready.isra.0+0x1a>
    39dc:	799b      	ldrb	r3, [r3, #6]
    39de:	b933      	cbnz	r3, 39ee <is_tx_ready.isra.0+0x1c>
    39e0:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    39e4:	3800      	subs	r0, #0
    39e6:	bf18      	it	ne
    39e8:	2001      	movne	r0, #1
    39ea:	4770      	bx	lr
    39ec:	2001      	movs	r0, #1
}
    39ee:	4770      	bx	lr

000039f0 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    39f0:	6843      	ldr	r3, [r0, #4]
    39f2:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    39f4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    39f8:	05d2      	lsls	r2, r2, #23
    39fa:	d518      	bpl.n	3a2e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    39fc:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    3a00:	b1aa      	cbz	r2, 3a2e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    3a02:	f04f 0120 	mov.w	r1, #32
    3a06:	f3ef 8211 	mrs	r2, BASEPRI
    3a0a:	f381 8811 	msr	BASEPRI, r1
    3a0e:	f3bf 8f6f 	isb	sy
    3a12:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    3a16:	b131      	cbz	r1, 3a26 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a18:	2100      	movs	r1, #0
    3a1a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    3a1e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a22:	2101      	movs	r1, #1
    3a24:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    3a26:	f382 8811 	msr	BASEPRI, r2
    3a2a:	f3bf 8f6f 	isb	sy
}
    3a2e:	4770      	bx	lr

00003a30 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    3a30:	4700      	bx	r0

00003a32 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    3a32:	f000 b9a4 	b.w	3d7e <z_impl_k_busy_wait>

00003a36 <nrfx_clock_enable>:
{
    3a36:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    3a38:	2005      	movs	r0, #5
    3a3a:	f7fd fd9b 	bl	1574 <arch_irq_is_enabled>
    3a3e:	b910      	cbnz	r0, 3a46 <nrfx_clock_enable+0x10>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    3a40:	2005      	movs	r0, #5
    3a42:	f7fd fd87 	bl	1554 <arch_irq_enable>
}

#if NRF_CLOCK_HAS_HFCLKSRC
NRF_STATIC_INLINE void nrf_clock_hf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLKSRC = (uint32_t)(source);
    3a46:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3a4a:	2201      	movs	r2, #1
    3a4c:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
                                   >> CLOCK_HFCLK192MCTRL_HCLK192M_Pos);
}

NRF_STATIC_INLINE void nrf_clock_hfclk192m_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_hfclk_t source)
{
    p_reg->HFCLK192MSRC = (uint32_t)(source);
    3a50:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
}
    3a54:	bd08      	pop	{r3, pc}

00003a56 <nrfx_clock_start>:
    switch (domain)
    3a56:	2803      	cmp	r0, #3
    3a58:	d84b      	bhi.n	3af2 <nrfx_clock_start+0x9c>
    3a5a:	e8df f000 	tbb	[pc, r0]
    3a5e:	2302      	.short	0x2302
    3a60:	3d2f      	.short	0x3d2f
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    3a62:	f04f 2250 	mov.w	r2, #1342197760	; 0x50005000
    3a66:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3a6a:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    3a6e:	03c9      	lsls	r1, r1, #15
    3a70:	d512      	bpl.n	3a98 <nrfx_clock_start+0x42>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    3a72:	f003 0303 	and.w	r3, r3, #3
    3a76:	2b02      	cmp	r3, #2
    3a78:	d10e      	bne.n	3a98 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a7a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3a7e:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3a82:	2200      	movs	r2, #0
    3a84:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3a88:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    3a8c:	2202      	movs	r2, #2
    3a8e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3a92:	2201      	movs	r2, #1
    3a94:	609a      	str	r2, [r3, #8]
}
    3a96:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
    3a98:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3a9c:	2201      	movs	r2, #1
    3a9e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    3aa2:	e7ec      	b.n	3a7e <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3aa4:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3aa8:	2200      	movs	r2, #0
    3aaa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    3aae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    3ab2:	2201      	movs	r2, #1
    3ab4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ab8:	601a      	str	r2, [r3, #0]
}
    3aba:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3abc:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3ac0:	2200      	movs	r2, #0
    3ac2:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    3ac6:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    p_reg->INTENSET = mask;
    3aca:	f44f 7200 	mov.w	r2, #512	; 0x200
    3ace:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3ad2:	2201      	movs	r2, #1
    3ad4:	621a      	str	r2, [r3, #32]
}
    3ad6:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ad8:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3adc:	2200      	movs	r2, #0
    3ade:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3ae2:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    p_reg->INTENSET = mask;
    3ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
    3aea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3aee:	2201      	movs	r2, #1
    3af0:	619a      	str	r2, [r3, #24]
}
    3af2:	4770      	bx	lr

00003af4 <nrfx_clock_stop>:
{
    3af4:	b570      	push	{r4, r5, r6, lr}
    3af6:	4604      	mov	r4, r0
    3af8:	2803      	cmp	r0, #3
    3afa:	d83d      	bhi.n	3b78 <nrfx_clock_stop+0x84>
    3afc:	e8df f000 	tbb	[pc, r0]
    3b00:	4b3d2102 	.word	0x4b3d2102
    p_reg->INTENCLR = mask;
    3b04:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3b08:	2202      	movs	r2, #2
    3b0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b0e:	2200      	movs	r2, #0
    3b10:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    3b14:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b18:	2201      	movs	r2, #1
    3b1a:	60da      	str	r2, [r3, #12]
    3b1c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    3b20:	f04f 2650 	mov.w	r6, #1342197760	; 0x50005000
    switch (domain)
    3b24:	2c02      	cmp	r4, #2
    3b26:	d044      	beq.n	3bb2 <nrfx_clock_stop+0xbe>
    3b28:	2c03      	cmp	r4, #3
    3b2a:	d045      	beq.n	3bb8 <nrfx_clock_stop+0xc4>
    3b2c:	bb24      	cbnz	r4, 3b78 <nrfx_clock_stop+0x84>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3b2e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    3b32:	03db      	lsls	r3, r3, #15
    3b34:	d520      	bpl.n	3b78 <nrfx_clock_stop+0x84>
    3b36:	2001      	movs	r0, #1
    3b38:	f7ff ff7b 	bl	3a32 <nrfx_busy_wait>
    3b3c:	3d01      	subs	r5, #1
    3b3e:	d1f1      	bne.n	3b24 <nrfx_clock_stop+0x30>
    3b40:	e01a      	b.n	3b78 <nrfx_clock_stop+0x84>
    p_reg->INTENCLR = mask;
    3b42:	f04f 2450 	mov.w	r4, #1342197760	; 0x50005000
    3b46:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b48:	2200      	movs	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b4a:	f242 7510 	movw	r5, #10000	; 0x2710
    p_reg->INTENCLR = mask;
    3b4e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b52:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    3b56:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b5a:	6063      	str	r3, [r4, #4]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3b5c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3b60:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3b64:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3b68:	03d2      	lsls	r2, r2, #15
    3b6a:	d505      	bpl.n	3b78 <nrfx_clock_stop+0x84>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    3b6c:	b123      	cbz	r3, 3b78 <nrfx_clock_stop+0x84>
    3b6e:	2001      	movs	r0, #1
    3b70:	f7ff ff5f 	bl	3a32 <nrfx_busy_wait>
    3b74:	3d01      	subs	r5, #1
    3b76:	d1f1      	bne.n	3b5c <nrfx_clock_stop+0x68>
}
    3b78:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    3b7a:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
    3b82:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3b86:	2200      	movs	r2, #0
    3b88:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
    3b8c:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3b90:	2201      	movs	r2, #1
    3b92:	625a      	str	r2, [r3, #36]	; 0x24
}
    3b94:	e7c2      	b.n	3b1c <nrfx_clock_stop+0x28>
    p_reg->INTENCLR = mask;
    3b96:	f04f 2350 	mov.w	r3, #1342197760	; 0x50005000
    3b9a:	f44f 7280 	mov.w	r2, #256	; 0x100
    3b9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    3ba2:	2200      	movs	r2, #0
    3ba4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    3ba8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3bac:	2201      	movs	r2, #1
    3bae:	61da      	str	r2, [r3, #28]
}
    3bb0:	e7b4      	b.n	3b1c <nrfx_clock_stop+0x28>
            if ((p_reg->HFCLK192MSTAT & CLOCK_HFCLK192MSTAT_STATE_Msk)
    3bb2:	f8d6 345c 	ldr.w	r3, [r6, #1116]	; 0x45c
    3bb6:	e7bc      	b.n	3b32 <nrfx_clock_stop+0x3e>
            return (p_reg->HFCLKAUDIOSTAT & CLOCK_HFCLKAUDIOSTAT_STATE_Msk) ==
    3bb8:	f8d6 3454 	ldr.w	r3, [r6, #1108]	; 0x454
    3bbc:	e7b9      	b.n	3b32 <nrfx_clock_stop+0x3e>

00003bbe <z_device_state_init>:
}
    3bbe:	4770      	bx	lr

00003bc0 <z_device_ready>:
	return __device_end - __device_start;
}

bool z_device_ready(const struct device *dev)
{
	return dev->state->initialized && (dev->state->init_res == 0);
    3bc0:	68c3      	ldr	r3, [r0, #12]
    3bc2:	8818      	ldrh	r0, [r3, #0]
    3bc4:	f3c0 0008 	ubfx	r0, r0, #0, #9
}
    3bc8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    3bcc:	4258      	negs	r0, r3
    3bce:	4158      	adcs	r0, r3
    3bd0:	4770      	bx	lr

00003bd2 <arch_system_halt>:
	__asm__ volatile(
    3bd2:	f04f 0220 	mov.w	r2, #32
    3bd6:	f3ef 8311 	mrs	r3, BASEPRI
    3bda:	f382 8811 	msr	BASEPRI, r2
    3bde:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
    3be2:	e7fe      	b.n	3be2 <arch_system_halt+0x10>

00003be4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
    3be4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
    3be6:	f7ff fff4 	bl	3bd2 <arch_system_halt>

00003bea <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3bea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3bec:	4605      	mov	r5, r0
    3bee:	460e      	mov	r6, r1
    3bf0:	f04f 0320 	mov.w	r3, #32
    3bf4:	f3ef 8711 	mrs	r7, BASEPRI
    3bf8:	f383 8811 	msr	BASEPRI, r3
    3bfc:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
    3c00:	f7ff f8ec 	bl	2ddc <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    3c04:	4631      	mov	r1, r6
    3c06:	4604      	mov	r4, r0
    3c08:	4628      	mov	r0, r5
    3c0a:	f7ff ffeb 	bl	3be4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    3c0e:	f387 8811 	msr	BASEPRI, r7
    3c12:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    3c16:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
    3c18:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3c1c:	f7fd be74 	b.w	1908 <z_impl_k_thread_abort>

00003c20 <z_pm_save_idle_exit>:
{
    3c20:	b508      	push	{r3, lr}
	pm_system_resume();
    3c22:	f7fd f997 	bl	f54 <pm_system_resume>
}
    3c26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_idle_exit();
    3c2a:	f7ff bd5e 	b.w	36ea <z_clock_idle_exit>

00003c2e <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    3c2e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    3c32:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    3c34:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    3c36:	2300      	movs	r3, #0
	node->prev = NULL;
    3c38:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    3c3c:	4770      	bx	lr

00003c3e <unpend_thread_no_timeout>:
{
    3c3e:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    3c40:	f7ff fff5 	bl	3c2e <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    3c44:	7b43      	ldrb	r3, [r0, #13]
    3c46:	f023 0302 	bic.w	r3, r3, #2
    3c4a:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    3c4c:	2300      	movs	r3, #0
    3c4e:	6083      	str	r3, [r0, #8]
}
    3c50:	bd08      	pop	{r3, pc}

00003c52 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3c52:	4603      	mov	r3, r0
    3c54:	b920      	cbnz	r0, 3c60 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3c56:	f3ef 8205 	mrs	r2, IPSR
    3c5a:	b90a      	cbnz	r2, 3c60 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    3c5c:	f7fd bc24 	b.w	14a8 <arch_swap>
    3c60:	f383 8811 	msr	BASEPRI, r3
    3c64:	f3bf 8f6f 	isb	sy
}
    3c68:	4770      	bx	lr

00003c6a <z_reschedule_unlocked>:
	__asm__ volatile(
    3c6a:	f04f 0320 	mov.w	r3, #32
    3c6e:	f3ef 8011 	mrs	r0, BASEPRI
    3c72:	f383 8811 	msr	BASEPRI, r3
    3c76:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    3c7a:	f7ff bfea 	b.w	3c52 <z_reschedule_irqlock>

00003c7e <z_priq_dumb_best>:
{
    3c7e:	4603      	mov	r3, r0
	return list->head == list;
    3c80:	6800      	ldr	r0, [r0, #0]
}
    3c82:	4283      	cmp	r3, r0
    3c84:	bf08      	it	eq
    3c86:	2000      	moveq	r0, #0
    3c88:	4770      	bx	lr

00003c8a <add_to_waitq_locked>:
{
    3c8a:	b538      	push	{r3, r4, r5, lr}
    3c8c:	4604      	mov	r4, r0
    3c8e:	460d      	mov	r5, r1
	unready_thread(thread);
    3c90:	f7fe fe84 	bl	299c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    3c94:	7b63      	ldrb	r3, [r4, #13]
    3c96:	f043 0302 	orr.w	r3, r3, #2
    3c9a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    3c9c:	b195      	cbz	r5, 3cc4 <add_to_waitq_locked+0x3a>
    3c9e:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    3ca0:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ca2:	429d      	cmp	r5, r3
    3ca4:	d015      	beq.n	3cd2 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ca6:	b1a3      	cbz	r3, 3cd2 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    3ca8:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    3cac:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    3cb0:	4291      	cmp	r1, r2
    3cb2:	d008      	beq.n	3cc6 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    3cb4:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    3cb6:	2a00      	cmp	r2, #0
    3cb8:	dd05      	ble.n	3cc6 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    3cba:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3cbc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    3cc0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    3cc2:	605c      	str	r4, [r3, #4]
}
    3cc4:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    3cc6:	686a      	ldr	r2, [r5, #4]
    3cc8:	4293      	cmp	r3, r2
    3cca:	d002      	beq.n	3cd2 <add_to_waitq_locked+0x48>
    3ccc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3cce:	2b00      	cmp	r3, #0
    3cd0:	d1ec      	bne.n	3cac <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    3cd2:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    3cd4:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    3cd8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    3cda:	606c      	str	r4, [r5, #4]
}
    3cdc:	e7f2      	b.n	3cc4 <add_to_waitq_locked+0x3a>

00003cde <z_ready_thread>:
{
    3cde:	b510      	push	{r4, lr}
    3ce0:	f04f 0320 	mov.w	r3, #32
    3ce4:	f3ef 8411 	mrs	r4, BASEPRI
    3ce8:	f383 8811 	msr	BASEPRI, r3
    3cec:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    3cf0:	f7fe ff6e 	bl	2bd0 <ready_thread>
	__asm__ volatile(
    3cf4:	f384 8811 	msr	BASEPRI, r4
    3cf8:	f3bf 8f6f 	isb	sy
}
    3cfc:	bd10      	pop	{r4, pc}

00003cfe <z_thread_timeout>:
{
    3cfe:	4601      	mov	r1, r0
    3d00:	b510      	push	{r4, lr}
	__asm__ volatile(
    3d02:	f04f 0320 	mov.w	r3, #32
    3d06:	f3ef 8411 	mrs	r4, BASEPRI
    3d0a:	f383 8811 	msr	BASEPRI, r3
    3d0e:	f3bf 8f6f 	isb	sy
		if (!killed) {
    3d12:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    3d16:	f013 0f28 	tst.w	r3, #40	; 0x28
    3d1a:	d10d      	bne.n	3d38 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    3d1c:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    3d20:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    3d22:	b10b      	cbz	r3, 3d28 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    3d24:	f7ff ff8b 	bl	3c3e <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    3d28:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    3d2c:	f023 0314 	bic.w	r3, r3, #20
    3d30:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    3d34:	f7fe ff4c 	bl	2bd0 <ready_thread>
	__asm__ volatile(
    3d38:	f384 8811 	msr	BASEPRI, r4
    3d3c:	f3bf 8f6f 	isb	sy
}
    3d40:	bd10      	pop	{r4, pc}

00003d42 <z_unpend_first_thread>:
{
    3d42:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3d44:	f04f 0320 	mov.w	r3, #32
    3d48:	f3ef 8511 	mrs	r5, BASEPRI
    3d4c:	f383 8811 	msr	BASEPRI, r3
    3d50:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    3d54:	f7ff ff93 	bl	3c7e <z_priq_dumb_best>
		if (thread != NULL) {
    3d58:	4604      	mov	r4, r0
    3d5a:	b120      	cbz	r0, 3d66 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    3d5c:	f7ff ff6f 	bl	3c3e <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3d60:	3018      	adds	r0, #24
    3d62:	f000 f810 	bl	3d86 <z_abort_timeout>
	__asm__ volatile(
    3d66:	f385 8811 	msr	BASEPRI, r5
    3d6a:	f3bf 8f6f 	isb	sy
}
    3d6e:	4620      	mov	r0, r4
    3d70:	bd38      	pop	{r3, r4, r5, pc}

00003d72 <k_is_in_isr>:
    3d72:	f3ef 8005 	mrs	r0, IPSR
}
    3d76:	3800      	subs	r0, #0
    3d78:	bf18      	it	ne
    3d7a:	2001      	movne	r0, #1
    3d7c:	4770      	bx	lr

00003d7e <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
    3d7e:	b108      	cbz	r0, 3d84 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
    3d80:	f7fd b878 	b.w	e74 <arch_busy_wait>
}
    3d84:	4770      	bx	lr

00003d86 <z_abort_timeout>:
{
    3d86:	b510      	push	{r4, lr}
	__asm__ volatile(
    3d88:	f04f 0220 	mov.w	r2, #32
    3d8c:	f3ef 8411 	mrs	r4, BASEPRI
    3d90:	f382 8811 	msr	BASEPRI, r2
    3d94:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    3d98:	6803      	ldr	r3, [r0, #0]
    3d9a:	b13b      	cbz	r3, 3dac <z_abort_timeout+0x26>
			remove_timeout(to);
    3d9c:	f7ff f9a2 	bl	30e4 <remove_timeout>
			ret = 0;
    3da0:	2000      	movs	r0, #0
	__asm__ volatile(
    3da2:	f384 8811 	msr	BASEPRI, r4
    3da6:	f3bf 8f6f 	isb	sy
}
    3daa:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    3dac:	f06f 0015 	mvn.w	r0, #21
    3db0:	e7f7      	b.n	3da2 <z_abort_timeout+0x1c>

00003db2 <z_get_next_timeout_expiry>:
{
    3db2:	b510      	push	{r4, lr}
	__asm__ volatile(
    3db4:	f04f 0320 	mov.w	r3, #32
    3db8:	f3ef 8411 	mrs	r4, BASEPRI
    3dbc:	f383 8811 	msr	BASEPRI, r3
    3dc0:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    3dc4:	f7ff f966 	bl	3094 <next_timeout>
	__asm__ volatile(
    3dc8:	f384 8811 	msr	BASEPRI, r4
    3dcc:	f3bf 8f6f 	isb	sy
}
    3dd0:	bd10      	pop	{r4, pc}

00003dd2 <z_set_timeout_expiry>:
{
    3dd2:	b570      	push	{r4, r5, r6, lr}
    3dd4:	4604      	mov	r4, r0
    3dd6:	460d      	mov	r5, r1
	__asm__ volatile(
    3dd8:	f04f 0320 	mov.w	r3, #32
    3ddc:	f3ef 8611 	mrs	r6, BASEPRI
    3de0:	f383 8811 	msr	BASEPRI, r3
    3de4:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    3de8:	f7ff f954 	bl	3094 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    3dec:	2801      	cmp	r0, #1
    3dee:	dd05      	ble.n	3dfc <z_set_timeout_expiry+0x2a>
    3df0:	42a0      	cmp	r0, r4
    3df2:	db03      	blt.n	3dfc <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(MIN(ticks, next_to), is_idle);
    3df4:	4629      	mov	r1, r5
    3df6:	4620      	mov	r0, r4
    3df8:	f7fd fb0a 	bl	1410 <z_clock_set_timeout>
	__asm__ volatile(
    3dfc:	f386 8811 	msr	BASEPRI, r6
    3e00:	f3bf 8f6f 	isb	sy
}
    3e04:	bd70      	pop	{r4, r5, r6, pc}

00003e06 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
    3e06:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
    3e08:	f7ff fa66 	bl	32d8 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    3e0c:	bd08      	pop	{r3, pc}

00003e0e <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
    3e0e:	4770      	bx	lr
